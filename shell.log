2018-09-04 21:29:57 - // include directory, this will be replaced by the kernel
2018-09-04 21:29:57 - #I "/home/nbuser/IfSharp/bin"
2018-09-04 21:29:57 - // load base dlls
2018-09-04 21:29:57 - #r "IfSharp.Kernel.dll"
2018-09-04 21:29:57 - #r "NetMQ.dll"
2018-09-04 21:29:57 - // open the global functions and methods
2018-09-04 21:29:57 - open IfSharp.Kernel
2018-09-04 21:29:57 - open IfSharp.Kernel.Globals
2018-09-04 21:30:03 - F# Interactive for F# 4.1
2018-09-04 21:30:03 - Freely distributed under the Apache 2.0 Open Source License
2018-09-04 21:30:03 - For help type #help;;
2018-09-04 21:30:03 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-04 21:30:03 -   seq []
2018-09-04 21:30:03 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-04 21:30:03 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-04 21:30:03 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-04 21:30:07 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-04 21:33:20 - open System
2018-09-04 21:33:21 - let N = 5.
2018-09-04 21:33:22 - let f (x : float) = 
2018-09-04 21:33:22 -         x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-04 21:33:25 - let x0 = - (N % 3.)
2018-09-04 21:33:25 - let points = [|x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5|]
2018-09-04 21:33:30 - let l k x = 
2018-09-04 21:33:30 -     points |> Array.where (fun i -> i <> k) |> Array.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-04 21:33:31 - let LagrangePolynomial x = Array.sumBy (fun k -> l k x * f k) points
2018-09-04 21:33:33 - let (|FirstMiddleLast|_|) (x : 'a[]) = if x.Length > 2 then Some(x.[0], x.[1..x.Length - 2], Array.last x) else None
2018-09-04 21:33:34 - let rec dividedDifference x =
2018-09-04 21:33:34 -     match x with
2018-09-04 21:33:34 -     |FirstMiddleLast(x_0, x_middle, x_n) -> 
2018-09-04 21:33:34 -         (dividedDifference (Array.append x_middle [|x_n|]) - dividedDifference (Array.append [|x_0|] x_middle)) / (x_n - x_0)
2018-09-04 21:33:34 -     |[|x_i; x_j|] -> (f x_j - f x_i) / (x_j - x_i)
2018-09-04 21:33:34 -     |[|x_i|] -> f x_i
2018-09-04 21:33:34 -     |_ -> failwith "Empty points array"
2018-09-04 21:33:35 - let NewtonPolynomial x = 
2018-09-04 21:33:35 -     let term k = 
2018-09-04 21:33:35 -         let getMultiply = if k > 0 then  Array.fold (fun acc i -> acc * (x - i)) 1. points.[.. k - 1] else 1.
2018-09-04 21:33:35 -         dividedDifference points.[.. k] * getMultiply
2018-09-04 21:33:35 -     [|0 .. points.Length - 1|] |> Array.sumBy (fun k -> term k)
2018-09-04 21:35:45 - #load "Paket.fsx"
2018-09-04 21:35:45 - Paket.Package
2018-09-04 21:35:45 -   [ "MathNet.Numerics"
2018-09-04 21:35:45 -     "MathNet.Numerics.FSharp"
2018-09-04 21:35:45 -   ]
2018-09-04 21:35:45 - #load "Paket.Generated.Refs.fsx"
2018-09-04 21:35:45 - #load "XPlot.Plotly.Paket.fsx"
2018-09-04 21:35:45 - #load "XPlot.Plotly.fsx"
2018-09-04 21:35:45 - open XPlot.Plotly
2018-09-04 21:37:22 - Heatmap(z = [[1; 20; 30]; [20; 1; 60]; [30; 60; 1]])
2018-09-04 21:37:22 -     |> Chart.Plot
2018-09-04 21:37:22 -     |> Chart.WithLayout (Layout(title = "Simple Heatmap"))
2018-09-04 21:41:59 - Chart.Line(f)
2018-09-04 21:41:59 - No overloads match for method 'Line'. The available overloads are shown below (or in the Error List window).
2018-09-04 21:41:59 - Possible overload: 'static member Chart.Line : data:seq<#value> -> PlotlyChart'. Type constraint mismatch. The type 
2018-09-04 21:41:59 -     'float -> float'    
2018-09-04 21:41:59 - is not compatible with type
2018-09-04 21:41:59 -     'seq<'a>'    
2018-09-04 21:41:59 - .
2018-09-04 21:41:59 - Possible overload: 'static member Chart.Line : data:seq<#key * #value> -> PlotlyChart'. Type constraint mismatch. The type 
2018-09-04 21:41:59 -     'float -> float'    
2018-09-04 21:41:59 - is not compatible with type
2018-09-04 21:41:59 -     'seq<'a * 'b>'    
2018-09-04 21:41:59 - .
2018-09-04 21:41:59 - Possible overload: 'static member Chart.Line : data:seq<#seq<'a1 * 'a2>> -> PlotlyChart when 'a1 :> key and 'a2 :> value'. Type constraint mismatch. The type 
2018-09-04 21:41:59 -     'float -> float'    
2018-09-04 21:41:59 - is not compatible with type
2018-09-04 21:41:59 -     'seq<'a>'    
2018-09-04 21:41:59 - .
2018-09-04 21:45:19 - [ 1 .. 10 ] |> Chart.Line |> Chart.Show
2018-09-04 21:45:30 - [ 1 .. 10 ] |> Chart.Line |> Chart.Show
2018-09-04 21:45:43 - [ 1 .. 10 ] |> Chart.Line
2018-09-04 21:47:16 - [-10 .. 10] |> List.map (fun x -> f x) |> Chart.Line
2018-09-04 21:47:19 - This expression was expected to have type
2018-09-04 21:47:19 -     'float'    
2018-09-04 21:47:19 - but here has type
2018-09-04 21:47:19 -     'int'    
2018-09-04 21:47:50 - [-10 .. 10] |> List.map (fun x -> f <| float x) |> Chart.Line
2018-09-04 21:48:05 - [-10 .. 100] |> List.map (fun x -> f <| float x) |> Chart.Line
2018-09-04 21:48:43 - [0 .. 100] |> List.map (fun x -> f <| float x) |> Chart.Line
2018-09-04 21:51:02 - [0. .. 0.1 .. 1] |> List.map (fun x -> f <| float x) |> Chart.Line
2018-09-04 21:51:02 - This expression was expected to have type
2018-09-04 21:51:02 -     'float'    
2018-09-04 21:51:02 - but here has type
2018-09-04 21:51:02 -     'int'    
2018-09-04 21:51:13 - [0. .. 0.1 .. 1.] |> List.map (fun x -> f x) |> Chart.Line
2018-09-04 21:51:54 - [0. .. 0.1 .. 1.] |> List.map (fun x -> f x) |> Chart.Line
2018-09-04 21:52:53 - Chart.Combine ([
2018-09-04 21:52:53 -     [0. .. 0.1 .. 1.] |> List.map (fun x -> f x) |> Chart.Line
2018-09-04 21:52:53 -     [0. .. 0.1 .. 1.] |> List.map (fun x -> LagrangePolynomial x) |> Chart.Line
2018-09-04 21:52:53 -     ])
2018-09-04 21:52:53 - Possible incorrect indentation: this token is offside of context started at position (1:16). Try indenting this token further or using standard formatting conventions.
2018-09-04 21:52:53 - Possible incorrect indentation: this token is offside of context started at position (1:16). Try indenting this token further or using standard formatting conventions.
2018-09-04 21:52:53 - Possible incorrect indentation: this token is offside of context started at position (1:16). Try indenting this token further or using standard formatting conventions.
2018-09-04 21:52:53 - Possible incorrect indentation: this token is offside of context started at position (1:16). Try indenting this token further or using standard formatting conventions.
2018-09-04 21:52:53 - The field, constructor or member 'Combine' is not defined.
2018-09-04 21:54:45 - Chart.Combine ([
2018-09-04 21:54:45 -     [0. .. 0.1 .. 1.] |> List.map (fun x -> f x) |> Chart.Line ;
2018-09-04 21:54:45 -     [0. .. 0.1 .. 1.] |> List.map (fun x -> LagrangePolynomial x) |> Chart.Line
2018-09-04 21:54:45 -     ])
2018-09-04 21:54:45 - Possible incorrect indentation: this token is offside of context started at position (1:16). Try indenting this token further or using standard formatting conventions.
2018-09-04 21:54:45 - Possible incorrect indentation: this token is offside of context started at position (1:16). Try indenting this token further or using standard formatting conventions.
2018-09-04 21:54:45 - Possible incorrect indentation: this token is offside of context started at position (1:16). Try indenting this token further or using standard formatting conventions.
2018-09-04 21:54:45 - Possible incorrect indentation: this token is offside of context started at position (1:16). Try indenting this token further or using standard formatting conventions.
2018-09-04 21:54:45 - The field, constructor or member 'Combine' is not defined.
2018-09-04 21:55:18 - [0. .. 0.1 .. 1.] |> List.map (fun x -> f x) |> Chart.Line
2018-09-04 21:55:18 - [0. .. 0.1 .. 1.] |> List.map (fun x -> LagrangePolynomial x) |> Chart.Line
2018-09-04 21:56:00 - [-1. .. 0.1 .. 1.] |> List.map (fun x -> f x) |> Chart.Line
2018-09-04 21:56:00 - [0. .. 0.1 .. 1.] |> List.map (fun x -> LagrangePolynomial x) |> Chart.Line
2018-09-04 21:56:38 - [0. .. 0.1 .. 1.] |> List.map (fun x -> LagrangePolynomial x) |> Chart.Line
2018-09-04 21:59:25 - [0. .. 0.1 .. 1.] |> List.map (fun x -> f x) |> Chart.Line (Color "red")
2018-09-04 21:59:25 - [0. .. 0.1 .. 1.] |> List.map (fun x -> LagrangePolynomial x) |> Chart.Line
2018-09-04 21:59:25 - The value or constructor 'Color' is not defined. Maybe you want one of the following:
2018-09-04 21:59:25 -    Colorbar
2018-09-04 21:59:25 -    floor
2018-09-04 21:59:25 - A unique overload for method 'Line' could not be determined based on type information prior to this program point. A type annotation may be needed. Candidates: static member Chart.Line : data:seq<#key * #value> -> PlotlyChart, static member Chart.Line : data:seq<#seq<'a1 * 'a2>> -> PlotlyChart when 'a1 :> key and 'a2 :> value, static member Chart.Line : data:seq<#value> -> PlotlyChart
2018-09-04 21:59:35 - [0. .. 0.1 .. 1.] |> List.map (fun x -> f x) |> Chart.Line (Color: "red")
2018-09-04 21:59:35 - [0. .. 0.1 .. 1.] |> List.map (fun x -> LagrangePolynomial x) |> Chart.Line
2018-09-04 21:59:35 - Invalid literal in type
2018-09-04 21:59:35 - The value or constructor 'Color' is not defined. Maybe you want one of the following:
2018-09-04 21:59:35 -    Colorbar
2018-09-04 21:59:35 -    floor
2018-09-04 21:59:35 - A unique overload for method 'Line' could not be determined based on type information prior to this program point. A type annotation may be needed. Candidates: static member Chart.Line : data:seq<#key * #value> -> PlotlyChart, static member Chart.Line : data:seq<#seq<'a1 * 'a2>> -> PlotlyChart when 'a1 :> key and 'a2 :> value, static member Chart.Line : data:seq<#value> -> PlotlyChart
2018-09-04 22:02:23 - [0. .. 0.1 .. 1.] |> List.map (fun x -> f x) |> Chart.Line (Color = "red")
2018-09-04 22:02:23 - [0. .. 0.1 .. 1.] |> List.map (fun x -> LagrangePolynomial x) |> Chart.Line
2018-09-04 22:02:23 - A member or object constructor 'Line' taking 0 arguments is not accessible from this code location. All accessible versions of method 'Line' take 1 arguments.
2018-09-04 22:03:22 - Chart.Line ([0. .. 0.1 .. 1.] |> List.map (fun x -> f x), Color = "red")
2018-09-04 22:03:22 - [0. .. 0.1 .. 1.] |> List.map (fun x -> LagrangePolynomial x) |> Chart.Line
2018-09-04 22:03:22 - No accessible member or object constructor named 'Line' takes 1 arguments. The named argument 'Color' doesn't correspond to any argument or settable return property for any overload.
2018-09-04 22:04:43 - #load "Paket.fsx"
2018-09-04 22:04:43 - Paket.Package
2018-09-04 22:04:43 -   [ "MathNet.Numerics"
2018-09-04 22:04:43 -     "MathNet.Numerics.FSharp"
2018-09-04 22:04:43 -   ]
2018-09-04 22:04:43 - #load "Paket.Generated.Refs.fsx"
2018-09-04 22:04:43 - #load "XPlot.Plotly.Paket.fsx"
2018-09-04 22:04:43 - #load "XPlot.Plotly.fsx"
2018-09-04 22:04:43 - #load "FSharp.Charting"
2018-09-04 22:04:43 - open XPlot.Plotly
2018-09-04 22:04:45 - Unable to find the file 'FSharp.Charting' in any of
2018-09-04 22:04:45 -  /home/nbuser/IfSharp/bin
2018-09-04 22:04:45 -  /home/nbuser/IfSharp/bin/packages/XPlot.Plotly/lib/net45/
2018-09-04 22:04:45 -  /home/nbuser/library
2018-09-04 22:04:57 - #load "Paket.fsx"
2018-09-04 22:04:57 - Paket.Package
2018-09-04 22:04:57 -   [ "MathNet.Numerics"
2018-09-04 22:04:57 -     "MathNet.Numerics.FSharp"
2018-09-04 22:04:57 -   ]
2018-09-04 22:04:57 - #load "Paket.Generated.Refs.fsx"
2018-09-04 22:04:57 - #load "XPlot.Plotly.Paket.fsx"
2018-09-04 22:04:57 - #load "XPlot.Plotly.fsx"
2018-09-04 22:04:57 - #load "FSharp.Charting"
2018-09-04 22:04:57 - open XPlot.Plotly
2018-09-04 22:04:57 - open FSharp.Charting
2018-09-04 22:05:00 - Unable to find the file 'FSharp.Charting' in any of
2018-09-04 22:05:00 -  /home/nbuser/IfSharp/bin
2018-09-04 22:05:00 -  /home/nbuser/IfSharp/bin/packages/XPlot.Plotly/lib/net45/
2018-09-04 22:05:00 -  /home/nbuser/library
2018-09-04 22:05:57 - #load "Paket.fsx"
2018-09-04 22:05:57 - Paket.Package
2018-09-04 22:05:57 -   [ "MathNet.Numerics"
2018-09-04 22:05:57 -     "MathNet.Numerics.FSharp"
2018-09-04 22:05:57 -     "FSharp.Charting"
2018-09-04 22:05:57 -   ]
2018-09-04 22:05:57 - #load "Paket.Generated.Refs.fsx"
2018-09-04 22:05:57 - #load "XPlot.Plotly.Paket.fsx"
2018-09-04 22:05:57 - #load "XPlot.Plotly.fsx"
2018-09-04 22:05:57 - #load "FSharp.Charting"
2018-09-04 22:05:57 - open XPlot.Plotly
2018-09-04 22:05:57 - open FSharp.Charting
2018-09-04 22:06:02 - Unable to find the file 'FSharp.Charting' in any of
2018-09-04 22:06:02 -  /home/nbuser/IfSharp/bin
2018-09-04 22:06:02 -  /home/nbuser/IfSharp/bin/packages/XPlot.Plotly/lib/net45/
2018-09-04 22:06:02 -  /home/nbuser/library
2018-09-04 22:08:04 - #load "Paket.fsx"
2018-09-04 22:08:04 - Paket.Package
2018-09-04 22:08:04 -   [ "FsLab"
2018-09-04 22:08:04 -   ]
2018-09-04 22:08:04 - #load "Paket.Generated.Refs.fsx"
2018-09-04 22:08:04 - #load "XPlot.Plotly.Paket.fsx"
2018-09-04 22:08:04 - #load "XPlot.Plotly.fsx"
2018-09-04 22:08:04 - #load "FSharp.Charting"
2018-09-04 22:08:04 - open XPlot.Plotly
2018-09-04 22:08:04 - open FSharp.Charting
2018-09-04 22:08:13 - Unable to find the file 'FSharp.Charting' in any of
2018-09-04 22:08:13 -  /home/nbuser/IfSharp/bin
2018-09-04 22:08:13 -  /home/nbuser/IfSharp/bin/packages/XPlot.Plotly/lib/net45/
2018-09-04 22:08:13 -  /home/nbuser/library
2018-09-04 22:09:00 - #load "Paket.fsx"
2018-09-04 22:09:00 - Paket.Package
2018-09-04 22:09:00 -   [ "MathNet.Numerics"
2018-09-04 22:09:00 -     "MathNet.Numerics.FSharp"
2018-09-04 22:09:00 -   ]
2018-09-04 22:09:00 - #load "Paket.Generated.Refs.fsx"
2018-09-04 22:09:00 - #load "XPlot.Plotly.Paket.fsx"
2018-09-04 22:09:00 - #load "XPlot.Plotly.fsx"
2018-09-04 22:09:00 - open XPlot.Plotly
2018-09-04 22:11:33 - [0. .. 0.1 .. 1.] |> List.map (fun x -> f x) |> Chart.Line
2018-09-04 22:11:33 - [0. .. 0.1 .. 1.] |> List.map (fun x -> LagrangePolynomial x) |> Chart.Line
2018-09-04 22:11:49 - let trace1 =
2018-09-04 22:11:49 -     Scatter(
2018-09-04 22:11:49 -         x = [1; 2; 3; 4],
2018-09-04 22:11:49 -         y = [10; 15; 13; 17]
2018-09-04 22:11:49 -     )
2018-09-04 22:11:49 - let trace2 =
2018-09-04 22:11:49 -     Scatter(
2018-09-04 22:11:49 -         x = [2; 3; 4; 5],
2018-09-04 22:11:49 -         y = [16; 5; 11; 9]
2018-09-04 22:11:49 -     )
2018-09-04 22:11:49 - [trace1; trace2]
2018-09-04 22:11:49 - |> Chart.Plot
2018-09-04 22:11:49 - |> Chart.WithWidth 700
2018-09-04 22:11:49 - |> Chart.WithHeight 500
2018-09-04 22:12:52 - let ``f(X)`` =
2018-09-04 22:12:52 -     Scatter(
2018-09-04 22:12:52 -         x = [1; 2; 3; 4],
2018-09-04 22:12:52 -         y = [10; 15; 13; 17]
2018-09-04 22:12:52 -     )
2018-09-04 22:12:52 - let ``Лаграндж`` =
2018-09-04 22:12:52 -     Scatter(
2018-09-04 22:12:52 -         x = [2; 3; 4; 5],
2018-09-04 22:12:52 -         y = [16; 5; 11; 9]
2018-09-04 22:12:52 -     )
2018-09-04 22:12:52 - [``f(x)``; ``Лаграндж``]
2018-09-04 22:12:52 - |> Chart.Plot
2018-09-04 22:12:52 - |> Chart.WithWidth 700
2018-09-04 22:12:52 - |> Chart.WithHeight 500
2018-09-04 22:12:52 - The value or constructor 'f(x)' is not defined.
2018-09-04 22:13:05 - let ``f(x)`` =
2018-09-04 22:13:05 -     Scatter(
2018-09-04 22:13:05 -         x = [1; 2; 3; 4],
2018-09-04 22:13:05 -         y = [10; 15; 13; 17]
2018-09-04 22:13:05 -     )
2018-09-04 22:13:05 - let ``Лаграндж`` =
2018-09-04 22:13:05 -     Scatter(
2018-09-04 22:13:05 -         x = [2; 3; 4; 5],
2018-09-04 22:13:05 -         y = [16; 5; 11; 9]
2018-09-04 22:13:05 -     )
2018-09-04 22:13:05 - [``f(x)``; ``Лаграндж``]
2018-09-04 22:13:05 - |> Chart.Plot
2018-09-04 22:13:05 - |> Chart.WithWidth 700
2018-09-04 22:13:05 - |> Chart.WithHeight 500
2018-09-04 22:14:45 - let trace1 =
2018-09-04 22:14:45 -     Scatter(
2018-09-04 22:14:45 -         x = [1; 2; 3; 4],
2018-09-04 22:14:45 -         y = [10; 15; 13; 17],
2018-09-04 22:14:45 -         name = "Исходная"
2018-09-04 22:14:45 -     )
2018-09-04 22:14:45 - let trace2 =
2018-09-04 22:14:45 -     Scatter(
2018-09-04 22:14:45 -         x = [2; 3; 4; 5],
2018-09-04 22:14:45 -         y = [16; 5; 11; 9],
2018-09-04 22:14:45 -         name = "Лаграндж"
2018-09-04 22:14:45 -     )
2018-09-04 22:14:45 - [trace1; trace2]
2018-09-04 22:14:45 - |> Chart.Plot
2018-09-04 22:14:45 - |> Chart.WithWidth 700
2018-09-04 22:14:45 - |> Chart.WithHeight 500
2018-09-04 22:17:05 - let trace1 =
2018-09-04 22:17:05 -     let x = [-2. .. 0.1 .. 2.]
2018-09-04 22:17:05 -     let y = x |> List.map (fun k -> f k)
2018-09-04 22:17:05 -     Scatter(
2018-09-04 22:17:05 -         x,
2018-09-04 22:17:05 -         y,
2018-09-04 22:17:05 -         name = "Исходная"
2018-09-04 22:17:05 -     )
2018-09-04 22:17:05 - let trace2 =
2018-09-04 22:17:05 -     Scatter(
2018-09-04 22:17:05 -         x = [2; 3; 4; 5],
2018-09-04 22:17:05 -         y = [16; 5; 11; 9],
2018-09-04 22:17:05 -         name = "Лаграндж"
2018-09-04 22:17:05 -     )
2018-09-04 22:17:05 - [trace1; trace2]
2018-09-04 22:17:05 - |> Chart.Plot
2018-09-04 22:17:05 - |> Chart.WithWidth 700
2018-09-04 22:17:05 - |> Chart.WithHeight 500
2018-09-04 22:17:08 - The member or object constructor 'Scatter' requires 0 argument(s) but is here given 2 unnamed and 0 named argument(s). The required signature is 'new : unit -> Scatter'.
2018-09-04 22:17:29 - let trace1 =
2018-09-04 22:17:29 -     let x = [-2. .. 0.1 .. 2.]
2018-09-04 22:17:29 -     let y = x |> List.map (fun k -> f k)
2018-09-04 22:17:29 -     Scatter(
2018-09-04 22:17:29 -         x = x,
2018-09-04 22:17:29 -         y = y,
2018-09-04 22:17:29 -         name = "Исходная"
2018-09-04 22:17:29 -     )
2018-09-04 22:17:29 - let trace2 =
2018-09-04 22:17:29 -     Scatter(
2018-09-04 22:17:29 -         x = [2; 3; 4; 5],
2018-09-04 22:17:29 -         y = [16; 5; 11; 9],
2018-09-04 22:17:29 -         name = "Лаграндж"
2018-09-04 22:17:29 -     )
2018-09-04 22:17:29 - [trace1; trace2]
2018-09-04 22:17:29 - |> Chart.Plot
2018-09-04 22:17:29 - |> Chart.WithWidth 700
2018-09-04 22:17:29 - |> Chart.WithHeight 500
2018-09-04 22:17:55 - let trace1 =
2018-09-04 22:17:55 -     let y = x |> List.map (fun k -> f k)
2018-09-04 22:17:55 -     Scatter(
2018-09-04 22:17:55 -         x = x,
2018-09-04 22:17:55 -         y = y,
2018-09-04 22:17:55 -         name = "Исходная"
2018-09-04 22:17:55 -     )
2018-09-04 22:17:55 - let trace2 =
2018-09-04 22:17:55 -     Scatter(
2018-09-04 22:17:55 -         x = [2; 3; 4; 5],
2018-09-04 22:17:55 -         y = [16; 5; 11; 9],
2018-09-04 22:17:55 -         name = "Лаграндж"
2018-09-04 22:17:55 -     )
2018-09-04 22:17:55 - [trace1; trace2]
2018-09-04 22:17:55 - |> Chart.Plot
2018-09-04 22:17:55 - |> Chart.WithWidth 700
2018-09-04 22:17:55 - |> Chart.WithHeight 500
2018-09-04 22:17:57 - The value or constructor 'x' is not defined. Maybe you want one of the following:
2018-09-04 22:17:57 -    X
2018-09-04 22:17:57 -    x0
2018-09-04 22:17:57 -    N
2018-09-04 22:17:57 -    Y
2018-09-04 22:17:57 -    Z
2018-09-04 22:17:57 - The value or constructor 'x' is not defined. Maybe you want one of the following:
2018-09-04 22:17:57 -    X
2018-09-04 22:17:57 -    x0
2018-09-04 22:17:57 -    N
2018-09-04 22:17:57 -    Y
2018-09-04 22:17:57 -    Z
2018-09-04 22:19:28 - let plot =
2018-09-04 22:19:28 -     let x = [-2. .. 0.1 .. 2.]
2018-09-04 22:19:28 -     let trace1 =
2018-09-04 22:19:28 -         let y = x |> List.map (fun k -> f k)
2018-09-04 22:19:28 -         Scatter(
2018-09-04 22:19:28 -             x = x,
2018-09-04 22:19:28 -             y = y,
2018-09-04 22:19:28 -             name = "Исходная"
2018-09-04 22:19:28 -         )
2018-09-04 22:19:28 -     let trace2 =
2018-09-04 22:19:28 -         let y = x |> List.map (fun k -> LagrangePolynomial k)
2018-09-04 22:19:28 -         Scatter(
2018-09-04 22:19:28 -             x = x,
2018-09-04 22:19:28 -             y = y,
2018-09-04 22:19:28 -             name = "Лаграндж"
2018-09-04 22:19:28 -         )
2018-09-04 22:19:28 -     [trace1; trace2]
2018-09-04 22:19:28 -     |> Chart.Plot
2018-09-04 22:19:28 -     |> Chart.WithWidth 700
2018-09-04 22:19:28 -     |> Chart.WithHeight 500
2018-09-04 22:19:45 - let plot () =
2018-09-04 22:19:45 -     let x = [-2. .. 0.1 .. 2.]
2018-09-04 22:19:45 -     let trace1 =
2018-09-04 22:19:45 -         let y = x |> List.map (fun k -> f k)
2018-09-04 22:19:45 -         Scatter(
2018-09-04 22:19:45 -             x = x,
2018-09-04 22:19:45 -             y = y,
2018-09-04 22:19:45 -             name = "Исходная"
2018-09-04 22:19:45 -         )
2018-09-04 22:19:45 -     let trace2 =
2018-09-04 22:19:45 -         let y = x |> List.map (fun k -> LagrangePolynomial k)
2018-09-04 22:19:45 -         Scatter(
2018-09-04 22:19:45 -             x = x,
2018-09-04 22:19:45 -             y = y,
2018-09-04 22:19:45 -             name = "Лаграндж"
2018-09-04 22:19:45 -         )
2018-09-04 22:19:45 -     [trace1; trace2]
2018-09-04 22:19:45 -     |> Chart.Plot
2018-09-04 22:19:45 -     |> Chart.WithWidth 700
2018-09-04 22:19:45 -     |> Chart.WithHeight 500
2018-09-04 22:19:45 - plot()
2018-09-04 22:20:12 - let plot () =
2018-09-04 22:20:12 -     let x = [-2. .. 0.1 .. 2.]
2018-09-04 22:20:12 -     let trace1 =
2018-09-04 22:20:12 -         let y = x |> List.map (fun k -> f k)
2018-09-04 22:20:12 -         Scatter(
2018-09-04 22:20:12 -             x = x,
2018-09-04 22:20:12 -             y = y,
2018-09-04 22:20:12 -             name = "Исходная"
2018-09-04 22:20:12 -         )
2018-09-04 22:20:12 -     let trace2 =
2018-09-04 22:20:12 -         let y = x |> List.map (fun k -> LagrangePolynomial k)
2018-09-04 22:20:12 -         Scatter(
2018-09-04 22:20:12 -             x = x,
2018-09-04 22:20:12 -             y = y,
2018-09-04 22:20:12 -             name = "Лаграндж"
2018-09-04 22:20:12 -         )
2018-09-04 22:20:12 -     [trace1; trace2]
2018-09-04 22:20:12 -     |> Chart.Plot
2018-09-04 22:20:12 -     |> Chart.WithWidth 1000
2018-09-04 22:20:12 -     |> Chart.WithHeight 700
2018-09-04 22:20:12 - plot()
2018-09-05 05:08:57 - // include directory, this will be replaced by the kernel
2018-09-05 05:08:57 - #I "/home/nbuser/IfSharp/bin"
2018-09-05 05:08:57 - // load base dlls
2018-09-05 05:08:57 - #r "IfSharp.Kernel.dll"
2018-09-05 05:08:57 - #r "NetMQ.dll"
2018-09-05 05:08:57 - // open the global functions and methods
2018-09-05 05:08:57 - open IfSharp.Kernel
2018-09-05 05:08:57 - open IfSharp.Kernel.Globals
2018-09-05 05:09:13 - F# Interactive for F# 4.1
2018-09-05 05:09:13 - Freely distributed under the Apache 2.0 Open Source License
2018-09-05 05:09:13 - For help type #help;;
2018-09-05 05:09:13 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-05 05:09:13 -   seq []
2018-09-05 05:09:13 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-05 05:09:13 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-05 05:09:13 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-05 05:09:13 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-05 08:00:30 - // include directory, this will be replaced by the kernel
2018-09-05 08:00:30 - #I "/home/nbuser/IfSharp/bin"
2018-09-05 08:00:30 - // load base dlls
2018-09-05 08:00:30 - #r "IfSharp.Kernel.dll"
2018-09-05 08:00:30 - #r "NetMQ.dll"
2018-09-05 08:00:30 - // open the global functions and methods
2018-09-05 08:00:30 - open IfSharp.Kernel
2018-09-05 08:00:30 - open IfSharp.Kernel.Globals
2018-09-05 08:01:08 - F# Interactive for F# 4.1
2018-09-05 08:01:08 - Freely distributed under the Apache 2.0 Open Source License
2018-09-05 08:01:08 - For help type #help;;
2018-09-05 08:01:08 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-05 08:01:08 -   seq []
2018-09-05 08:01:08 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-05 08:01:08 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-05 08:01:08 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-05 08:01:08 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-05 08:01:23 - open System
2018-09-05 08:01:24 - let N = 5.
2018-09-05 08:01:24 - let f (x : float) = 
2018-09-05 08:01:24 -         x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-05 08:01:24 - let x0 = - (N % 3.)
2018-09-05 08:01:24 - let points = [|x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5|]
2018-09-05 08:01:24 - let l k x = 
2018-09-05 08:01:24 -     points |> Array.where (fun i -> i <> k) |> Array.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-05 08:01:25 - let LagrangePolynomial x = Array.sumBy (fun k -> l k x * f k) points
2018-09-05 08:01:25 - let (|FirstMiddleLast|_|) (x : 'a[]) = if x.Length > 2 then Some(x.[0], x.[1..x.Length - 2], Array.last x) else None
2018-09-05 08:01:26 - let rec dividedDifference x =
2018-09-05 08:01:26 -     match x with
2018-09-05 08:01:26 -     |FirstMiddleLast(x_0, x_middle, x_n) -> 
2018-09-05 08:01:26 -         (dividedDifference (Array.append x_middle [|x_n|]) - dividedDifference (Array.append [|x_0|] x_middle)) / (x_n - x_0)
2018-09-05 08:01:26 -     |[|x_i; x_j|] -> (f x_j - f x_i) / (x_j - x_i)
2018-09-05 08:01:26 -     |[|x_i|] -> f x_i
2018-09-05 08:01:26 -     |_ -> failwith "Empty points array"
2018-09-05 08:01:26 - let NewtonPolynomial x = 
2018-09-05 08:01:26 -     let term k = 
2018-09-05 08:01:26 -         let getMultiply = if k > 0 then  Array.fold (fun acc i -> acc * (x - i)) 1. points.[.. k - 1] else 1.
2018-09-05 08:01:26 -         dividedDifference points.[.. k] * getMultiply
2018-09-05 08:01:26 -     [|0 .. points.Length - 1|] |> Array.sumBy (fun k -> term k)
2018-09-05 08:01:26 - #load "Paket.fsx"
2018-09-05 08:01:26 - Paket.Package
2018-09-05 08:01:26 -   [ "MathNet.Numerics"
2018-09-05 08:01:26 -     "MathNet.Numerics.FSharp"
2018-09-05 08:01:26 -   ]
2018-09-05 08:01:26 - #load "Paket.Generated.Refs.fsx"
2018-09-05 08:01:26 - #load "XPlot.Plotly.Paket.fsx"
2018-09-05 08:01:26 - #load "XPlot.Plotly.fsx"
2018-09-05 08:01:26 - open XPlot.Plotly
2018-09-05 08:01:58 - let plot () =
2018-09-05 08:01:58 -     let x = [-2. .. 0.1 .. 2.]
2018-09-05 08:01:58 -     let trace1 =
2018-09-05 08:01:58 -         let y = x |> List.map (fun k -> f k)
2018-09-05 08:01:58 -         Scatter(
2018-09-05 08:01:58 -             x = x,
2018-09-05 08:01:58 -             y = y,
2018-09-05 08:01:58 -             name = "Исходная"
2018-09-05 08:01:58 -         )
2018-09-05 08:01:58 -     let trace2 =
2018-09-05 08:01:58 -         let y = x |> List.map (fun k -> LagrangePolynomial k)
2018-09-05 08:01:58 -         Scatter(
2018-09-05 08:01:58 -             x = x,
2018-09-05 08:01:58 -             y = y,
2018-09-05 08:01:58 -             name = "Лаграндж"
2018-09-05 08:01:58 -         )
2018-09-05 08:01:58 -     [trace1; trace2]
2018-09-05 08:01:58 -     |> Chart.Plot
2018-09-05 08:01:58 -     |> Chart.WithWidth 1000
2018-09-05 08:01:58 -     |> Chart.WithHeight 700
2018-09-05 08:01:58 - plot()
2018-09-05 08:01:59 - [0. .. 0.1 .. 1.] |> List.map (fun x -> f x) |> Chart.Line
2018-09-05 08:01:59 - [0. .. 0.1 .. 1.] |> List.map (fun x -> LagrangePolynomial x) |> Chart.Line
2018-09-05 10:49:43 - // include directory, this will be replaced by the kernel
2018-09-05 10:49:43 - #I "/home/nbuser/IfSharp/bin"
2018-09-05 10:49:43 - // load base dlls
2018-09-05 10:49:43 - #r "IfSharp.Kernel.dll"
2018-09-05 10:49:43 - #r "NetMQ.dll"
2018-09-05 10:49:43 - // open the global functions and methods
2018-09-05 10:49:43 - open IfSharp.Kernel
2018-09-05 10:49:43 - open IfSharp.Kernel.Globals
2018-09-05 10:50:13 - F# Interactive for F# 4.1
2018-09-05 10:50:13 - Freely distributed under the Apache 2.0 Open Source License
2018-09-05 10:50:13 - For help type #help;;
2018-09-05 10:50:13 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-05 10:50:13 -   seq []
2018-09-05 10:50:13 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-05 10:50:13 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-05 10:50:13 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-05 10:50:14 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-05 10:52:04 - open System
2018-09-05 10:52:04 - let N = 5.
2018-09-05 10:52:04 - let f (x : float) = 
2018-09-05 10:52:04 -         x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-05 10:52:05 - let x0 = - (N % 3.)
2018-09-05 10:52:05 - let points = [|x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5|]
2018-09-05 10:52:05 - let l k x = 
2018-09-05 10:52:05 -     points |> Array.where (fun i -> i <> k) |> Array.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-05 10:52:05 - let LagrangePolynomial x = Array.sumBy (fun k -> l k x * f k) points
2018-09-05 10:52:06 - let (|FirstMiddleLast|_|) (x : 'a[]) = if x.Length > 2 then Some(x.[0], x.[1..x.Length - 2], Array.last x) else None
2018-09-05 10:52:07 - let rec dividedDifference x =
2018-09-05 10:52:07 -     match x with
2018-09-05 10:52:07 -     |FirstMiddleLast(x_0, x_middle, x_n) -> 
2018-09-05 10:52:07 -         (dividedDifference (Array.append x_middle [|x_n|]) - dividedDifference (Array.append [|x_0|] x_middle)) / (x_n - x_0)
2018-09-05 10:52:07 -     |[|x_i; x_j|] -> (f x_j - f x_i) / (x_j - x_i)
2018-09-05 10:52:07 -     |[|x_i|] -> f x_i
2018-09-05 10:52:07 -     |_ -> failwith "Empty points array"
2018-09-05 10:52:07 - let NewtonPolynomial x = 
2018-09-05 10:52:07 -     let term k = 
2018-09-05 10:52:07 -         let getMultiply = if k > 0 then  Array.fold (fun acc i -> acc * (x - i)) 1. points.[.. k - 1] else 1.
2018-09-05 10:52:07 -         dividedDifference points.[.. k] * getMultiply
2018-09-05 10:52:07 -     [|0 .. points.Length - 1|] |> Array.sumBy (fun k -> term k)
2018-09-05 10:52:07 - #load "Paket.fsx"
2018-09-05 10:52:07 - Paket.Package
2018-09-05 10:52:07 -   [ "MathNet.Numerics"
2018-09-05 10:52:07 -     "MathNet.Numerics.FSharp"
2018-09-05 10:52:07 -   ]
2018-09-05 10:52:07 - #load "Paket.Generated.Refs.fsx"
2018-09-05 10:52:07 - #load "XPlot.Plotly.Paket.fsx"
2018-09-05 10:52:07 - #load "XPlot.Plotly.fsx"
2018-09-05 10:52:07 - open XPlot.Plotly
2018-09-05 10:52:43 - let plot () =
2018-09-05 10:52:43 -     let x = [-2. .. 0.1 .. 2.]
2018-09-05 10:52:43 -     let trace1 =
2018-09-05 10:52:43 -         let y = x |> List.map f
2018-09-05 10:52:43 -         Scatter(
2018-09-05 10:52:43 -             x = x,
2018-09-05 10:52:43 -             y = y,
2018-09-05 10:52:43 -             name = "Исходная функция"
2018-09-05 10:52:43 -         )
2018-09-05 10:52:43 -     let trace2 =
2018-09-05 10:52:43 -         let y = x |> List.map LagrangePolynomial
2018-09-05 10:52:43 -         Scatter(
2018-09-05 10:52:43 -             x = x,
2018-09-05 10:52:43 -             y = y,
2018-09-05 10:52:43 -             name = "Полином Лагранжа"
2018-09-05 10:52:43 -         )
2018-09-05 10:52:43 -     let trace3 =
2018-09-05 10:52:43 -         let y = x |> List.map NewtonPolynomial
2018-09-05 10:52:43 -         Scatter(
2018-09-05 10:52:43 -             x = x,
2018-09-05 10:52:43 -             y = y,
2018-09-05 10:52:43 -             name = "Полином Ньютона"
2018-09-05 10:52:43 -         )
2018-09-05 10:52:43 -     [trace1; trace2; trace3]
2018-09-05 10:52:43 -     |> Chart.Plot
2018-09-05 10:52:43 -     |> Chart.WithWidth 1000
2018-09-05 10:52:43 -     |> Chart.WithHeight 700
2018-09-05 10:52:43 - plot()
2018-09-05 10:52:44 - [0. .. 0.1 .. 1.] |> List.map (fun x -> f x) |> Chart.Line
2018-09-05 10:52:44 - [0. .. 0.1 .. 1.] |> List.map (fun x -> LagrangePolynomial x) |> Chart.Line
2018-09-05 10:55:01 - let plotLagrange () =
2018-09-05 10:55:01 -     let x = [-2. .. 0.1 .. 2.]
2018-09-05 10:55:01 -     let trace1 =
2018-09-05 10:55:01 -         let y = x |> List.map f
2018-09-05 10:55:01 -         Scatter(
2018-09-05 10:55:01 -             x = x,
2018-09-05 10:55:01 -             y = y,
2018-09-05 10:55:01 -             name = "Исходная функция"
2018-09-05 10:55:01 -         )
2018-09-05 10:55:01 -     let trace2 =
2018-09-05 10:55:01 -         let y = x |> List.map LagrangePolynomial
2018-09-05 10:55:01 -         Scatter(
2018-09-05 10:55:01 -             x = x,
2018-09-05 10:55:01 -             y = y,
2018-09-05 10:55:01 -             name = "Полином Лагранжа"
2018-09-05 10:55:01 -         )
2018-09-05 10:55:01 -     [trace1; trace2]
2018-09-05 10:55:01 -     |> Chart.Plot
2018-09-05 10:55:01 -     |> Chart.WithWidth 1000
2018-09-05 10:55:01 -     |> Chart.WithHeight 700
2018-09-05 10:55:01 - plotLagrange()
2018-09-05 10:55:21 - let plotNewton () =
2018-09-05 10:55:21 -     let x = [-2. .. 0.1 .. 2.]
2018-09-05 10:55:21 -     let trace1 =
2018-09-05 10:55:21 -         let y = x |> List.map f
2018-09-05 10:55:21 -         Scatter(
2018-09-05 10:55:21 -             x = x,
2018-09-05 10:55:21 -             y = y,
2018-09-05 10:55:21 -             name = "Исходная функция"
2018-09-05 10:55:21 -         )
2018-09-05 10:55:21 -     let trace2 =
2018-09-05 10:55:21 -         let y = x |> List.map NewtonPolynomial
2018-09-05 10:55:21 -         Scatter(
2018-09-05 10:55:21 -             x = x,
2018-09-05 10:55:21 -             y = y,
2018-09-05 10:55:21 -             name = "Полином Ньютона"
2018-09-05 10:55:21 -         )
2018-09-05 10:55:21 -     [trace1; trace2]
2018-09-05 10:55:21 -     |> Chart.Plot
2018-09-05 10:55:21 -     |> Chart.WithWidth 1000
2018-09-05 10:55:21 -     |> Chart.WithHeight 700
2018-09-05 10:55:21 - plotNewton()
2018-09-06 08:06:11 - // include directory, this will be replaced by the kernel
2018-09-06 08:06:11 - #I "/home/nbuser/IfSharp/bin"
2018-09-06 08:06:11 - // load base dlls
2018-09-06 08:06:11 - #r "IfSharp.Kernel.dll"
2018-09-06 08:06:11 - #r "NetMQ.dll"
2018-09-06 08:06:11 - // open the global functions and methods
2018-09-06 08:06:11 - open IfSharp.Kernel
2018-09-06 08:06:11 - open IfSharp.Kernel.Globals
2018-09-06 08:06:27 - F# Interactive for F# 4.1
2018-09-06 08:06:27 - Freely distributed under the Apache 2.0 Open Source License
2018-09-06 08:06:27 - For help type #help;;
2018-09-06 08:06:27 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-06 08:06:27 -   seq []
2018-09-06 08:06:27 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-06 08:06:27 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-06 08:06:27 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-06 08:06:27 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-06 08:07:43 - let plotNewton () =
2018-09-06 08:07:43 -     let x = [-2. .. 0.1 .. 2.]
2018-09-06 08:07:43 -     let trace1 =
2018-09-06 08:07:43 -         let y = x |> List.map f
2018-09-06 08:07:43 -         Scatter(
2018-09-06 08:07:43 -             x = x,
2018-09-06 08:07:43 -             y = y,
2018-09-06 08:07:43 -             name = "Исходная функция"
2018-09-06 08:07:43 -         )
2018-09-06 08:07:43 -     let trace2 =
2018-09-06 08:07:43 -         let y = x |> List.map NewtonPolynomial
2018-09-06 08:07:43 -         Scatter(
2018-09-06 08:07:43 -             x = x,
2018-09-06 08:07:43 -             y = y,
2018-09-06 08:07:43 -             name = "Полином Ньютона"
2018-09-06 08:07:43 -         )
2018-09-06 08:07:43 -     [trace1; trace2]
2018-09-06 08:07:43 -     |> Chart.Plot
2018-09-06 08:07:43 -     |> Chart.WithWidth 1000
2018-09-06 08:07:43 -     |> Chart.WithHeight 700
2018-09-06 08:07:43 - plotNewton()
2018-09-06 08:07:43 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-09-06 08:07:43 -    x
2018-09-06 08:07:43 - The value or constructor 'Scatter' is not defined.
2018-09-06 08:07:43 - The value or constructor 'NewtonPolynomial' is not defined.
2018-09-06 08:07:43 - The value or constructor 'Scatter' is not defined.
2018-09-06 08:07:43 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-06 08:07:43 -    char
2018-09-06 08:07:43 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-06 08:07:43 -    char
2018-09-06 08:07:43 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-06 08:07:43 -    char
2018-09-06 08:07:52 - open System
2018-09-06 08:07:52 - let N = 5.
2018-09-06 08:07:52 - let f (x : float) = 
2018-09-06 08:07:52 -         x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-06 08:07:52 - let x0 = - (N % 3.)
2018-09-06 08:07:52 - let points = [|x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5|]
2018-09-06 08:07:52 - let l k x = 
2018-09-06 08:07:52 -     points |> Array.where (fun i -> i <> k) |> Array.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-06 08:07:52 - let LagrangePolynomial x = Array.sumBy (fun k -> l k x * f k) points
2018-09-06 08:07:52 - let (|FirstMiddleLast|_|) (x : 'a[]) = if x.Length > 2 then Some(x.[0], x.[1..x.Length - 2], Array.last x) else None
2018-09-06 08:07:52 - let rec dividedDifference x =
2018-09-06 08:07:52 -     match x with
2018-09-06 08:07:52 -     |FirstMiddleLast(x_0, x_middle, x_n) -> 
2018-09-06 08:07:52 -         (dividedDifference (Array.append x_middle [|x_n|]) - dividedDifference (Array.append [|x_0|] x_middle)) / (x_n - x_0)
2018-09-06 08:07:52 -     |[|x_i; x_j|] -> (f x_j - f x_i) / (x_j - x_i)
2018-09-06 08:07:52 -     |[|x_i|] -> f x_i
2018-09-06 08:07:52 -     |_ -> failwith "Empty points array"
2018-09-06 08:07:53 - let NewtonPolynomial x = 
2018-09-06 08:07:53 -     let term k = 
2018-09-06 08:07:53 -         let getMultiply = if k > 0 then  Array.fold (fun acc i -> acc * (x - i)) 1. points.[.. k - 1] else 1.
2018-09-06 08:07:53 -         dividedDifference points.[.. k] * getMultiply
2018-09-06 08:07:53 -     [|0 .. points.Length - 1|] |> Array.sumBy (fun k -> term k)
2018-09-06 08:07:53 - #load "Paket.fsx"
2018-09-06 08:07:53 - Paket.Package
2018-09-06 08:07:53 -   [ "MathNet.Numerics"
2018-09-06 08:07:53 -     "MathNet.Numerics.FSharp"
2018-09-06 08:07:53 -   ]
2018-09-06 08:07:53 - #load "Paket.Generated.Refs.fsx"
2018-09-06 08:07:53 - #load "XPlot.Plotly.Paket.fsx"
2018-09-06 08:07:53 - #load "XPlot.Plotly.fsx"
2018-09-06 08:07:53 - open XPlot.Plotly
2018-09-06 08:08:07 - let plotLagrange () =
2018-09-06 08:08:07 -     let x = [-2. .. 0.1 .. 2.]
2018-09-06 08:08:07 -     let trace1 =
2018-09-06 08:08:07 -         let y = x |> List.map f
2018-09-06 08:08:07 -         Scatter(
2018-09-06 08:08:07 -             x = x,
2018-09-06 08:08:07 -             y = y,
2018-09-06 08:08:07 -             name = "Исходная функция"
2018-09-06 08:08:07 -         )
2018-09-06 08:08:07 -     let trace2 =
2018-09-06 08:08:07 -         let y = x |> List.map LagrangePolynomial
2018-09-06 08:08:07 -         Scatter(
2018-09-06 08:08:07 -             x = x,
2018-09-06 08:08:07 -             y = y,
2018-09-06 08:08:07 -             name = "Полином Лагранжа"
2018-09-06 08:08:07 -         )
2018-09-06 08:08:07 -     [trace1; trace2]
2018-09-06 08:08:07 -     |> Chart.Plot
2018-09-06 08:08:07 -     |> Chart.WithWidth 1000
2018-09-06 08:08:07 -     |> Chart.WithHeight 700
2018-09-06 08:08:07 - plotLagrange()
2018-09-06 08:08:08 - let plotNewton () =
2018-09-06 08:08:08 -     let x = [-2. .. 0.1 .. 2.]
2018-09-06 08:08:08 -     let trace1 =
2018-09-06 08:08:08 -         let y = x |> List.map f
2018-09-06 08:08:08 -         Scatter(
2018-09-06 08:08:08 -             x = x,
2018-09-06 08:08:08 -             y = y,
2018-09-06 08:08:08 -             name = "Исходная функция"
2018-09-06 08:08:08 -         )
2018-09-06 08:08:08 -     let trace2 =
2018-09-06 08:08:08 -         let y = x |> List.map NewtonPolynomial
2018-09-06 08:08:08 -         Scatter(
2018-09-06 08:08:08 -             x = x,
2018-09-06 08:08:08 -             y = y,
2018-09-06 08:08:08 -             name = "Полином Ньютона"
2018-09-06 08:08:08 -         )
2018-09-06 08:08:08 -     [trace1; trace2]
2018-09-06 08:08:08 -     |> Chart.Plot
2018-09-06 08:08:08 -     |> Chart.WithWidth 1000
2018-09-06 08:08:08 -     |> Chart.WithHeight 700
2018-09-06 08:08:08 - plotNewton()
2018-09-06 08:09:13 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-09 10:30:10 - // include directory, this will be replaced by the kernel
2018-09-09 10:30:10 - #I "/home/nbuser/IfSharp/bin"
2018-09-09 10:30:10 - // load base dlls
2018-09-09 10:30:10 - #r "IfSharp.Kernel.dll"
2018-09-09 10:30:10 - #r "NetMQ.dll"
2018-09-09 10:30:10 - // open the global functions and methods
2018-09-09 10:30:10 - open IfSharp.Kernel
2018-09-09 10:30:10 - open IfSharp.Kernel.Globals
2018-09-09 10:30:17 - F# Interactive for F# 4.1
2018-09-09 10:30:17 - Freely distributed under the Apache 2.0 Open Source License
2018-09-09 10:30:17 - For help type #help;;
2018-09-09 10:30:17 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-09 10:30:17 -   seq []
2018-09-09 10:30:17 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-09 10:30:17 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-09 10:30:17 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-09 10:30:17 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-09 12:34:27 - open XPlot.Plotly
2018-09-09 12:34:27 - open System
2018-09-09 12:34:27 - The namespace or module 'XPlot' is not defined.
2018-09-09 12:34:27 - let N = 5.
2018-09-09 12:34:27 - let f (x : float) = 
2018-09-09 12:34:27 -         x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-09 12:34:27 - The value, constructor, namespace or type 'Exp' is not defined.
2018-09-09 12:34:27 - The value, constructor, namespace or type 'Sin' is not defined.
2018-09-09 12:34:28 - let x0 = - (N % 3.)
2018-09-09 12:34:28 - let points = [|x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5|]
2018-09-09 12:34:28 - let l k x = 
2018-09-09 12:34:28 -     points |> Array.where (fun i -> i <> k) |> Array.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-09 12:34:28 - let LagrangePolynomial x = Array.sumBy (fun k -> l k x * f k) points
2018-09-09 12:34:28 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-09-09 12:34:28 -    N
2018-09-09 12:34:28 -    k
2018-09-09 12:34:28 -    l
2018-09-09 12:34:28 -    x
2018-09-09 12:34:28 - let plotLagrange () =
2018-09-09 12:34:28 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 12:34:28 -     let trace1 =
2018-09-09 12:34:28 -         let y = x |> List.map f
2018-09-09 12:34:28 -         Scatter(
2018-09-09 12:34:28 -             x = x,
2018-09-09 12:34:28 -             y = y,
2018-09-09 12:34:28 -             name = "Исходная функция"
2018-09-09 12:34:28 -         )
2018-09-09 12:34:28 -     let trace2 =
2018-09-09 12:34:28 -         let y = x |> List.map LagrangePolynomial
2018-09-09 12:34:28 -         Scatter(
2018-09-09 12:34:28 -             x = x,
2018-09-09 12:34:28 -             y = y,
2018-09-09 12:34:28 -             name = "Полином Лагранжа"
2018-09-09 12:34:28 -         )
2018-09-09 12:34:28 -     [trace1; trace2]
2018-09-09 12:34:28 -     |> Chart.Plot
2018-09-09 12:34:28 -     |> Chart.WithWidth 1000
2018-09-09 12:34:28 -     |> Chart.WithHeight 700
2018-09-09 12:34:28 - plotLagrange()
2018-09-09 12:34:28 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-09-09 12:34:28 -    N
2018-09-09 12:34:28 -    l
2018-09-09 12:34:28 -    x
2018-09-09 12:34:28 - The value or constructor 'Scatter' is not defined.
2018-09-09 12:34:28 - The value or constructor 'LagrangePolynomial' is not defined.
2018-09-09 12:34:28 - The value or constructor 'Scatter' is not defined.
2018-09-09 12:34:28 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-09 12:34:28 -    char
2018-09-09 12:34:28 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-09 12:34:28 -    char
2018-09-09 12:34:28 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-09 12:34:28 -    char
2018-09-09 12:34:28 - let (|FirstMiddleLast|_|) (x : 'a[]) = if x.Length > 2 then Some(x.[0], x.[1..x.Length - 2], Array.last x) else None
2018-09-09 12:34:28 - let rec dividedDifference x =
2018-09-09 12:34:28 -     match x with
2018-09-09 12:34:28 -     |FirstMiddleLast(x_0, x_middle, x_n) -> 
2018-09-09 12:34:28 -         (dividedDifference (Array.append x_middle [|x_n|]) - dividedDifference (Array.append [|x_0|] x_middle)) / (x_n - x_0)
2018-09-09 12:34:28 -     |[|x_i; x_j|] -> (f x_j - f x_i) / (x_j - x_i)
2018-09-09 12:34:28 -     |[|x_i|] -> f x_i
2018-09-09 12:34:28 -     |_ -> failwith "Empty points array"
2018-09-09 12:34:29 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-09-09 12:34:29 -    N
2018-09-09 12:34:29 -    l
2018-09-09 12:34:29 -    x
2018-09-09 12:34:29 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-09-09 12:34:29 -    N
2018-09-09 12:34:29 -    l
2018-09-09 12:34:29 -    x
2018-09-09 12:34:29 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-09-09 12:34:29 -    N
2018-09-09 12:34:29 -    l
2018-09-09 12:34:29 -    x
2018-09-09 12:34:29 - let NewtonPolynomial x = 
2018-09-09 12:34:29 -     let term k = 
2018-09-09 12:34:29 -         let getMultiply = if k > 0 then  Array.fold (fun acc i -> acc * (x - i)) 1. points.[.. k - 1] else 1.
2018-09-09 12:34:29 -         dividedDifference points.[.. k] * getMultiply
2018-09-09 12:34:29 -     [|0 .. points.Length - 1|] |> Array.sumBy (fun k -> term k)
2018-09-09 12:34:29 - The value or constructor 'dividedDifference' is not defined.
2018-09-09 12:34:29 - let plotNewton () =
2018-09-09 12:34:29 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 12:34:29 -     let trace1 =
2018-09-09 12:34:29 -         let y = x |> List.map f
2018-09-09 12:34:29 -         Scatter(
2018-09-09 12:34:29 -             x = x,
2018-09-09 12:34:29 -             y = y,
2018-09-09 12:34:29 -             name = "Исходная функция"
2018-09-09 12:34:29 -         )
2018-09-09 12:34:29 -     let trace2 =
2018-09-09 12:34:29 -         let y = x |> List.map NewtonPolynomial
2018-09-09 12:34:29 -         Scatter(
2018-09-09 12:34:29 -             x = x,
2018-09-09 12:34:29 -             y = y,
2018-09-09 12:34:29 -             name = "Полином Ньютона"
2018-09-09 12:34:29 -         )
2018-09-09 12:34:29 -     [trace1; trace2]
2018-09-09 12:34:29 -     |> Chart.Plot
2018-09-09 12:34:29 -     |> Chart.WithWidth 1000
2018-09-09 12:34:29 -     |> Chart.WithHeight 700
2018-09-09 12:34:29 - plotNewton()
2018-09-09 12:34:29 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-09-09 12:34:29 -    N
2018-09-09 12:34:29 -    l
2018-09-09 12:34:29 -    x
2018-09-09 12:34:29 - The value or constructor 'Scatter' is not defined.
2018-09-09 12:34:29 - The value or constructor 'NewtonPolynomial' is not defined.
2018-09-09 12:34:29 - The value or constructor 'Scatter' is not defined.
2018-09-09 12:34:29 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-09 12:34:29 -    char
2018-09-09 12:34:29 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-09 12:34:29 -    char
2018-09-09 12:34:29 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-09 12:34:29 -    char
2018-09-09 12:34:29 - let plotError () =
2018-09-09 12:34:29 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 12:34:29 -     let trace1 =
2018-09-09 12:34:29 -         let f_y = x |> List.map f
2018-09-09 12:34:29 -         let l_y = x |> List.map NewtonPolynomial
2018-09-09 12:34:29 -         let error = List.map2 (fun i j -> Math.Abs(i - j)) f_y l_y
2018-09-09 12:34:29 -         Scatter(
2018-09-09 12:34:29 -             x = x,
2018-09-09 12:34:29 -             y = y
2018-09-09 12:34:29 -         )
2018-09-09 12:34:29 -     [trace1; trace2]
2018-09-09 12:34:29 -     |> Chart.Plot
2018-09-09 12:34:29 -     |> Chart.WithWidth 1000
2018-09-09 12:34:29 -     |> Chart.WithHeight 700
2018-09-09 12:34:29 - plotError()
2018-09-09 12:34:29 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-09-09 12:34:29 -    N
2018-09-09 12:34:29 -    l
2018-09-09 12:34:29 -    x
2018-09-09 12:34:29 - The value or constructor 'NewtonPolynomial' is not defined.
2018-09-09 12:34:29 - The value, constructor, namespace or type 'Abs' is not defined.
2018-09-09 12:34:29 - The value or constructor 'Scatter' is not defined.
2018-09-09 12:34:29 - The value or constructor 'trace2' is not defined. Maybe you want one of the following:
2018-09-09 12:34:29 -    trace1
2018-09-09 12:34:29 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-09 12:34:29 -    char
2018-09-09 12:34:29 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-09 12:34:29 -    char
2018-09-09 12:34:29 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-09 12:34:29 -    char
2018-09-09 12:34:43 - #load "XPlot.Plotly.Paket.fsx"
2018-09-09 12:34:43 - #load "XPlot.Plotly.fsx"
2018-09-09 12:34:43 - open XPlot.Plotly
2018-09-09 12:34:43 - open System
2018-09-09 12:35:20 - #load "XPlot.Plotly.Paket.fsx"
2018-09-09 12:35:20 - #load "XPlot.Plotly.fsx"
2018-09-09 12:35:20 - open XPlot.Plotly
2018-09-09 12:35:20 - open System
2018-09-09 12:35:21 - let N = 5.
2018-09-09 12:35:21 - let f (x : float) = 
2018-09-09 12:35:21 -         x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-09 12:35:21 - let x0 = - (N % 3.)
2018-09-09 12:35:21 - let points = [|x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5|]
2018-09-09 12:35:21 - let l k x = 
2018-09-09 12:35:21 -     points |> Array.where (fun i -> i <> k) |> Array.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-09 12:35:21 - let LagrangePolynomial x = Array.sumBy (fun k -> l k x * f k) points
2018-09-09 12:35:21 - let plotLagrange () =
2018-09-09 12:35:21 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 12:35:21 -     let trace1 =
2018-09-09 12:35:21 -         let y = x |> List.map f
2018-09-09 12:35:21 -         Scatter(
2018-09-09 12:35:21 -             x = x,
2018-09-09 12:35:21 -             y = y,
2018-09-09 12:35:21 -             name = "Исходная функция"
2018-09-09 12:35:21 -         )
2018-09-09 12:35:21 -     let trace2 =
2018-09-09 12:35:21 -         let y = x |> List.map LagrangePolynomial
2018-09-09 12:35:21 -         Scatter(
2018-09-09 12:35:21 -             x = x,
2018-09-09 12:35:21 -             y = y,
2018-09-09 12:35:21 -             name = "Полином Лагранжа"
2018-09-09 12:35:21 -         )
2018-09-09 12:35:21 -     [trace1; trace2]
2018-09-09 12:35:21 -     |> Chart.Plot
2018-09-09 12:35:21 -     |> Chart.WithWidth 1000
2018-09-09 12:35:21 -     |> Chart.WithHeight 700
2018-09-09 12:35:21 - plotLagrange()
2018-09-09 12:35:21 - let (|FirstMiddleLast|_|) (x : 'a[]) = if x.Length > 2 then Some(x.[0], x.[1..x.Length - 2], Array.last x) else None
2018-09-09 12:35:21 - let rec dividedDifference x =
2018-09-09 12:35:21 -     match x with
2018-09-09 12:35:21 -     |FirstMiddleLast(x_0, x_middle, x_n) -> 
2018-09-09 12:35:21 -         (dividedDifference (Array.append x_middle [|x_n|]) - dividedDifference (Array.append [|x_0|] x_middle)) / (x_n - x_0)
2018-09-09 12:35:21 -     |[|x_i; x_j|] -> (f x_j - f x_i) / (x_j - x_i)
2018-09-09 12:35:21 -     |[|x_i|] -> f x_i
2018-09-09 12:35:21 -     |_ -> failwith "Empty points array"
2018-09-09 12:35:21 - let NewtonPolynomial x = 
2018-09-09 12:35:21 -     let term k = 
2018-09-09 12:35:21 -         let getMultiply = if k > 0 then  Array.fold (fun acc i -> acc * (x - i)) 1. points.[.. k - 1] else 1.
2018-09-09 12:35:21 -         dividedDifference points.[.. k] * getMultiply
2018-09-09 12:35:21 -     [|0 .. points.Length - 1|] |> Array.sumBy (fun k -> term k)
2018-09-09 12:35:21 - let plotNewton () =
2018-09-09 12:35:21 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 12:35:21 -     let trace1 =
2018-09-09 12:35:21 -         let y = x |> List.map f
2018-09-09 12:35:21 -         Scatter(
2018-09-09 12:35:21 -             x = x,
2018-09-09 12:35:21 -             y = y,
2018-09-09 12:35:21 -             name = "Исходная функция"
2018-09-09 12:35:21 -         )
2018-09-09 12:35:21 -     let trace2 =
2018-09-09 12:35:21 -         let y = x |> List.map NewtonPolynomial
2018-09-09 12:35:21 -         Scatter(
2018-09-09 12:35:21 -             x = x,
2018-09-09 12:35:21 -             y = y,
2018-09-09 12:35:21 -             name = "Полином Ньютона"
2018-09-09 12:35:21 -         )
2018-09-09 12:35:21 -     [trace1; trace2]
2018-09-09 12:35:21 -     |> Chart.Plot
2018-09-09 12:35:21 -     |> Chart.WithWidth 1000
2018-09-09 12:35:21 -     |> Chart.WithHeight 700
2018-09-09 12:35:21 - plotNewton()
2018-09-09 12:35:22 - let plotError () =
2018-09-09 12:35:22 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 12:35:22 -     let trace1 =
2018-09-09 12:35:22 -         let f_y = x |> List.map f
2018-09-09 12:35:22 -         let l_y = x |> List.map NewtonPolynomial
2018-09-09 12:35:22 -         let error = List.map2 (fun i j -> Math.Abs(i - j)) f_y l_y
2018-09-09 12:35:22 -         Scatter(
2018-09-09 12:35:22 -             x = x,
2018-09-09 12:35:22 -             y = y
2018-09-09 12:35:22 -         )
2018-09-09 12:35:22 -     [trace1; trace2]
2018-09-09 12:35:22 -     |> Chart.Plot
2018-09-09 12:35:22 -     |> Chart.WithWidth 1000
2018-09-09 12:35:22 -     |> Chart.WithHeight 700
2018-09-09 12:35:22 - plotError()
2018-09-09 12:35:22 - A unique overload for method 'Abs' could not be determined based on type information prior to this program point. A type annotation may be needed. Candidates: Math.Abs(value: decimal) : decimal, Math.Abs(value: float) : float, Math.Abs(value: float32) : float32, Math.Abs(value: int) : int, Math.Abs(value: int16) : int16, Math.Abs(value: int64) : int64, Math.Abs(value: sbyte) : sbyte
2018-09-09 12:35:22 - The value or constructor 'y' is not defined. Maybe you want one of the following:
2018-09-09 12:35:22 -    Y
2018-09-09 12:35:22 -    N
2018-09-09 12:35:22 -    X
2018-09-09 12:35:22 -    Z
2018-09-09 12:35:22 -    f
2018-09-09 12:35:22 - The value or constructor 'trace2' is not defined. Maybe you want one of the following:
2018-09-09 12:35:22 -    Trace
2018-09-09 12:35:22 -    trace1
2018-09-09 12:38:01 - let plotError () =
2018-09-09 12:38:01 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 12:38:01 -     let trace1 =
2018-09-09 12:38:01 -         let f_y = x |> List.map f
2018-09-09 12:38:01 -         let l_y = x |> List.map NewtonPolynomial
2018-09-09 12:38:01 -         let error = List.map2 (fun i j -> Math.Abs (i - j)) f_y l_y
2018-09-09 12:38:01 -         Scatter(
2018-09-09 12:38:01 -             x = x,
2018-09-09 12:38:01 -             y = error
2018-09-09 12:38:01 -         )
2018-09-09 12:38:01 -     trace1
2018-09-09 12:38:01 -     |> Chart.Plot
2018-09-09 12:38:01 -     |> Chart.WithWidth 1000
2018-09-09 12:38:01 -     |> Chart.WithHeight 700
2018-09-09 12:38:01 - plotError()
2018-09-09 12:38:01 - A unique overload for method 'Abs' could not be determined based on type information prior to this program point. A type annotation may be needed. Candidates: Math.Abs(value: decimal) : decimal, Math.Abs(value: float) : float, Math.Abs(value: float32) : float32, Math.Abs(value: int) : int, Math.Abs(value: int16) : int16, Math.Abs(value: int64) : int64, Math.Abs(value: sbyte) : sbyte
2018-09-09 12:38:29 - let plotError () =
2018-09-09 12:38:29 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 12:38:29 -     let trace1 =
2018-09-09 12:38:29 -         let f_y = x |> List.map f
2018-09-09 12:38:29 -         let l_y = x |> List.map NewtonPolynomial
2018-09-09 12:38:29 -         let error = List.map2 (fun (i : float) (j : float) -> Math.Abs (i - j)) f_y l_y
2018-09-09 12:38:29 -         Scatter(
2018-09-09 12:38:29 -             x = x,
2018-09-09 12:38:29 -             y = error
2018-09-09 12:38:29 -         )
2018-09-09 12:38:29 -     trace1
2018-09-09 12:38:29 -     |> Chart.Plot
2018-09-09 12:38:29 -     |> Chart.WithWidth 1000
2018-09-09 12:38:29 -     |> Chart.WithHeight 700
2018-09-09 12:38:29 - plotError()
2018-09-09 12:41:48 - let plotError () =
2018-09-09 12:41:48 -     let x = [-5. .. 0.1 .. 5.]
2018-09-09 12:41:48 -     let trace1 =
2018-09-09 12:41:48 -         let f_y = x |> List.map f
2018-09-09 12:41:48 -         let l_y = x |> List.map NewtonPolynomial
2018-09-09 12:41:48 -         let error = List.map2 (fun (i : float) (j : float) -> Math.Abs (i - j)) f_y l_y
2018-09-09 12:41:48 -         Scatter(
2018-09-09 12:41:48 -             x = x,
2018-09-09 12:41:48 -             y = error
2018-09-09 12:41:48 -         )
2018-09-09 12:41:48 -     trace1
2018-09-09 12:41:48 -     |> Chart.Plot
2018-09-09 12:41:48 -     |> Chart.WithWidth 1000
2018-09-09 12:41:48 -     |> Chart.WithHeight 700
2018-09-09 12:41:48 - plotError()
2018-09-09 12:42:16 - let plotError () =
2018-09-09 12:42:16 -     let x = [-5. .. 0.1 .. 2.]
2018-09-09 12:42:16 -     let trace1 =
2018-09-09 12:42:16 -         let f_y = x |> List.map f
2018-09-09 12:42:16 -         let l_y = x |> List.map NewtonPolynomial
2018-09-09 12:42:16 -         let error = List.map2 (fun (i : float) (j : float) -> Math.Abs (i - j)) f_y l_y
2018-09-09 12:42:16 -         Scatter(
2018-09-09 12:42:16 -             x = x,
2018-09-09 12:42:16 -             y = error
2018-09-09 12:42:16 -         )
2018-09-09 12:42:16 -     trace1
2018-09-09 12:42:16 -     |> Chart.Plot
2018-09-09 12:42:16 -     |> Chart.WithWidth 1000
2018-09-09 12:42:16 -     |> Chart.WithHeight 700
2018-09-09 12:42:16 - plotError()
2018-09-09 12:45:22 - let plotError () =
2018-09-09 12:45:22 -     let x = [-5. .. 0.1 .. 2.]
2018-09-09 12:45:22 -     let trace1 =
2018-09-09 12:45:22 -         let f_y = x |> List.map f
2018-09-09 12:45:22 -         let l_y = x |> List.map NewtonPolynomial
2018-09-09 12:45:22 -         let error = List.map2 (fun i j -> abs (i - j)) f_y l_y
2018-09-09 12:45:22 -         Scatter(
2018-09-09 12:45:22 -             x = x,
2018-09-09 12:45:22 -             y = error
2018-09-09 12:45:22 -         )
2018-09-09 12:45:22 -     trace1
2018-09-09 12:45:22 -     |> Chart.Plot
2018-09-09 12:45:22 -     |> Chart.WithWidth 1000
2018-09-09 12:45:22 -     |> Chart.WithHeight 700
2018-09-09 12:45:22 - plotError()
2018-09-09 14:40:52 - let plotError () =
2018-09-09 14:40:52 -     let x = [-5. .. 0.1 .. 2.]
2018-09-09 14:40:52 -     let trace1 =
2018-09-09 14:40:52 -         let f_y = x |> List.map f
2018-09-09 14:40:52 -         let l_y = x |> List.map NewtonPolynomial
2018-09-09 14:40:52 -         let error = List.map2 (fun i j -> abs (i - j)) f_y l_y
2018-09-09 14:40:52 -         Scatter(
2018-09-09 14:40:52 -             x = x,
2018-09-09 14:40:52 -             y = error,
2018-09-09 14:40:52 -             name = "Абсолютная погрешность"
2018-09-09 14:40:52 -         )
2018-09-09 14:40:52 -     trace1
2018-09-09 14:40:52 -     |> Chart.Plot
2018-09-09 14:40:52 -     |> Chart.WithWidth 1000
2018-09-09 14:40:52 -     |> Chart.WithHeight 700
2018-09-09 14:40:52 - plotError()
2018-09-09 14:44:25 - let plotError () =
2018-09-09 14:44:25 -     let x = [-5. .. 0.1 .. 2.]
2018-09-09 14:44:25 -     let trace1 =
2018-09-09 14:44:25 -         let error = List.map (fun i -> abs (f i - NewtonPolynomial i)) x
2018-09-09 14:44:25 -         Scatter(
2018-09-09 14:44:25 -             x = x,
2018-09-09 14:44:25 -             y = error,
2018-09-09 14:44:25 -             name = "Абсолютная погрешность"
2018-09-09 14:44:25 -         )
2018-09-09 14:44:25 -     trace1
2018-09-09 14:44:25 -     |> Chart.Plot
2018-09-09 14:44:25 -     |> Chart.WithWidth 1000
2018-09-09 14:44:25 -     |> Chart.WithHeight 700
2018-09-09 14:44:25 - plotError()
2018-09-09 18:37:30 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-09 20:29:28 - #load "XPlot.Plotly.Paket.fsx"
2018-09-09 20:29:28 - #load "XPlot.Plotly.fsx"
2018-09-09 20:29:28 - open XPlot.Plotly
2018-09-09 20:29:28 - open System
2018-09-09 20:29:30 - let N = 5.
2018-09-09 20:29:30 - let f (x : float) = 
2018-09-09 20:29:30 -         x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-09 20:29:30 - let x0 = - (N % 3.)
2018-09-09 20:29:30 - let points = [|x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5|]
2018-09-09 20:29:30 - let l k x = 
2018-09-09 20:29:30 -     points |> Array.where (fun i -> i <> k) |> Array.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-09 20:29:30 - let LagrangePolynomial x = Array.sumBy (fun k -> l k x * f k) points
2018-09-09 20:29:30 - let plotLagrange () =
2018-09-09 20:29:30 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 20:29:30 -     let trace1 =
2018-09-09 20:29:30 -         let y = x |> List.map f
2018-09-09 20:29:30 -         Scatter(
2018-09-09 20:29:30 -             x = x,
2018-09-09 20:29:30 -             y = y,
2018-09-09 20:29:30 -             name = "Исходная функция"
2018-09-09 20:29:30 -         )
2018-09-09 20:29:30 -     let trace2 =
2018-09-09 20:29:30 -         let y = x |> List.map LagrangePolynomial
2018-09-09 20:29:30 -         Scatter(
2018-09-09 20:29:30 -             x = x,
2018-09-09 20:29:30 -             y = y,
2018-09-09 20:29:30 -             name = "Полином Лагранжа"
2018-09-09 20:29:30 -         )
2018-09-09 20:29:30 -     [trace1; trace2]
2018-09-09 20:29:30 -     |> Chart.Plot
2018-09-09 20:29:30 -     |> Chart.WithWidth 1000
2018-09-09 20:29:30 -     |> Chart.WithHeight 700
2018-09-09 20:29:30 - plotLagrange()
2018-09-09 20:29:30 - let (|FirstMiddleLast|_|) (x : 'a[]) = if x.Length > 2 then Some(x.[0], x.[1..x.Length - 2], Array.last x) else None
2018-09-09 20:29:30 - let dividedDifferencesTable = 
2018-09-09 20:29:30 -     let rec computeCells y acc = 
2018-09-09 20:29:30 -         let computeCol n (prevCol : float list) =
2018-09-09 20:29:30 -             let rec computeColInternal x acc =
2018-09-09 20:29:30 -                 match x with
2018-09-09 20:29:30 -                 | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-09 20:29:30 -                 | _ -> List.rev acc
2018-09-09 20:29:30 -             computeColInternal (points.Length - n) [] 
2018-09-09 20:29:30 -         match y with
2018-09-09 20:29:30 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-09 20:29:30 -         |_ -> List.rev acc
2018-09-09 20:29:30 -     let pointsList = points |> Array.toList
2018-09-09 20:29:30 -     computeCells (points.Length - 1) [pointsList |> List.map f; pointsList]
2018-09-09 20:29:30 - let NewtonPolynomial x = 
2018-09-09 20:29:30 -     let term k = 
2018-09-09 20:29:30 -         let getMultiply = if k > 0 then  Array.fold (fun acc i -> acc * (x - i)) 1. points.[.. k - 1] else 1.
2018-09-09 20:29:30 -         dividedDifferencesTable.[k + 1].[0] * getMultiply
2018-09-09 20:29:30 -     [|0 .. points.Length - 1|] |> Array.sumBy (fun k -> term k)
2018-09-09 20:29:30 - let plotNewton () =
2018-09-09 20:29:30 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 20:29:30 -     let trace1 =
2018-09-09 20:29:30 -         let y = x |> List.map f
2018-09-09 20:29:30 -         Scatter(
2018-09-09 20:29:30 -             x = x,
2018-09-09 20:29:30 -             y = y,
2018-09-09 20:29:30 -             name = "Исходная функция"
2018-09-09 20:29:30 -         )
2018-09-09 20:29:30 -     let trace2 =
2018-09-09 20:29:30 -         let y = x |> List.map NewtonPolynomial
2018-09-09 20:29:30 -         Scatter(
2018-09-09 20:29:30 -             x = x,
2018-09-09 20:29:30 -             y = y,
2018-09-09 20:29:30 -             name = "Полином Ньютона"
2018-09-09 20:29:30 -         )
2018-09-09 20:29:30 -     [trace1; trace2]
2018-09-09 20:29:30 -     |> Chart.Plot
2018-09-09 20:29:30 -     |> Chart.WithWidth 1000
2018-09-09 20:29:30 -     |> Chart.WithHeight 700
2018-09-09 20:29:30 - plotNewton()
2018-09-09 20:29:30 - let plotError () =
2018-09-09 20:29:30 -     let x = [-5. .. 0.1 .. 2.]
2018-09-09 20:29:30 -     let trace1 =
2018-09-09 20:29:30 -         let error = List.map (fun i -> abs (f i - NewtonPolynomial i)) x
2018-09-09 20:29:30 -         Scatter(
2018-09-09 20:29:30 -             x = x,
2018-09-09 20:29:30 -             y = error,
2018-09-09 20:29:30 -             name = "Абсолютная погрешность"
2018-09-09 20:29:30 -         )
2018-09-09 20:29:30 -     trace1
2018-09-09 20:29:30 -     |> Chart.Plot
2018-09-09 20:29:30 -     |> Chart.WithWidth 1000
2018-09-09 20:29:30 -     |> Chart.WithHeight 700
2018-09-09 20:29:30 - plotError()
2018-09-09 20:51:28 - #load "XPlot.Plotly.Paket.fsx"
2018-09-09 20:51:28 - #load "XPlot.Plotly.fsx"
2018-09-09 20:51:28 - open XPlot.Plotly
2018-09-09 20:51:28 - open System
2018-09-09 20:51:30 - let N = 5.
2018-09-09 20:51:30 - let f (x : float) = 
2018-09-09 20:51:30 -         x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-09 20:51:30 - let x0 = - (N % 3.)
2018-09-09 20:51:30 - let points = [|x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5|]
2018-09-09 20:51:30 - let l k x = 
2018-09-09 20:51:30 -     points |> Array.where (fun i -> i <> k) |> Array.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-09 20:51:30 - let LagrangePolynomial x = Array.sumBy (fun k -> l k x * f k) points
2018-09-09 20:51:30 - let plotLagrange () =
2018-09-09 20:51:30 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 20:51:30 -     let trace1 =
2018-09-09 20:51:30 -         let y = x |> List.map f
2018-09-09 20:51:30 -         Scatter(
2018-09-09 20:51:30 -             x = x,
2018-09-09 20:51:30 -             y = y,
2018-09-09 20:51:30 -             name = "Исходная функция"
2018-09-09 20:51:30 -         )
2018-09-09 20:51:30 -     let trace2 =
2018-09-09 20:51:30 -         let y = x |> List.map LagrangePolynomial
2018-09-09 20:51:30 -         Scatter(
2018-09-09 20:51:30 -             x = x,
2018-09-09 20:51:30 -             y = y,
2018-09-09 20:51:30 -             name = "Полином Лагранжа"
2018-09-09 20:51:30 -         )
2018-09-09 20:51:30 -     [trace1; trace2]
2018-09-09 20:51:30 -     |> Chart.Plot
2018-09-09 20:51:30 -     |> Chart.WithWidth 1000
2018-09-09 20:51:30 -     |> Chart.WithHeight 700
2018-09-09 20:51:30 - plotLagrange()
2018-09-09 20:51:30 - let (|FirstMiddleLast|_|) (x : 'a[]) = if x.Length > 2 then Some(x.[0], x.[1..x.Length - 2], Array.last x) else None
2018-09-09 20:51:30 - let dividedDifferencesTable = 
2018-09-09 20:51:30 -     let rec computeCells y acc = 
2018-09-09 20:51:30 -         let computeCol n (prevCol : float list) =
2018-09-09 20:51:30 -             let rec computeColInternal x acc =
2018-09-09 20:51:30 -                 match x with
2018-09-09 20:51:30 -                 | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-09 20:51:30 -                 | _ -> List.rev acc
2018-09-09 20:51:30 -             computeColInternal (points.Length - n) [] 
2018-09-09 20:51:30 -         match y with
2018-09-09 20:51:30 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-09 20:51:30 -         |_ -> List.rev acc
2018-09-09 20:51:30 -     let pointsList = points |> Array.toList
2018-09-09 20:51:30 -     computeCells (points.Length - 1) [pointsList |> List.map f; pointsList]
2018-09-09 20:51:30 - let NewtonPolynomial x = 
2018-09-09 20:51:30 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-09 20:51:30 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-09 20:51:30 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-09 20:51:30 - let plotNewton () =
2018-09-09 20:51:30 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 20:51:30 -     let trace1 =
2018-09-09 20:51:30 -         let y = x |> List.map f
2018-09-09 20:51:30 -         Scatter(
2018-09-09 20:51:30 -             x = x,
2018-09-09 20:51:30 -             y = y,
2018-09-09 20:51:30 -             name = "Исходная функция"
2018-09-09 20:51:30 -         )
2018-09-09 20:51:30 -     let trace2 =
2018-09-09 20:51:30 -         let y = x |> List.map NewtonPolynomial
2018-09-09 20:51:30 -         Scatter(
2018-09-09 20:51:30 -             x = x,
2018-09-09 20:51:30 -             y = y,
2018-09-09 20:51:30 -             name = "Полином Ньютона"
2018-09-09 20:51:30 -         )
2018-09-09 20:51:30 -     [trace1; trace2]
2018-09-09 20:51:30 -     |> Chart.Plot
2018-09-09 20:51:30 -     |> Chart.WithWidth 1000
2018-09-09 20:51:30 -     |> Chart.WithHeight 700
2018-09-09 20:51:30 - plotNewton()
2018-09-09 20:51:30 - let plotError () =
2018-09-09 20:51:30 -     let x = [-5. .. 0.1 .. 2.]
2018-09-09 20:51:30 -     let trace1 =
2018-09-09 20:51:30 -         let error = List.map (fun i -> abs (f i - NewtonPolynomial i)) x
2018-09-09 20:51:30 -         Scatter(
2018-09-09 20:51:30 -             x = x,
2018-09-09 20:51:30 -             y = error,
2018-09-09 20:51:30 -             name = "Абсолютная погрешность"
2018-09-09 20:51:30 -         )
2018-09-09 20:51:30 -     trace1
2018-09-09 20:51:30 -     |> Chart.Plot
2018-09-09 20:51:30 -     |> Chart.WithWidth 1000
2018-09-09 20:51:30 -     |> Chart.WithHeight 700
2018-09-09 20:51:30 - plotError()
2018-09-09 20:52:29 - #load "XPlot.Plotly.Paket.fsx"
2018-09-09 20:52:29 - #load "XPlot.Plotly.fsx"
2018-09-09 20:52:29 - open XPlot.Plotly
2018-09-09 20:52:29 - open System
2018-09-09 20:52:30 - let N = 5.
2018-09-09 20:52:30 - let f (x : float) = 
2018-09-09 20:52:30 -         x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-09 20:52:30 - let x0 = - (N % 3.)
2018-09-09 20:52:30 - let points = [|x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5|]
2018-09-09 20:52:30 - let l k x = 
2018-09-09 20:52:30 -     points |> Array.where (fun i -> i <> k) |> Array.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-09 20:52:30 - let LagrangePolynomial x = Array.sumBy (fun k -> l k x * f k) points
2018-09-09 20:52:30 - let plotLagrange () =
2018-09-09 20:52:30 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 20:52:30 -     let trace1 =
2018-09-09 20:52:30 -         let y = x |> List.map f
2018-09-09 20:52:30 -         Scatter(
2018-09-09 20:52:30 -             x = x,
2018-09-09 20:52:30 -             y = y,
2018-09-09 20:52:30 -             name = "Исходная функция"
2018-09-09 20:52:30 -         )
2018-09-09 20:52:30 -     let trace2 =
2018-09-09 20:52:30 -         let y = x |> List.map LagrangePolynomial
2018-09-09 20:52:30 -         Scatter(
2018-09-09 20:52:30 -             x = x,
2018-09-09 20:52:30 -             y = y,
2018-09-09 20:52:30 -             name = "Полином Лагранжа"
2018-09-09 20:52:30 -         )
2018-09-09 20:52:30 -     [trace1; trace2]
2018-09-09 20:52:30 -     |> Chart.Plot
2018-09-09 20:52:30 -     |> Chart.WithWidth 1000
2018-09-09 20:52:30 -     |> Chart.WithHeight 700
2018-09-09 20:52:30 - plotLagrange()
2018-09-09 20:52:30 - let (|FirstMiddleLast|_|) (x : 'a[]) = if x.Length > 2 then Some(x.[0], x.[1..x.Length - 2], Array.last x) else None
2018-09-09 20:52:30 - let dividedDifferencesTable = 
2018-09-09 20:52:30 -     let rec computeCells y acc = 
2018-09-09 20:52:30 -         let computeCol n (prevCol : float list) =
2018-09-09 20:52:30 -             let rec computeColInternal x acc =
2018-09-09 20:52:30 -                 match x with
2018-09-09 20:52:30 -                 | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-09 20:52:30 -                 | _ -> List.rev acc
2018-09-09 20:52:30 -             computeColInternal (points.Length - n) [] 
2018-09-09 20:52:30 -         match y with
2018-09-09 20:52:30 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-09 20:52:30 -         |_ -> List.rev acc
2018-09-09 20:52:30 -     let pointsList = points |> Array.toList
2018-09-09 20:52:30 -     computeCells (points.Length - 1) [pointsList |> List.map f; pointsList]
2018-09-09 20:52:30 - let NewtonPolynomial x = 
2018-09-09 20:52:30 -     let term k = 
2018-09-09 20:52:30 -         let getMultiply = if k > 0 then  Array.fold (fun acc i -> acc * (x - i)) 1. points.[.. k - 1] else 1.
2018-09-09 20:52:30 -         dividedDifferencesTable.[k + 1].[0] * getMultiply
2018-09-09 20:52:30 -     [|0 .. points.Length - 1|] |> Array.sumBy (fun k -> term k)
2018-09-09 20:52:30 - let plotNewton () =
2018-09-09 20:52:30 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 20:52:30 -     let trace1 =
2018-09-09 20:52:30 -         let y = x |> List.map f
2018-09-09 20:52:30 -         Scatter(
2018-09-09 20:52:30 -             x = x,
2018-09-09 20:52:30 -             y = y,
2018-09-09 20:52:30 -             name = "Исходная функция"
2018-09-09 20:52:30 -         )
2018-09-09 20:52:30 -     let trace2 =
2018-09-09 20:52:30 -         let y = x |> List.map NewtonPolynomial
2018-09-09 20:52:30 -         Scatter(
2018-09-09 20:52:30 -             x = x,
2018-09-09 20:52:30 -             y = y,
2018-09-09 20:52:30 -             name = "Полином Ньютона"
2018-09-09 20:52:30 -         )
2018-09-09 20:52:30 -     [trace1; trace2]
2018-09-09 20:52:30 -     |> Chart.Plot
2018-09-09 20:52:30 -     |> Chart.WithWidth 1000
2018-09-09 20:52:30 -     |> Chart.WithHeight 700
2018-09-09 20:52:30 - plotNewton()
2018-09-09 20:52:30 - let plotError () =
2018-09-09 20:52:30 -     let x = [-5. .. 0.1 .. 2.]
2018-09-09 20:52:30 -     let trace1 =
2018-09-09 20:52:30 -         let error = List.map (fun i -> abs (f i - NewtonPolynomial i)) x
2018-09-09 20:52:30 -         Scatter(
2018-09-09 20:52:30 -             x = x,
2018-09-09 20:52:30 -             y = error,
2018-09-09 20:52:30 -             name = "Абсолютная погрешность"
2018-09-09 20:52:30 -         )
2018-09-09 20:52:30 -     trace1
2018-09-09 20:52:30 -     |> Chart.Plot
2018-09-09 20:52:30 -     |> Chart.WithWidth 1000
2018-09-09 20:52:30 -     |> Chart.WithHeight 700
2018-09-09 20:52:30 - plotError()
2018-09-09 21:10:48 - #load "XPlot.Plotly.Paket.fsx"
2018-09-09 21:10:48 - #load "XPlot.Plotly.fsx"
2018-09-09 21:10:48 - open XPlot.Plotly
2018-09-09 21:10:48 - open System
2018-09-09 21:10:49 - let N = 5.
2018-09-09 21:10:49 - let f (x : float) = 
2018-09-09 21:10:49 -         x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-09 21:10:50 - let x0 = - (N % 3.)
2018-09-09 21:10:50 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-09 21:10:50 - let l k x = 
2018-09-09 21:10:50 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-09 21:10:50 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-09 21:10:50 - let plotLagrange () =
2018-09-09 21:10:50 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 21:10:50 -     let trace1 =
2018-09-09 21:10:50 -         let y = x |> List.map f
2018-09-09 21:10:50 -         Scatter(
2018-09-09 21:10:50 -             x = x,
2018-09-09 21:10:50 -             y = y,
2018-09-09 21:10:50 -             name = "Исходная функция"
2018-09-09 21:10:50 -         )
2018-09-09 21:10:50 -     let trace2 =
2018-09-09 21:10:50 -         let y = x |> List.map LagrangePolynomial
2018-09-09 21:10:50 -         Scatter(
2018-09-09 21:10:50 -             x = x,
2018-09-09 21:10:50 -             y = y,
2018-09-09 21:10:50 -             name = "Полином Лагранжа"
2018-09-09 21:10:50 -         )
2018-09-09 21:10:50 -     [trace1; trace2]
2018-09-09 21:10:50 -     |> Chart.Plot
2018-09-09 21:10:50 -     |> Chart.WithWidth 1000
2018-09-09 21:10:50 -     |> Chart.WithHeight 700
2018-09-09 21:10:50 - plotLagrange()
2018-09-09 21:10:50 - let dividedDifferencesTable = 
2018-09-09 21:10:50 -     let rec computeCells y acc = 
2018-09-09 21:10:50 -         let computeCol n (prevCol : float list) =
2018-09-09 21:10:50 -             let rec computeColInternal x acc =
2018-09-09 21:10:50 -                 match x with
2018-09-09 21:10:50 -                 | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-09 21:10:50 -                 | _ -> acc
2018-09-09 21:10:50 -             computeColInternal (points.Length - n) [] 
2018-09-09 21:10:50 -         match y with
2018-09-09 21:10:50 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-09 21:10:50 -         |_ -> List.rev acc
2018-09-09 21:10:50 -     computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-09 21:10:50 - let NewtonPolynomial x = 
2018-09-09 21:10:50 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-09 21:10:50 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-09 21:10:50 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-09 21:10:50 - let plotNewton () =
2018-09-09 21:10:50 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 21:10:50 -     let trace1 =
2018-09-09 21:10:50 -         let y = x |> List.map f
2018-09-09 21:10:50 -         Scatter(
2018-09-09 21:10:50 -             x = x,
2018-09-09 21:10:50 -             y = y,
2018-09-09 21:10:50 -             name = "Исходная функция"
2018-09-09 21:10:50 -         )
2018-09-09 21:10:50 -     let trace2 =
2018-09-09 21:10:50 -         let y = x |> List.map NewtonPolynomial
2018-09-09 21:10:50 -         Scatter(
2018-09-09 21:10:50 -             x = x,
2018-09-09 21:10:50 -             y = y,
2018-09-09 21:10:50 -             name = "Полином Ньютона"
2018-09-09 21:10:50 -         )
2018-09-09 21:10:50 -     [trace1; trace2]
2018-09-09 21:10:50 -     |> Chart.Plot
2018-09-09 21:10:50 -     |> Chart.WithWidth 1000
2018-09-09 21:10:50 -     |> Chart.WithHeight 700
2018-09-09 21:10:50 - plotNewton()
2018-09-09 21:10:50 - let plotError () =
2018-09-09 21:10:50 -     let x = [-5. .. 0.1 .. 2.]
2018-09-09 21:10:50 -     let trace1 =
2018-09-09 21:10:50 -         let error = List.map (fun i -> abs (f i - NewtonPolynomial i)) x
2018-09-09 21:10:50 -         Scatter(
2018-09-09 21:10:50 -             x = x,
2018-09-09 21:10:50 -             y = error,
2018-09-09 21:10:50 -             name = "Абсолютная погрешность"
2018-09-09 21:10:50 -         )
2018-09-09 21:10:50 -     trace1
2018-09-09 21:10:50 -     |> Chart.Plot
2018-09-09 21:10:50 -     |> Chart.WithWidth 1000
2018-09-09 21:10:50 -     |> Chart.WithHeight 700
2018-09-09 21:10:50 - plotError()
2018-09-09 21:15:45 - let plotError () =
2018-09-09 21:15:45 -     let x = [-5. .. 0.1 .. 2.]
2018-09-09 21:15:45 -     let trace1 =
2018-09-09 21:15:45 -         let error = List.map (fun i -> abs (f i - NewtonPolynomial i)) x
2018-09-09 21:15:45 -         Scatter(
2018-09-09 21:15:45 -             x = x,
2018-09-09 21:15:45 -             y = error,
2018-09-09 21:15:45 -             name = "Абсолютная погрешность"
2018-09-09 21:15:45 -         )
2018-09-09 21:15:45 -     let layout = 
2018-09-09 21:15:45 -         Layout(
2018-09-09 21:15:45 -             title = "График абсолютной погрешности"
2018-09-09 21:15:45 -         )
2018-09-09 21:15:45 -     trace1
2018-09-09 21:15:45 -     |> Chart.Plot
2018-09-09 21:15:45 -     |> Chart.WithWidth 1000
2018-09-09 21:15:45 -     |> Chart.WithHeight 700
2018-09-09 21:15:45 - plotError()
2018-09-09 21:16:19 - let plotError () =
2018-09-09 21:16:19 -     let x = [-5. .. 0.1 .. 2.]
2018-09-09 21:16:19 -     let trace1 =
2018-09-09 21:16:19 -         let error = List.map (fun i -> abs (f i - NewtonPolynomial i)) x
2018-09-09 21:16:19 -         Scatter(
2018-09-09 21:16:19 -             x = x,
2018-09-09 21:16:19 -             y = error,
2018-09-09 21:16:19 -             name = "Абсолютная погрешность"
2018-09-09 21:16:19 -         )
2018-09-09 21:16:19 -     trace1
2018-09-09 21:16:19 -     |> Chart.Plot
2018-09-09 21:16:19 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-09 21:16:19 -     |> Chart.WithWidth 1000
2018-09-09 21:16:19 -     |> Chart.WithHeight 700
2018-09-09 21:16:19 - plotError()
2018-09-09 21:28:21 - let ChebX = [0. .. 4.] |> List.map (fun k -> cos ((2. * k + 1.) * Math.PI / (2 * n)))
2018-09-09 21:28:21 - The value or constructor 'n' is not defined. Maybe you want one of the following:
2018-09-09 21:28:21 -    N
2018-09-09 21:28:21 -    X
2018-09-09 21:28:21 -    Y
2018-09-09 21:28:21 -    Z
2018-09-09 21:28:21 -    f
2018-09-09 21:28:21 - The type 'float' does not match the type 'int'
2018-09-09 21:30:10 - let c = -5.
2018-09-09 21:30:10 - let d = 2.
2018-09-09 21:30:10 - let n = 4.
2018-09-09 21:30:10 - let ChebX = [0. .. 4.] |> List.map (fun k -> cos ((2. * k + 1.) * Math.PI / (2. * n + 2.)))
2018-09-09 21:30:10 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2)
2018-09-09 21:30:10 - The type 'int' does not match the type 'float'
2018-09-09 21:30:10 - The type 'int' does not match the type 'float'
2018-09-09 21:30:16 - let c = -5.
2018-09-09 21:30:16 - let d = 2.
2018-09-09 21:30:16 - let n = 4.
2018-09-09 21:30:16 - let ChebX = [0. .. 4.] |> List.map (fun k -> cos ((2. * k + 1.) * Math.PI / (2. * n + 2.)))
2018-09-09 21:30:16 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-09 21:36:07 - #load "XPlot.Plotly.Paket.fsx"
2018-09-09 21:36:07 - #load "XPlot.Plotly.fsx"
2018-09-09 21:36:07 - open XPlot.Plotly
2018-09-09 21:36:07 - open System
2018-09-09 21:36:09 - let N = 5.
2018-09-09 21:36:09 - let f (x : float) = 
2018-09-09 21:36:09 -         x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-09 21:36:09 - let x0 = - (N % 3.)
2018-09-09 21:36:09 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-09 21:36:09 - let l k x = 
2018-09-09 21:36:09 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-09 21:36:09 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-09 21:36:09 - let plotLagrange () =
2018-09-09 21:36:09 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 21:36:09 -     let trace1 =
2018-09-09 21:36:09 -         let y = x |> List.map f
2018-09-09 21:36:09 -         Scatter(
2018-09-09 21:36:09 -             x = x,
2018-09-09 21:36:09 -             y = y,
2018-09-09 21:36:09 -             name = "Исходная функция"
2018-09-09 21:36:09 -         )
2018-09-09 21:36:09 -     let trace2 =
2018-09-09 21:36:09 -         let y = x |> List.map LagrangePolynomial
2018-09-09 21:36:09 -         Scatter(
2018-09-09 21:36:09 -             x = x,
2018-09-09 21:36:09 -             y = y,
2018-09-09 21:36:09 -             name = "Полином Лагранжа"
2018-09-09 21:36:09 -         )
2018-09-09 21:36:09 -     [trace1; trace2]
2018-09-09 21:36:09 -     |> Chart.Plot
2018-09-09 21:36:09 -     |> Chart.WithWidth 1000
2018-09-09 21:36:09 -     |> Chart.WithHeight 700
2018-09-09 21:36:09 - plotLagrange()
2018-09-09 21:36:09 - let dividedDifferencesTable = 
2018-09-09 21:36:09 -     let rec computeCells y acc = 
2018-09-09 21:36:09 -         let computeCol n (prevCol : float list) =
2018-09-09 21:36:09 -             let rec computeColInternal x acc =
2018-09-09 21:36:09 -                 match x with
2018-09-09 21:36:09 -                 | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-09 21:36:09 -                 | _ -> acc
2018-09-09 21:36:09 -             computeColInternal (points.Length - n) [] 
2018-09-09 21:36:09 -         match y with
2018-09-09 21:36:09 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-09 21:36:09 -         |_ -> List.rev acc
2018-09-09 21:36:09 -     computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-09 21:36:09 - let NewtonPolynomial (points : float list) x = 
2018-09-09 21:36:09 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-09 21:36:09 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-09 21:36:09 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-09 21:36:09 - let plotNewton () =
2018-09-09 21:36:09 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 21:36:09 -     let trace1 =
2018-09-09 21:36:09 -         let y = x |> List.map f
2018-09-09 21:36:09 -         Scatter(
2018-09-09 21:36:09 -             x = x,
2018-09-09 21:36:09 -             y = y,
2018-09-09 21:36:09 -             name = "Исходная функция"
2018-09-09 21:36:09 -         )
2018-09-09 21:36:09 -     let trace2 =
2018-09-09 21:36:09 -         let y = x |> List.map (NewtonPolynomial points)
2018-09-09 21:36:09 -         Scatter(
2018-09-09 21:36:09 -             x = x,
2018-09-09 21:36:09 -             y = y,
2018-09-09 21:36:09 -             name = "Полином Ньютона"
2018-09-09 21:36:09 -         )
2018-09-09 21:36:09 -     [trace1; trace2]
2018-09-09 21:36:09 -     |> Chart.Plot
2018-09-09 21:36:09 -     |> Chart.WithWidth 1000
2018-09-09 21:36:09 -     |> Chart.WithHeight 700
2018-09-09 21:36:09 - plotNewton()
2018-09-09 21:36:09 - let plotError () =
2018-09-09 21:36:09 -     let x = [-5. .. 0.1 .. 2.]
2018-09-09 21:36:09 -     let trace1 =
2018-09-09 21:36:09 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomial points i))) x
2018-09-09 21:36:09 -         Scatter(
2018-09-09 21:36:09 -             x = x,
2018-09-09 21:36:09 -             y = error
2018-09-09 21:36:09 -         )
2018-09-09 21:36:09 -     trace1
2018-09-09 21:36:09 -     |> Chart.Plot
2018-09-09 21:36:09 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-09 21:36:09 -     |> Chart.WithWidth 1000
2018-09-09 21:36:09 -     |> Chart.WithHeight 700
2018-09-09 21:36:09 - plotError()
2018-09-09 21:36:09 - let c = -5.
2018-09-09 21:36:09 - let d = 2.
2018-09-09 21:36:09 - let n = 4.
2018-09-09 21:36:09 - let ChebX = [0. .. 4.] |> List.map (fun k -> cos ((2. * k + 1.) * Math.PI / (2. * n + 2.)))
2018-09-09 21:36:09 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-09 21:36:09 - let plotNewtonCheb () =
2018-09-09 21:36:09 -     let x = [c. .. 0.1 .. d]
2018-09-09 21:36:09 -     let trace1 =
2018-09-09 21:36:09 -         let y = x |> List.map f
2018-09-09 21:36:09 -         Scatter(
2018-09-09 21:36:09 -             x = x,
2018-09-09 21:36:09 -             y = y,
2018-09-09 21:36:09 -             name = "Исходная функция"
2018-09-09 21:36:09 -         )
2018-09-09 21:36:09 -     let trace2 =
2018-09-09 21:36:09 -         let y = x |> List.map (NewtonPolynomial ChebT)
2018-09-09 21:36:09 -         Scatter(
2018-09-09 21:36:09 -             x = x,
2018-09-09 21:36:09 -             y = y,
2018-09-09 21:36:09 -             name = "Полином Ньютона на Чебышевских корнях"
2018-09-09 21:36:09 -         )
2018-09-09 21:36:09 -     [trace1; trace2]
2018-09-09 21:36:09 -     |> Chart.Plot
2018-09-09 21:36:09 -     |> Chart.WithWidth 1000
2018-09-09 21:36:09 -     |> Chart.WithHeight 700
2018-09-09 21:36:09 - plotNewtonCheb()
2018-09-09 21:36:09 - Missing qualification after '.'
2018-09-09 21:36:09 - let plotErrorCheb () =
2018-09-09 21:36:09 -     let x = [c. .. 0.1 .. d]
2018-09-09 21:36:09 -     let trace1 =
2018-09-09 21:36:09 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomial ChebT i))) x
2018-09-09 21:36:09 -         Scatter(
2018-09-09 21:36:09 -             x = x,
2018-09-09 21:36:09 -             y = error
2018-09-09 21:36:09 -         )
2018-09-09 21:36:09 -     trace1
2018-09-09 21:36:09 -     |> Chart.Plot
2018-09-09 21:36:09 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевском полиноме"
2018-09-09 21:36:09 -     |> Chart.WithWidth 1000
2018-09-09 21:36:09 -     |> Chart.WithHeight 700
2018-09-09 21:36:09 - plotErrorCheb()
2018-09-09 21:36:09 - Missing qualification after '.'
2018-09-09 21:36:56 - let plotNewtonCheb () =
2018-09-09 21:36:56 -     let x = [c .. 0.1 .. d]
2018-09-09 21:36:56 -     let trace1 =
2018-09-09 21:36:56 -         let y = x |> List.map f
2018-09-09 21:36:56 -         Scatter(
2018-09-09 21:36:56 -             x = x,
2018-09-09 21:36:56 -             y = y,
2018-09-09 21:36:56 -             name = "Исходная функция"
2018-09-09 21:36:56 -         )
2018-09-09 21:36:56 -     let trace2 =
2018-09-09 21:36:56 -         let y = x |> List.map (NewtonPolynomial ChebT)
2018-09-09 21:36:56 -         Scatter(
2018-09-09 21:36:56 -             x = x,
2018-09-09 21:36:56 -             y = y,
2018-09-09 21:36:56 -             name = "Полином Ньютона на Чебышевских корнях"
2018-09-09 21:36:56 -         )
2018-09-09 21:36:56 -     [trace1; trace2]
2018-09-09 21:36:56 -     |> Chart.Plot
2018-09-09 21:36:56 -     |> Chart.WithWidth 1000
2018-09-09 21:36:56 -     |> Chart.WithHeight 700
2018-09-09 21:36:56 - plotNewtonCheb()
2018-09-09 21:36:56 - let plotErrorCheb () =
2018-09-09 21:36:56 -     let x = [c .. 0.1 .. d]
2018-09-09 21:36:56 -     let trace1 =
2018-09-09 21:36:56 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomial ChebT i))) x
2018-09-09 21:36:56 -         Scatter(
2018-09-09 21:36:56 -             x = x,
2018-09-09 21:36:56 -             y = error
2018-09-09 21:36:56 -         )
2018-09-09 21:36:56 -     trace1
2018-09-09 21:36:56 -     |> Chart.Plot
2018-09-09 21:36:56 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевском полиноме"
2018-09-09 21:36:56 -     |> Chart.WithWidth 1000
2018-09-09 21:36:56 -     |> Chart.WithHeight 700
2018-09-09 21:36:56 - plotErrorCheb()
2018-09-09 21:45:20 - let c = -5.
2018-09-09 21:45:20 - let d = 2.
2018-09-09 21:45:20 - let n = 5.
2018-09-09 21:45:20 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-09 21:45:20 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-09 21:45:29 - let plotNewtonCheb () =
2018-09-09 21:45:29 -     let x = [c .. 0.1 .. d]
2018-09-09 21:45:29 -     let trace1 =
2018-09-09 21:45:29 -         let y = x |> List.map f
2018-09-09 21:45:29 -         Scatter(
2018-09-09 21:45:29 -             x = x,
2018-09-09 21:45:29 -             y = y,
2018-09-09 21:45:29 -             name = "Исходная функция"
2018-09-09 21:45:29 -         )
2018-09-09 21:45:29 -     let trace2 =
2018-09-09 21:45:29 -         let y = x |> List.map (NewtonPolynomial ChebT)
2018-09-09 21:45:29 -         Scatter(
2018-09-09 21:45:29 -             x = x,
2018-09-09 21:45:29 -             y = y,
2018-09-09 21:45:29 -             name = "Полином Ньютона на Чебышевских корнях"
2018-09-09 21:45:29 -         )
2018-09-09 21:45:29 -     [trace1; trace2]
2018-09-09 21:45:29 -     |> Chart.Plot
2018-09-09 21:45:29 -     |> Chart.WithWidth 1000
2018-09-09 21:45:29 -     |> Chart.WithHeight 700
2018-09-09 21:45:29 - plotNewtonCheb()
2018-09-09 21:45:40 - let plotErrorCheb () =
2018-09-09 21:45:40 -     let x = [c .. 0.1 .. d]
2018-09-09 21:45:40 -     let trace1 =
2018-09-09 21:45:40 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomial ChebT i))) x
2018-09-09 21:45:40 -         Scatter(
2018-09-09 21:45:40 -             x = x,
2018-09-09 21:45:40 -             y = error
2018-09-09 21:45:40 -         )
2018-09-09 21:45:40 -     trace1
2018-09-09 21:45:40 -     |> Chart.Plot
2018-09-09 21:45:40 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевском полиноме"
2018-09-09 21:45:40 -     |> Chart.WithWidth 1000
2018-09-09 21:45:40 -     |> Chart.WithHeight 700
2018-09-09 21:45:40 - plotErrorCheb()
2018-09-09 21:47:36 - let plotErrorCheb () =
2018-09-09 21:47:36 -     let x = [c .. 0.01 .. d]
2018-09-09 21:47:36 -     let trace1 =
2018-09-09 21:47:36 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomial ChebT i))) x
2018-09-09 21:47:36 -         Scatter(
2018-09-09 21:47:36 -             x = x,
2018-09-09 21:47:36 -             y = error
2018-09-09 21:47:36 -         )
2018-09-09 21:47:36 -     trace1
2018-09-09 21:47:36 -     |> Chart.Plot
2018-09-09 21:47:36 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских узлах"
2018-09-09 21:47:36 -     |> Chart.WithWidth 1000
2018-09-09 21:47:36 -     |> Chart.WithHeight 700
2018-09-09 21:47:36 - plotErrorCheb()
2018-09-09 21:48:18 - let c = -10.
2018-09-09 21:48:18 - let d = 10.
2018-09-09 21:48:18 - let n = 100.
2018-09-09 21:48:18 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-09 21:48:18 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-09 21:48:22 - let plotNewtonCheb () =
2018-09-09 21:48:22 -     let x = [c .. 0.1 .. d]
2018-09-09 21:48:22 -     let trace1 =
2018-09-09 21:48:22 -         let y = x |> List.map f
2018-09-09 21:48:22 -         Scatter(
2018-09-09 21:48:22 -             x = x,
2018-09-09 21:48:22 -             y = y,
2018-09-09 21:48:22 -             name = "Исходная функция"
2018-09-09 21:48:22 -         )
2018-09-09 21:48:22 -     let trace2 =
2018-09-09 21:48:22 -         let y = x |> List.map (NewtonPolynomial ChebT)
2018-09-09 21:48:22 -         Scatter(
2018-09-09 21:48:22 -             x = x,
2018-09-09 21:48:22 -             y = y,
2018-09-09 21:48:22 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-09 21:48:22 -         )
2018-09-09 21:48:22 -     [trace1; trace2]
2018-09-09 21:48:22 -     |> Chart.Plot
2018-09-09 21:48:22 -     |> Chart.WithWidth 1000
2018-09-09 21:48:22 -     |> Chart.WithHeight 700
2018-09-09 21:48:22 - plotNewtonCheb()
2018-09-09 21:48:22 - Expression evaluation failed: The index was outside the range of elements in the list.
2018-09-09 21:48:22 - Parameter name: n
2018-09-09 21:48:22 - ArgumentExceptionThe index was outside the range of elements in the list.
2018-09-09 21:48:22 - Parameter name: n
2018-09-09 21:48:22 -   at Microsoft.FSharp.Collections.PrivateListHelpers.nth[a] (Microsoft.FSharp.Collections.FSharpList`1[T] l, System.Int32 n) [0x0005f] in <5939249c904cf4daa74503839c243959>:0 
2018-09-09 21:48:22 -   at Microsoft.FSharp.Collections.FSharpList`1[T].get_Item (System.Int32 index) [0x00001] in <5939249c904cf4daa74503839c243959>:0 
2018-09-09 21:48:22 -   at FSI_0133.term@3-5 (Microsoft.FSharp.Collections.FSharpList`1[T] multiply, System.Int32 k) [0x00006] in <d35dfd6ccceb4788957a738057439700>:0 
2018-09-09 21:48:22 -   at FSI_0133.NewtonPolynomial (Microsoft.FSharp.Collections.FSharpList`1[T] points, System.Double x) [0x000db] in <d35dfd6ccceb4788957a738057439700>:0 
2018-09-09 21:48:22 -   at FSI_0153+y@11-29.Invoke (System.Double x) [0x00006] in <d35dfd6ccceb4788957a738057439700>:0 
2018-09-09 21:48:22 -   at Microsoft.FSharp.Primitives.Basics.List.map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] x) [0x0003f] in <5939249c904cf4daa74503839c243959>:0 
2018-09-09 21:48:22 -   at Microsoft.FSharp.Collections.ListModule.Map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x00001] in <5939249c904cf4daa74503839c243959>:0 
2018-09-09 21:48:22 -   at FSI_0153.plotNewtonCheb () [0x00082] in <d35dfd6ccceb4788957a738057439700>:0 
2018-09-09 21:48:22 -   at <StartupCode$FSI_0153>.$FSI_0153.main@ () [0x00001] in <d35dfd6ccceb4788957a738057439700>:0 
2018-09-09 21:48:22 -   at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-09-09 21:48:22 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <77c9551943624fd18301ba6f78a841e5>:0 
2018-09-09 21:49:57 - let plotNewtonCheb () =
2018-09-09 21:49:57 -     let x = [c .. 0.01 .. d]
2018-09-09 21:49:57 -     let trace1 =
2018-09-09 21:49:57 -         let y = x |> List.map f
2018-09-09 21:49:57 -         Scatter(
2018-09-09 21:49:57 -             x = x,
2018-09-09 21:49:57 -             y = y,
2018-09-09 21:49:57 -             name = "Исходная функция"
2018-09-09 21:49:57 -         )
2018-09-09 21:49:57 -     let trace2 =
2018-09-09 21:49:57 -         let y = x |> List.map (NewtonPolynomial ChebT)
2018-09-09 21:49:57 -         Scatter(
2018-09-09 21:49:57 -             x = x,
2018-09-09 21:49:57 -             y = y,
2018-09-09 21:49:57 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-09 21:49:57 -         )
2018-09-09 21:49:57 -     [trace1; trace2]
2018-09-09 21:49:57 -     |> Chart.Plot
2018-09-09 21:49:57 -     |> Chart.WithWidth 1000
2018-09-09 21:49:57 -     |> Chart.WithHeight 700
2018-09-09 21:49:57 - plotNewtonCheb()
2018-09-09 21:49:57 - Expression evaluation failed: The index was outside the range of elements in the list.
2018-09-09 21:49:57 - Parameter name: n
2018-09-09 21:49:57 - ArgumentExceptionThe index was outside the range of elements in the list.
2018-09-09 21:49:57 - Parameter name: n
2018-09-09 21:49:57 -   at Microsoft.FSharp.Collections.PrivateListHelpers.nth[a] (Microsoft.FSharp.Collections.FSharpList`1[T] l, System.Int32 n) [0x0005f] in <5939249c904cf4daa74503839c243959>:0 
2018-09-09 21:49:57 -   at Microsoft.FSharp.Collections.FSharpList`1[T].get_Item (System.Int32 index) [0x00001] in <5939249c904cf4daa74503839c243959>:0 
2018-09-09 21:49:57 -   at FSI_0133.term@3-5 (Microsoft.FSharp.Collections.FSharpList`1[T] multiply, System.Int32 k) [0x00006] in <d35dfd6ccceb4788957a738057439700>:0 
2018-09-09 21:49:57 -   at FSI_0133.NewtonPolynomial (Microsoft.FSharp.Collections.FSharpList`1[T] points, System.Double x) [0x000db] in <d35dfd6ccceb4788957a738057439700>:0 
2018-09-09 21:49:57 -   at FSI_0154+y@11-31.Invoke (System.Double x) [0x00006] in <d35dfd6ccceb4788957a738057439700>:0 
2018-09-09 21:49:57 -   at Microsoft.FSharp.Primitives.Basics.List.map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] x) [0x0003f] in <5939249c904cf4daa74503839c243959>:0 
2018-09-09 21:49:57 -   at Microsoft.FSharp.Collections.ListModule.Map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x00001] in <5939249c904cf4daa74503839c243959>:0 
2018-09-09 21:49:57 -   at FSI_0154.plotNewtonCheb () [0x00082] in <d35dfd6ccceb4788957a738057439700>:0 
2018-09-09 21:49:57 -   at <StartupCode$FSI_0154>.$FSI_0154.main@ () [0x00001] in <d35dfd6ccceb4788957a738057439700>:0 
2018-09-09 21:49:57 -   at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-09-09 21:49:57 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <77c9551943624fd18301ba6f78a841e5>:0 
2018-09-09 21:57:27 - #load "XPlot.Plotly.Paket.fsx"
2018-09-09 21:57:27 - #load "XPlot.Plotly.fsx"
2018-09-09 21:57:27 - open XPlot.Plotly
2018-09-09 21:57:27 - open System
2018-09-09 21:57:28 - let N = 5.
2018-09-09 21:57:28 - let f (x : float) = 
2018-09-09 21:57:28 -         x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-09 21:57:28 - let x0 = - (N % 3.)
2018-09-09 21:57:28 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-09 21:57:29 - let l k x = 
2018-09-09 21:57:29 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-09 21:57:29 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-09 21:57:29 - let plotLagrange () =
2018-09-09 21:57:29 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 21:57:29 -     let trace1 =
2018-09-09 21:57:29 -         let y = x |> List.map f
2018-09-09 21:57:29 -         Scatter(
2018-09-09 21:57:29 -             x = x,
2018-09-09 21:57:29 -             y = y,
2018-09-09 21:57:29 -             name = "Исходная функция"
2018-09-09 21:57:29 -         )
2018-09-09 21:57:29 -     let trace2 =
2018-09-09 21:57:29 -         let y = x |> List.map LagrangePolynomial
2018-09-09 21:57:29 -         Scatter(
2018-09-09 21:57:29 -             x = x,
2018-09-09 21:57:29 -             y = y,
2018-09-09 21:57:29 -             name = "Полином Лагранжа"
2018-09-09 21:57:29 -         )
2018-09-09 21:57:29 -     [trace1; trace2]
2018-09-09 21:57:29 -     |> Chart.Plot
2018-09-09 21:57:29 -     |> Chart.WithWidth 1000
2018-09-09 21:57:29 -     |> Chart.WithHeight 700
2018-09-09 21:57:29 - plotLagrange()
2018-09-09 21:57:29 - let NewtonPolynomial (points : float list) x = 
2018-09-09 21:57:29 -     let dividedDifferencesTable = 
2018-09-09 21:57:29 -         let rec computeCells y acc = 
2018-09-09 21:57:29 -             let computeCol n (prevCol : float list) =
2018-09-09 21:57:29 -                 let rec computeColInternal x acc =
2018-09-09 21:57:29 -                     match x with
2018-09-09 21:57:29 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-09 21:57:29 -                     | _ -> acc
2018-09-09 21:57:29 -                 computeColInternal (points.Length - n) [] 
2018-09-09 21:57:29 -             match y with
2018-09-09 21:57:29 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-09 21:57:29 -             |_ -> List.rev acc
2018-09-09 21:57:29 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-09 21:57:29 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-09 21:57:29 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-09 21:57:29 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-09 21:57:29 - let plotNewton () =
2018-09-09 21:57:29 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 21:57:29 -     let trace1 =
2018-09-09 21:57:29 -         let y = x |> List.map f
2018-09-09 21:57:29 -         Scatter(
2018-09-09 21:57:29 -             x = x,
2018-09-09 21:57:29 -             y = y,
2018-09-09 21:57:29 -             name = "Исходная функция"
2018-09-09 21:57:29 -         )
2018-09-09 21:57:29 -     let trace2 =
2018-09-09 21:57:29 -         let y = x |> List.map (NewtonPolynomial points)
2018-09-09 21:57:29 -         Scatter(
2018-09-09 21:57:29 -             x = x,
2018-09-09 21:57:29 -             y = y,
2018-09-09 21:57:29 -             name = "Полином Ньютона"
2018-09-09 21:57:29 -         )
2018-09-09 21:57:29 -     [trace1; trace2]
2018-09-09 21:57:29 -     |> Chart.Plot
2018-09-09 21:57:29 -     |> Chart.WithWidth 1000
2018-09-09 21:57:29 -     |> Chart.WithHeight 700
2018-09-09 21:57:29 - plotNewton()
2018-09-09 21:57:29 - let plotError () =
2018-09-09 21:57:29 -     let x = [-5. .. 0.1 .. 2.]
2018-09-09 21:57:29 -     let trace1 =
2018-09-09 21:57:29 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomial points i))) x
2018-09-09 21:57:29 -         Scatter(
2018-09-09 21:57:29 -             x = x,
2018-09-09 21:57:29 -             y = error
2018-09-09 21:57:29 -         )
2018-09-09 21:57:29 -     trace1
2018-09-09 21:57:29 -     |> Chart.Plot
2018-09-09 21:57:29 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-09 21:57:29 -     |> Chart.WithWidth 1000
2018-09-09 21:57:29 -     |> Chart.WithHeight 700
2018-09-09 21:57:29 - plotError()
2018-09-09 21:57:29 - let c = -10.
2018-09-09 21:57:29 - let d = 10.
2018-09-09 21:57:29 - let n = 100.
2018-09-09 21:57:29 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-09 21:57:29 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-09 21:57:29 - let plotNewtonCheb () =
2018-09-09 21:57:29 -     let x = [c .. 0.01 .. d]
2018-09-09 21:57:29 -     let trace1 =
2018-09-09 21:57:29 -         let y = x |> List.map f
2018-09-09 21:57:29 -         Scatter(
2018-09-09 21:57:29 -             x = x,
2018-09-09 21:57:29 -             y = y,
2018-09-09 21:57:29 -             name = "Исходная функция"
2018-09-09 21:57:29 -         )
2018-09-09 21:57:29 -     let trace2 =
2018-09-09 21:57:29 -         let y = x |> List.map (NewtonPolynomial ChebT)
2018-09-09 21:57:29 -         Scatter(
2018-09-09 21:57:29 -             x = x,
2018-09-09 21:57:29 -             y = y,
2018-09-09 21:57:29 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-09 21:57:29 -         )
2018-09-09 21:57:29 -     [trace1; trace2]
2018-09-09 21:57:29 -     |> Chart.Plot
2018-09-09 21:57:29 -     |> Chart.WithWidth 1000
2018-09-09 21:57:29 -     |> Chart.WithHeight 700
2018-09-09 21:57:29 - plotNewtonCheb()
2018-09-09 21:57:34 - let plotErrorCheb () =
2018-09-09 21:57:34 -     let x = [c .. 0.01 .. d]
2018-09-09 21:57:34 -     let trace1 =
2018-09-09 21:57:34 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomial ChebT i))) x
2018-09-09 21:57:34 -         Scatter(
2018-09-09 21:57:34 -             x = x,
2018-09-09 21:57:34 -             y = error
2018-09-09 21:57:34 -         )
2018-09-09 21:57:34 -     trace1
2018-09-09 21:57:34 -     |> Chart.Plot
2018-09-09 21:57:34 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских узлах"
2018-09-09 21:57:34 -     |> Chart.WithWidth 1000
2018-09-09 21:57:34 -     |> Chart.WithHeight 700
2018-09-09 21:57:34 - plotErrorCheb()
2018-09-09 22:29:49 - #load "XPlot.Plotly.Paket.fsx"
2018-09-09 22:29:49 - #load "XPlot.Plotly.fsx"
2018-09-09 22:29:49 - open XPlot.Plotly
2018-09-09 22:29:49 - open System
2018-09-09 22:29:50 - let N = 5.
2018-09-09 22:29:50 - let N = 5.
2018-09-09 22:29:50 - let f x = x * decimal (exp (float x * (N % 2. + 1.)) + sin (float x / 2. * (N % 7. + 1.)))
2018-09-09 22:29:50 - let x0 = - decimal (N % 3.)
2018-09-09 22:29:50 - let points = [x0; x0 + 0.1m; x0 + 0.3m; x0 + 0.45m; x0 + 0.5m]
2018-09-09 22:29:50 - let l k x = 
2018-09-09 22:29:50 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1m
2018-09-09 22:29:50 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-09 22:29:50 - let plotLagrange () =
2018-09-09 22:29:50 -     let x = [-2m .. 0.1m .. 2m]
2018-09-09 22:29:50 -     let trace1 =
2018-09-09 22:29:50 -         let y = x |> List.map f
2018-09-09 22:29:50 -         Scatter(
2018-09-09 22:29:50 -             x = x,
2018-09-09 22:29:50 -             y = y,
2018-09-09 22:29:50 -             name = "Исходная функция"
2018-09-09 22:29:50 -         )
2018-09-09 22:29:50 -     let trace2 =
2018-09-09 22:29:50 -         let y = x |> List.map LagrangePolynomial
2018-09-09 22:29:50 -         Scatter(
2018-09-09 22:29:50 -             x = x,
2018-09-09 22:29:50 -             y = y,
2018-09-09 22:29:50 -             name = "Полином Лагранжа"
2018-09-09 22:29:50 -         )
2018-09-09 22:29:50 -     [trace1; trace2]
2018-09-09 22:29:50 -     |> Chart.Plot
2018-09-09 22:29:50 -     |> Chart.WithWidth 1000
2018-09-09 22:29:50 -     |> Chart.WithHeight 700
2018-09-09 22:29:50 - plotLagrange()
2018-09-09 22:29:50 - let NewtonPolynomial (points : 'a list) x = 
2018-09-09 22:29:50 -     let dividedDifferencesTable = 
2018-09-09 22:29:50 -         let rec computeCells y acc = 
2018-09-09 22:29:50 -             let computeCol n (prevCol : 'a list) =
2018-09-09 22:29:50 -                 let rec computeColInternal x acc =
2018-09-09 22:29:50 -                     match x with
2018-09-09 22:29:50 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-09 22:29:50 -                     | _ -> acc
2018-09-09 22:29:50 -                 computeColInternal (points.Length - n) [] 
2018-09-09 22:29:50 -             match y with
2018-09-09 22:29:50 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-09 22:29:50 -             |_ -> List.rev acc
2018-09-09 22:29:50 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-09 22:29:50 -     let multiply = 1m :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1m |> fst)
2018-09-09 22:29:50 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-09 22:29:50 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-09 22:29:50 - This construct causes code to be less generic than indicated by the type annotations. The type variable 'a has been constrained to be type 'decimal'.
2018-09-09 22:29:50 - let plotNewton () =
2018-09-09 22:29:50 -     let x = [-2m .. 0.1m .. 2m]
2018-09-09 22:29:50 -     let trace1 =
2018-09-09 22:29:50 -         let y = x |> List.map f
2018-09-09 22:29:50 -         Scatter(
2018-09-09 22:29:50 -             x = x,
2018-09-09 22:29:50 -             y = y,
2018-09-09 22:29:50 -             name = "Исходная функция"
2018-09-09 22:29:50 -         )
2018-09-09 22:29:50 -     let trace2 =
2018-09-09 22:29:50 -         let y = x |> List.map (NewtonPolynomial points)
2018-09-09 22:29:50 -         Scatter(
2018-09-09 22:29:50 -             x = x,
2018-09-09 22:29:50 -             y = y,
2018-09-09 22:29:50 -             name = "Полином Ньютона"
2018-09-09 22:29:50 -         )
2018-09-09 22:29:50 -     [trace1; trace2]
2018-09-09 22:29:50 -     |> Chart.Plot
2018-09-09 22:29:50 -     |> Chart.WithWidth 1000
2018-09-09 22:29:50 -     |> Chart.WithHeight 700
2018-09-09 22:29:50 - plotNewton()
2018-09-09 22:29:50 - let plotError () =
2018-09-09 22:29:50 -     let x = [-5m .. 0.1m .. 2m]
2018-09-09 22:29:50 -     let trace1 =
2018-09-09 22:29:50 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomial points i))) x
2018-09-09 22:29:50 -         Scatter(
2018-09-09 22:29:50 -             x = x,
2018-09-09 22:29:50 -             y = error
2018-09-09 22:29:50 -         )
2018-09-09 22:29:50 -     trace1
2018-09-09 22:29:50 -     |> Chart.Plot
2018-09-09 22:29:50 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-09 22:29:50 -     |> Chart.WithWidth 1000
2018-09-09 22:29:50 -     |> Chart.WithHeight 700
2018-09-09 22:29:50 - plotError()
2018-09-09 22:29:50 - let c = -5m
2018-09-09 22:29:50 - let d = 5m
2018-09-09 22:29:50 - let n = 30.
2018-09-09 22:29:50 - let ChebX = [1. .. n] |> List.map (fun k -> decimal (cos ((2. * k - 1.) * Math.PI / (2. * n))))
2018-09-09 22:29:50 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2m * x + (d + c) / 2m)
2018-09-09 22:29:51 - let plotNewtonCheb () =
2018-09-09 22:29:51 -     let x = [c .. 0.01m .. d]
2018-09-09 22:29:51 -     let trace1 =
2018-09-09 22:29:51 -         let y = x |> List.map f
2018-09-09 22:29:51 -         Scatter(
2018-09-09 22:29:51 -             x = x,
2018-09-09 22:29:51 -             y = y,
2018-09-09 22:29:51 -             name = "Исходная функция"
2018-09-09 22:29:51 -         )
2018-09-09 22:29:51 -     let trace2 =
2018-09-09 22:29:51 -         let y = x |> List.map (NewtonPolynomial ChebT)
2018-09-09 22:29:51 -         Scatter(
2018-09-09 22:29:51 -             x = x,
2018-09-09 22:29:51 -             y = y,
2018-09-09 22:29:51 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-09 22:29:51 -         )
2018-09-09 22:29:51 -     [trace1; trace2]
2018-09-09 22:29:51 -     |> Chart.Plot
2018-09-09 22:29:51 -     |> Chart.WithWidth 1000
2018-09-09 22:29:51 -     |> Chart.WithHeight 700
2018-09-09 22:29:51 - plotNewtonCheb()
2018-09-09 22:29:51 - let plotErrorCheb () =
2018-09-09 22:29:51 -     let x = [c .. 0.01m .. d]
2018-09-09 22:29:51 -     let trace1 =
2018-09-09 22:29:51 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomial ChebT i))) x
2018-09-09 22:29:51 -         Scatter(
2018-09-09 22:29:51 -             x = x,
2018-09-09 22:29:51 -             y = error
2018-09-09 22:29:51 -         )
2018-09-09 22:29:51 -     trace1
2018-09-09 22:29:51 -     |> Chart.Plot
2018-09-09 22:29:51 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских узлах"
2018-09-09 22:29:51 -     |> Chart.WithWidth 1000
2018-09-09 22:29:51 -     |> Chart.WithHeight 700
2018-09-09 22:29:51 - plotErrorCheb()
2018-09-09 22:39:55 - #load "XPlot.Plotly.Paket.fsx"
2018-09-09 22:39:55 - #load "XPlot.Plotly.fsx"
2018-09-09 22:39:55 - open XPlot.Plotly
2018-09-09 22:39:55 - open System
2018-09-09 22:39:56 - let N = 5.
2018-09-09 22:39:56 - let f (x : float) = x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-09 22:39:57 - let x0 = - (N % 3.)
2018-09-09 22:39:57 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-09 22:39:57 - let l k x = 
2018-09-09 22:39:57 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-09 22:39:57 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-09 22:39:57 - let plotLagrange () =
2018-09-09 22:39:57 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 22:39:57 -     let trace1 =
2018-09-09 22:39:57 -         let y = x |> List.map f
2018-09-09 22:39:57 -         Scatter(
2018-09-09 22:39:57 -             x = x,
2018-09-09 22:39:57 -             y = y,
2018-09-09 22:39:57 -             name = "Исходная функция"
2018-09-09 22:39:57 -         )
2018-09-09 22:39:57 -     let trace2 =
2018-09-09 22:39:57 -         let y = x |> List.map LagrangePolynomial
2018-09-09 22:39:57 -         Scatter(
2018-09-09 22:39:57 -             x = x,
2018-09-09 22:39:57 -             y = y,
2018-09-09 22:39:57 -             name = "Полином Лагранжа"
2018-09-09 22:39:57 -         )
2018-09-09 22:39:57 -     [trace1; trace2]
2018-09-09 22:39:57 -     |> Chart.Plot
2018-09-09 22:39:57 -     |> Chart.WithWidth 1000
2018-09-09 22:39:57 -     |> Chart.WithHeight 700
2018-09-09 22:39:57 - plotLagrange()
2018-09-09 22:39:57 - let NewtonPolynomial (points : float list) x = 
2018-09-09 22:39:57 -     let dividedDifferencesTable = 
2018-09-09 22:39:57 -         let rec computeCells y acc = 
2018-09-09 22:39:57 -             let computeCol n (prevCol : float list) =
2018-09-09 22:39:57 -                 let rec computeColInternal x acc =
2018-09-09 22:39:57 -                     match x with
2018-09-09 22:39:57 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-09 22:39:57 -                     | _ -> acc
2018-09-09 22:39:57 -                 computeColInternal (points.Length - n) [] 
2018-09-09 22:39:57 -             match y with
2018-09-09 22:39:57 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-09 22:39:57 -             |_ -> List.rev acc
2018-09-09 22:39:57 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-09 22:39:57 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-09 22:39:57 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-09 22:39:57 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-09 22:39:57 - let plotNewton () =
2018-09-09 22:39:57 -     let x = [-2. .. 0.1 .. 2.]
2018-09-09 22:39:57 -     let trace1 =
2018-09-09 22:39:57 -         let y = x |> List.map f
2018-09-09 22:39:57 -         Scatter(
2018-09-09 22:39:57 -             x = x,
2018-09-09 22:39:57 -             y = y,
2018-09-09 22:39:57 -             name = "Исходная функция"
2018-09-09 22:39:57 -         )
2018-09-09 22:39:57 -     let trace2 =
2018-09-09 22:39:57 -         let y = x |> List.map (NewtonPolynomial points)
2018-09-09 22:39:57 -         Scatter(
2018-09-09 22:39:57 -             x = x,
2018-09-09 22:39:57 -             y = y,
2018-09-09 22:39:57 -             name = "Полином Ньютона"
2018-09-09 22:39:57 -         )
2018-09-09 22:39:57 -     [trace1; trace2]
2018-09-09 22:39:57 -     |> Chart.Plot
2018-09-09 22:39:57 -     |> Chart.WithWidth 1000
2018-09-09 22:39:57 -     |> Chart.WithHeight 700
2018-09-09 22:39:57 - plotNewton()
2018-09-09 22:39:57 - let plotError () =
2018-09-09 22:39:57 -     let x = [-5. .. 0.1 .. 2.]
2018-09-09 22:39:57 -     let trace1 =
2018-09-09 22:39:57 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomial points i))) x
2018-09-09 22:39:57 -         Scatter(
2018-09-09 22:39:57 -             x = x,
2018-09-09 22:39:57 -             y = error
2018-09-09 22:39:57 -         )
2018-09-09 22:39:57 -     trace1
2018-09-09 22:39:57 -     |> Chart.Plot
2018-09-09 22:39:57 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-09 22:39:57 -     |> Chart.WithWidth 1000
2018-09-09 22:39:57 -     |> Chart.WithHeight 700
2018-09-09 22:39:57 - plotError()
2018-09-09 22:39:57 - let c = -5.
2018-09-09 22:39:57 - let d = 5.
2018-09-09 22:39:57 - let n = 30.
2018-09-09 22:39:57 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-09 22:39:57 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-09 22:39:57 - let plotNewtonCheb () =
2018-09-09 22:39:57 -     let x = [c .. 0.01 .. d]
2018-09-09 22:39:57 -     let trace1 =
2018-09-09 22:39:57 -         let y = x |> List.map f
2018-09-09 22:39:57 -         Scatter(
2018-09-09 22:39:57 -             x = x,
2018-09-09 22:39:57 -             y = y,
2018-09-09 22:39:57 -             name = "Исходная функция"
2018-09-09 22:39:57 -         )
2018-09-09 22:39:57 -     let trace2 =
2018-09-09 22:39:57 -         let y = x |> List.map (NewtonPolynomial ChebT)
2018-09-09 22:39:57 -         Scatter(
2018-09-09 22:39:57 -             x = x,
2018-09-09 22:39:57 -             y = y,
2018-09-09 22:39:57 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-09 22:39:57 -         )
2018-09-09 22:39:57 -     [trace1; trace2]
2018-09-09 22:39:57 -     |> Chart.Plot
2018-09-09 22:39:57 -     |> Chart.WithWidth 1000
2018-09-09 22:39:57 -     |> Chart.WithHeight 700
2018-09-09 22:39:57 - plotNewtonCheb()
2018-09-09 22:39:57 - let plotErrorCheb () =
2018-09-09 22:39:57 -     let x = [c .. 0.01 .. d]
2018-09-09 22:39:57 -     let trace1 =
2018-09-09 22:39:57 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomial ChebT i))) x
2018-09-09 22:39:57 -         Scatter(
2018-09-09 22:39:57 -             x = x,
2018-09-09 22:39:57 -             y = error
2018-09-09 22:39:57 -         )
2018-09-09 22:39:57 -     trace1
2018-09-09 22:39:57 -     |> Chart.Plot
2018-09-09 22:39:57 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских узлах"
2018-09-09 22:39:57 -     |> Chart.WithWidth 1000
2018-09-09 22:39:57 -     |> Chart.WithHeight 700
2018-09-09 22:39:57 - plotErrorCheb()
2018-09-09 22:42:47 - #load "XPlot.Plotly.Paket.fsx"
2018-09-09 22:42:47 - #load "XPlot.Plotly.fsx"
2018-09-09 22:42:47 - open XPlot.Plotly
2018-09-09 22:42:47 - open System
2018-09-09 22:42:49 - let N = 5.
2018-09-09 22:42:49 - let f (x : float) = x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-09 22:42:49 - let x0 = - (N % 3.)
2018-09-09 22:42:49 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-09 22:42:49 - let l k x = 
2018-09-09 22:42:49 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-09 22:42:49 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-09 22:42:49 - let plotLagrange () =
2018-09-09 22:42:49 -     let x = [-2. .. 0.01 .. 2.]
2018-09-09 22:42:49 -     let trace1 =
2018-09-09 22:42:49 -         let y = x |> List.map f
2018-09-09 22:42:49 -         Scatter(
2018-09-09 22:42:49 -             x = x,
2018-09-09 22:42:49 -             y = y,
2018-09-09 22:42:49 -             name = "Исходная функция"
2018-09-09 22:42:49 -         )
2018-09-09 22:42:49 -     let trace2 =
2018-09-09 22:42:49 -         let y = x |> List.map LagrangePolynomial
2018-09-09 22:42:49 -         Scatter(
2018-09-09 22:42:49 -             x = x,
2018-09-09 22:42:49 -             y = y,
2018-09-09 22:42:49 -             name = "Полином Лагранжа"
2018-09-09 22:42:49 -         )
2018-09-09 22:42:49 -     [trace1; trace2]
2018-09-09 22:42:49 -     |> Chart.Plot
2018-09-09 22:42:49 -     |> Chart.WithWidth 1000
2018-09-09 22:42:49 -     |> Chart.WithHeight 700
2018-09-09 22:42:49 - plotLagrange()
2018-09-09 22:42:49 - let NewtonPolynomial (points : float list) x = 
2018-09-09 22:42:49 -     let dividedDifferencesTable = 
2018-09-09 22:42:49 -         let rec computeCells y acc = 
2018-09-09 22:42:49 -             let computeCol n (prevCol : float list) =
2018-09-09 22:42:49 -                 let rec computeColInternal x acc =
2018-09-09 22:42:49 -                     match x with
2018-09-09 22:42:49 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-09 22:42:49 -                     | _ -> acc
2018-09-09 22:42:49 -                 computeColInternal (points.Length - n) [] 
2018-09-09 22:42:49 -             match y with
2018-09-09 22:42:49 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-09 22:42:49 -             |_ -> List.rev acc
2018-09-09 22:42:49 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-09 22:42:49 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-09 22:42:49 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-09 22:42:49 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-09 22:42:49 - let plotNewton () =
2018-09-09 22:42:49 -     let x = [-2. .. 0.01 .. 2.]
2018-09-09 22:42:49 -     let trace1 =
2018-09-09 22:42:49 -         let y = x |> List.map f
2018-09-09 22:42:49 -         Scatter(
2018-09-09 22:42:49 -             x = x,
2018-09-09 22:42:49 -             y = y,
2018-09-09 22:42:49 -             name = "Исходная функция"
2018-09-09 22:42:49 -         )
2018-09-09 22:42:49 -     let trace2 =
2018-09-09 22:42:49 -         let y = x |> List.map (NewtonPolynomial points)
2018-09-09 22:42:49 -         Scatter(
2018-09-09 22:42:49 -             x = x,
2018-09-09 22:42:49 -             y = y,
2018-09-09 22:42:49 -             name = "Полином Ньютона"
2018-09-09 22:42:49 -         )
2018-09-09 22:42:49 -     [trace1; trace2]
2018-09-09 22:42:49 -     |> Chart.Plot
2018-09-09 22:42:49 -     |> Chart.WithWidth 1000
2018-09-09 22:42:49 -     |> Chart.WithHeight 700
2018-09-09 22:42:49 - plotNewton()
2018-09-09 22:42:49 - let plotError () =
2018-09-09 22:42:49 -     let x = [-2. .. 0.01 .. 2.]
2018-09-09 22:42:49 -     let trace1 =
2018-09-09 22:42:49 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomial points i))) x
2018-09-09 22:42:49 -         Scatter(
2018-09-09 22:42:49 -             x = x,
2018-09-09 22:42:49 -             y = error
2018-09-09 22:42:49 -         )
2018-09-09 22:42:49 -     trace1
2018-09-09 22:42:49 -     |> Chart.Plot
2018-09-09 22:42:49 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-09 22:42:49 -     |> Chart.WithWidth 1000
2018-09-09 22:42:49 -     |> Chart.WithHeight 700
2018-09-09 22:42:49 - plotError()
2018-09-09 22:42:50 - let c = -2.
2018-09-09 22:42:50 - let d = 2.
2018-09-09 22:42:50 - let n = 30.
2018-09-09 22:42:50 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-09 22:42:50 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-09 22:42:50 - let plotNewtonCheb () =
2018-09-09 22:42:50 -     let x = [c .. 0.01 .. d]
2018-09-09 22:42:50 -     let trace1 =
2018-09-09 22:42:50 -         let y = x |> List.map f
2018-09-09 22:42:50 -         Scatter(
2018-09-09 22:42:50 -             x = x,
2018-09-09 22:42:50 -             y = y,
2018-09-09 22:42:50 -             name = "Исходная функция"
2018-09-09 22:42:50 -         )
2018-09-09 22:42:50 -     let trace2 =
2018-09-09 22:42:50 -         let y = x |> List.map (NewtonPolynomial ChebT)
2018-09-09 22:42:50 -         Scatter(
2018-09-09 22:42:50 -             x = x,
2018-09-09 22:42:50 -             y = y,
2018-09-09 22:42:50 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-09 22:42:50 -         )
2018-09-09 22:42:50 -     [trace1; trace2]
2018-09-09 22:42:50 -     |> Chart.Plot
2018-09-09 22:42:50 -     |> Chart.WithWidth 1000
2018-09-09 22:42:50 -     |> Chart.WithHeight 700
2018-09-09 22:42:50 - plotNewtonCheb()
2018-09-09 22:42:50 - let plotErrorCheb () =
2018-09-09 22:42:50 -     let x = [c .. 0.01 .. d]
2018-09-09 22:42:50 -     let trace1 =
2018-09-09 22:42:50 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomial ChebT i))) x
2018-09-09 22:42:50 -         Scatter(
2018-09-09 22:42:50 -             x = x,
2018-09-09 22:42:50 -             y = error
2018-09-09 22:42:50 -         )
2018-09-09 22:42:50 -     trace1
2018-09-09 22:42:50 -     |> Chart.Plot
2018-09-09 22:42:50 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских узлах"
2018-09-09 22:42:50 -     |> Chart.WithWidth 1000
2018-09-09 22:42:50 -     |> Chart.WithHeight 700
2018-09-09 22:42:50 - plotErrorCheb()
2018-09-09 22:47:18 - let plotErrorCheb () =
2018-09-09 22:47:18 -     let x = [c .. 0.01 .. d]
2018-09-09 22:47:18 -     let trace1 =
2018-09-09 22:47:18 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomial ChebT i))) x
2018-09-09 22:47:18 -         Scatter(
2018-09-09 22:47:18 -             x = x,
2018-09-09 22:47:18 -             y = error
2018-09-09 22:47:18 -         )
2018-09-09 22:47:18 -     trace1
2018-09-09 22:47:18 -     |> Chart.Plot
2018-09-09 22:47:18 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских узлах"
2018-09-09 22:47:18 -     |> Chart.WithWidth 1200
2018-09-09 22:47:18 -     |> Chart.WithHeight 1000
2018-09-09 22:47:18 - plotErrorCheb()
2018-09-09 22:47:29 - let plotErrorCheb () =
2018-09-09 22:47:29 -     let x = [c .. 0.01 .. d]
2018-09-09 22:47:29 -     let trace1 =
2018-09-09 22:47:29 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomial ChebT i))) x
2018-09-09 22:47:29 -         Scatter(
2018-09-09 22:47:29 -             x = x,
2018-09-09 22:47:29 -             y = error
2018-09-09 22:47:29 -         )
2018-09-09 22:47:29 -     trace1
2018-09-09 22:47:29 -     |> Chart.Plot
2018-09-09 22:47:29 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских узлах"
2018-09-09 22:47:29 -     |> Chart.WithWidth 1000
2018-09-09 22:47:29 -     |> Chart.WithHeight 700
2018-09-09 22:47:29 - plotErrorCheb()
2018-09-09 22:50:07 - #load "XPlot.Plotly.Paket.fsx"
2018-09-09 22:50:07 - #load "XPlot.Plotly.fsx"
2018-09-09 22:50:07 - open XPlot.Plotly
2018-09-09 22:50:07 - open System
2018-09-09 22:50:08 - let N = 5.
2018-09-09 22:50:08 - let f (x : float) = x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-09 22:50:08 - let x0 = - (N % 3.)
2018-09-09 22:50:08 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-09 22:50:08 - let l k x = 
2018-09-09 22:50:08 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-09 22:50:08 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-09 22:50:08 - let plotLagrange () =
2018-09-09 22:50:08 -     let x = [-2. .. 0.01 .. 2.]
2018-09-09 22:50:08 -     let trace1 =
2018-09-09 22:50:08 -         let y = x |> List.map f
2018-09-09 22:50:08 -         Scatter(
2018-09-09 22:50:08 -             x = x,
2018-09-09 22:50:08 -             y = y,
2018-09-09 22:50:08 -             name = "Исходная функция"
2018-09-09 22:50:08 -         )
2018-09-09 22:50:08 -     let trace2 =
2018-09-09 22:50:08 -         let y = x |> List.map LagrangePolynomial
2018-09-09 22:50:08 -         Scatter(
2018-09-09 22:50:08 -             x = x,
2018-09-09 22:50:08 -             y = y,
2018-09-09 22:50:08 -             name = "Полином Лагранжа"
2018-09-09 22:50:08 -         )
2018-09-09 22:50:08 -     [trace1; trace2]
2018-09-09 22:50:08 -     |> Chart.Plot
2018-09-09 22:50:08 -     |> Chart.WithWidth 1000
2018-09-09 22:50:08 -     |> Chart.WithHeight 700
2018-09-09 22:50:08 - plotLagrange()
2018-09-09 22:50:09 - let NewtonPolynomial (points : float list) x = 
2018-09-09 22:50:09 -     let dividedDifferencesTable = 
2018-09-09 22:50:09 -         let rec computeCells y acc = 
2018-09-09 22:50:09 -             let computeCol n (prevCol : float list) =
2018-09-09 22:50:09 -                 let rec computeColInternal x acc =
2018-09-09 22:50:09 -                     match x with
2018-09-09 22:50:09 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-09 22:50:09 -                     | _ -> acc
2018-09-09 22:50:09 -                 computeColInternal (points.Length - n) [] 
2018-09-09 22:50:09 -             match y with
2018-09-09 22:50:09 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-09 22:50:09 -             |_ -> List.rev acc
2018-09-09 22:50:09 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-09 22:50:09 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-09 22:50:09 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-09 22:50:09 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-09 22:50:09 - let NewtonPolynomialPoints = NewtonPolynomial points
2018-09-09 22:50:09 - let plotNewton () =
2018-09-09 22:50:09 -     let x = [-2. .. 0.01 .. 2.]
2018-09-09 22:50:09 -     let trace1 =
2018-09-09 22:50:09 -         let y = x |> List.map f
2018-09-09 22:50:09 -         Scatter(
2018-09-09 22:50:09 -             x = x,
2018-09-09 22:50:09 -             y = y,
2018-09-09 22:50:09 -             name = "Исходная функция"
2018-09-09 22:50:09 -         )
2018-09-09 22:50:09 -     let trace2 =
2018-09-09 22:50:09 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-09 22:50:09 -         Scatter(
2018-09-09 22:50:09 -             x = x,
2018-09-09 22:50:09 -             y = y,
2018-09-09 22:50:09 -             name = "Полином Ньютона"
2018-09-09 22:50:09 -         )
2018-09-09 22:50:09 -     [trace1; trace2]
2018-09-09 22:50:09 -     |> Chart.Plot
2018-09-09 22:50:09 -     |> Chart.WithWidth 1000
2018-09-09 22:50:09 -     |> Chart.WithHeight 700
2018-09-09 22:50:09 - plotNewton()
2018-09-09 22:50:09 - let plotError () =
2018-09-09 22:50:09 -     let x = [-2. .. 0.01 .. 2.]
2018-09-09 22:50:09 -     let trace1 =
2018-09-09 22:50:09 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-09 22:50:09 -         Scatter(
2018-09-09 22:50:09 -             x = x,
2018-09-09 22:50:09 -             y = error
2018-09-09 22:50:09 -         )
2018-09-09 22:50:09 -     trace1
2018-09-09 22:50:09 -     |> Chart.Plot
2018-09-09 22:50:09 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-09 22:50:09 -     |> Chart.WithWidth 1000
2018-09-09 22:50:09 -     |> Chart.WithHeight 700
2018-09-09 22:50:09 - plotError()
2018-09-09 22:50:09 - let c = -2.
2018-09-09 22:50:09 - let d = 2.
2018-09-09 22:50:09 - let n = 30.
2018-09-09 22:50:09 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-09 22:50:09 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-09 22:50:09 - let NewtonPolynomialCheb = NewtonPolynomial ChebT
2018-09-09 22:50:09 - let plotNewtonCheb () =
2018-09-09 22:50:09 -     let x = [c .. 0.01 .. d]
2018-09-09 22:50:09 -     let trace1 =
2018-09-09 22:50:09 -         let y = x |> List.map f
2018-09-09 22:50:09 -         Scatter(
2018-09-09 22:50:09 -             x = x,
2018-09-09 22:50:09 -             y = y,
2018-09-09 22:50:09 -             name = "Исходная функция"
2018-09-09 22:50:09 -         )
2018-09-09 22:50:09 -     let trace2 =
2018-09-09 22:50:09 -         let y = x |> List.map NewtonPolynomialCheb
2018-09-09 22:50:09 -         Scatter(
2018-09-09 22:50:09 -             x = x,
2018-09-09 22:50:09 -             y = y,
2018-09-09 22:50:09 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-09 22:50:09 -         )
2018-09-09 22:50:09 -     [trace1; trace2]
2018-09-09 22:50:09 -     |> Chart.Plot
2018-09-09 22:50:09 -     |> Chart.WithWidth 1000
2018-09-09 22:50:09 -     |> Chart.WithHeight 700
2018-09-09 22:50:09 - plotNewtonCheb()
2018-09-09 22:50:09 - let plotErrorCheb () =
2018-09-09 22:50:09 -     let x = [c .. 0.01 .. d]
2018-09-09 22:50:09 -     let trace1 =
2018-09-09 22:50:09 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-09 22:50:09 -         Scatter(
2018-09-09 22:50:09 -             x = x,
2018-09-09 22:50:09 -             y = error
2018-09-09 22:50:09 -         )
2018-09-09 22:50:09 -     trace1
2018-09-09 22:50:09 -     |> Chart.Plot
2018-09-09 22:50:09 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских узлах"
2018-09-09 22:50:09 -     |> Chart.WithWidth 1000
2018-09-09 22:50:09 -     |> Chart.WithHeight 700
2018-09-09 22:50:09 - plotErrorCheb()
2018-09-09 22:51:25 - #load "XPlot.Plotly.Paket.fsx"
2018-09-09 22:51:25 - #load "XPlot.Plotly.fsx"
2018-09-09 22:51:25 - open XPlot.Plotly
2018-09-09 22:51:25 - open System
2018-09-09 22:51:26 - let N = 5.
2018-09-09 22:51:26 - let f (x : float) = x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-09 22:51:26 - let x0 = - (N % 3.)
2018-09-09 22:51:26 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-09 22:51:26 - let l k x = 
2018-09-09 22:51:26 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-09 22:51:26 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-09 22:51:26 - let plotLagrange () =
2018-09-09 22:51:26 -     let x = [-2. .. 0.01 .. 2.]
2018-09-09 22:51:26 -     let trace1 =
2018-09-09 22:51:26 -         let y = x |> List.map f
2018-09-09 22:51:26 -         Scatter(
2018-09-09 22:51:26 -             x = x,
2018-09-09 22:51:26 -             y = y,
2018-09-09 22:51:26 -             name = "Исходная функция"
2018-09-09 22:51:26 -         )
2018-09-09 22:51:26 -     let trace2 =
2018-09-09 22:51:26 -         let y = x |> List.map LagrangePolynomial
2018-09-09 22:51:26 -         Scatter(
2018-09-09 22:51:26 -             x = x,
2018-09-09 22:51:26 -             y = y,
2018-09-09 22:51:26 -             name = "Полином Лагранжа"
2018-09-09 22:51:26 -         )
2018-09-09 22:51:26 -     [trace1; trace2]
2018-09-09 22:51:26 -     |> Chart.Plot
2018-09-09 22:51:26 -     |> Chart.WithWidth 1000
2018-09-09 22:51:26 -     |> Chart.WithHeight 700
2018-09-09 22:51:26 - plotLagrange()
2018-09-09 22:51:26 - let NewtonPolynomial (points : float list) x = 
2018-09-09 22:51:26 -     let dividedDifferencesTable = 
2018-09-09 22:51:26 -         let rec computeCells y acc = 
2018-09-09 22:51:26 -             let computeCol n (prevCol : float list) =
2018-09-09 22:51:26 -                 let rec computeColInternal x acc =
2018-09-09 22:51:26 -                     match x with
2018-09-09 22:51:26 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-09 22:51:26 -                     | _ -> acc
2018-09-09 22:51:26 -                 computeColInternal (points.Length - n) [] 
2018-09-09 22:51:26 -             match y with
2018-09-09 22:51:26 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-09 22:51:26 -             |_ -> List.rev acc
2018-09-09 22:51:26 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-09 22:51:26 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-09 22:51:26 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-09 22:51:26 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-09 22:51:26 - let NewtonPolynomialPoints = NewtonPolynomial points
2018-09-09 22:51:27 - let plotNewton () =
2018-09-09 22:51:27 -     let x = [-2. .. 0.01 .. 2.]
2018-09-09 22:51:27 -     let trace1 =
2018-09-09 22:51:27 -         let y = x |> List.map f
2018-09-09 22:51:27 -         Scatter(
2018-09-09 22:51:27 -             x = x,
2018-09-09 22:51:27 -             y = y,
2018-09-09 22:51:27 -             name = "Исходная функция"
2018-09-09 22:51:27 -         )
2018-09-09 22:51:27 -     let trace2 =
2018-09-09 22:51:27 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-09 22:51:27 -         Scatter(
2018-09-09 22:51:27 -             x = x,
2018-09-09 22:51:27 -             y = y,
2018-09-09 22:51:27 -             name = "Полином Ньютона"
2018-09-09 22:51:27 -         )
2018-09-09 22:51:27 -     [trace1; trace2]
2018-09-09 22:51:27 -     |> Chart.Plot
2018-09-09 22:51:27 -     |> Chart.WithWidth 1000
2018-09-09 22:51:27 -     |> Chart.WithHeight 700
2018-09-09 22:51:27 - plotNewton()
2018-09-09 22:51:27 - let plotError () =
2018-09-09 22:51:27 -     let x = [-2. .. 0.01 .. 2.]
2018-09-09 22:51:27 -     let trace1 =
2018-09-09 22:51:27 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-09 22:51:27 -         Scatter(
2018-09-09 22:51:27 -             x = x,
2018-09-09 22:51:27 -             y = error
2018-09-09 22:51:27 -         )
2018-09-09 22:51:27 -     trace1
2018-09-09 22:51:27 -     |> Chart.Plot
2018-09-09 22:51:27 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-09 22:51:27 -     |> Chart.WithWidth 1000
2018-09-09 22:51:27 -     |> Chart.WithHeight 700
2018-09-09 22:51:27 - plotError()
2018-09-09 22:51:27 - let c = -2.
2018-09-09 22:51:27 - let d = 2.
2018-09-09 22:51:27 - let n = 5.
2018-09-09 22:51:27 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-09 22:51:27 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-09 22:51:27 - let NewtonPolynomialCheb = NewtonPolynomial ChebT
2018-09-09 22:51:27 - let plotNewtonCheb () =
2018-09-09 22:51:27 -     let x = [c .. 0.01 .. d]
2018-09-09 22:51:27 -     let trace1 =
2018-09-09 22:51:27 -         let y = x |> List.map f
2018-09-09 22:51:27 -         Scatter(
2018-09-09 22:51:27 -             x = x,
2018-09-09 22:51:27 -             y = y,
2018-09-09 22:51:27 -             name = "Исходная функция"
2018-09-09 22:51:27 -         )
2018-09-09 22:51:27 -     let trace2 =
2018-09-09 22:51:27 -         let y = x |> List.map NewtonPolynomialCheb
2018-09-09 22:51:27 -         Scatter(
2018-09-09 22:51:27 -             x = x,
2018-09-09 22:51:27 -             y = y,
2018-09-09 22:51:27 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-09 22:51:27 -         )
2018-09-09 22:51:27 -     [trace1; trace2]
2018-09-09 22:51:27 -     |> Chart.Plot
2018-09-09 22:51:27 -     |> Chart.WithWidth 1000
2018-09-09 22:51:27 -     |> Chart.WithHeight 700
2018-09-09 22:51:27 - plotNewtonCheb()
2018-09-09 22:51:27 - let plotErrorCheb () =
2018-09-09 22:51:27 -     let x = [c .. 0.01 .. d]
2018-09-09 22:51:27 -     let trace1 =
2018-09-09 22:51:27 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-09 22:51:27 -         Scatter(
2018-09-09 22:51:27 -             x = x,
2018-09-09 22:51:27 -             y = error
2018-09-09 22:51:27 -         )
2018-09-09 22:51:27 -     trace1
2018-09-09 22:51:27 -     |> Chart.Plot
2018-09-09 22:51:27 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских узлах"
2018-09-09 22:51:27 -     |> Chart.WithWidth 1000
2018-09-09 22:51:27 -     |> Chart.WithHeight 700
2018-09-09 22:51:27 - plotErrorCheb()
2018-09-10 05:50:01 - // include directory, this will be replaced by the kernel
2018-09-10 05:50:01 - #I "/home/nbuser/IfSharp/bin"
2018-09-10 05:50:01 - // load base dlls
2018-09-10 05:50:01 - #r "IfSharp.Kernel.dll"
2018-09-10 05:50:01 - #r "NetMQ.dll"
2018-09-10 05:50:01 - // open the global functions and methods
2018-09-10 05:50:01 - open IfSharp.Kernel
2018-09-10 05:50:01 - open IfSharp.Kernel.Globals
2018-09-10 05:50:14 - F# Interactive for F# 4.1
2018-09-10 05:50:14 - Freely distributed under the Apache 2.0 Open Source License
2018-09-10 05:50:14 - For help type #help;;
2018-09-10 05:50:14 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-10 05:50:14 -   seq []
2018-09-10 05:50:14 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-10 05:50:14 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-10 05:50:14 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-10 05:50:14 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-10 05:50:34 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-10 05:54:54 - #load "XPlot.Plotly.Paket.fsx"
2018-09-10 05:54:54 - #load "XPlot.Plotly.fsx"
2018-09-10 05:54:54 - open XPlot.Plotly
2018-09-10 05:54:54 - open System
2018-09-10 05:55:02 - let N = 5.
2018-09-10 05:55:02 - let f (x : float) = x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-10 05:55:02 - let x0 = - (N % 3.)
2018-09-10 05:55:02 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-10 05:55:02 - let l k x = 
2018-09-10 05:55:02 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-10 05:55:02 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-10 05:55:02 - let plotLagrange () =
2018-09-10 05:55:02 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 05:55:02 -     let trace1 =
2018-09-10 05:55:02 -         let y = x |> List.map f
2018-09-10 05:55:02 -         Scatter(
2018-09-10 05:55:02 -             x = x,
2018-09-10 05:55:02 -             y = y,
2018-09-10 05:55:02 -             name = "Исходная функция"
2018-09-10 05:55:02 -         )
2018-09-10 05:55:02 -     let trace2 =
2018-09-10 05:55:02 -         let y = x |> List.map LagrangePolynomial
2018-09-10 05:55:02 -         Scatter(
2018-09-10 05:55:02 -             x = x,
2018-09-10 05:55:02 -             y = y,
2018-09-10 05:55:02 -             name = "Полином Лагранжа"
2018-09-10 05:55:02 -         )
2018-09-10 05:55:02 -     [trace1; trace2]
2018-09-10 05:55:02 -     |> Chart.Plot
2018-09-10 05:55:02 -     |> Chart.WithWidth 1000
2018-09-10 05:55:02 -     |> Chart.WithHeight 700
2018-09-10 05:55:02 - plotLagrange()
2018-09-10 05:55:03 - let NewtonPolynomial (points : float list) x = 
2018-09-10 05:55:03 -     let dividedDifferencesTable = 
2018-09-10 05:55:03 -         let rec computeCells y acc = 
2018-09-10 05:55:03 -             let computeCol n (prevCol : float list) =
2018-09-10 05:55:03 -                 let rec computeColInternal x acc =
2018-09-10 05:55:03 -                     match x with
2018-09-10 05:55:03 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-10 05:55:03 -                     | _ -> acc
2018-09-10 05:55:03 -                 computeColInternal (points.Length - n) [] 
2018-09-10 05:55:03 -             match y with
2018-09-10 05:55:03 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-10 05:55:03 -             |_ -> List.rev acc
2018-09-10 05:55:03 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-10 05:55:03 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-10 05:55:03 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-10 05:55:03 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-10 05:55:03 - let NewtonPolynomialPoints = NewtonPolynomial points
2018-09-10 05:55:03 - let plotNewton () =
2018-09-10 05:55:03 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 05:55:03 -     let trace1 =
2018-09-10 05:55:03 -         let y = x |> List.map f
2018-09-10 05:55:03 -         Scatter(
2018-09-10 05:55:03 -             x = x,
2018-09-10 05:55:03 -             y = y,
2018-09-10 05:55:03 -             name = "Исходная функция"
2018-09-10 05:55:03 -         )
2018-09-10 05:55:03 -     let trace2 =
2018-09-10 05:55:03 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-10 05:55:03 -         Scatter(
2018-09-10 05:55:03 -             x = x,
2018-09-10 05:55:03 -             y = y,
2018-09-10 05:55:03 -             name = "Полином Ньютона"
2018-09-10 05:55:03 -         )
2018-09-10 05:55:03 -     [trace1; trace2]
2018-09-10 05:55:03 -     |> Chart.Plot
2018-09-10 05:55:03 -     |> Chart.WithWidth 1000
2018-09-10 05:55:03 -     |> Chart.WithHeight 700
2018-09-10 05:55:03 - plotNewton()
2018-09-10 05:55:03 - let plotError () =
2018-09-10 05:55:03 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 05:55:03 -     let trace1 =
2018-09-10 05:55:03 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-10 05:55:03 -         Scatter(
2018-09-10 05:55:03 -             x = x,
2018-09-10 05:55:03 -             y = error
2018-09-10 05:55:03 -         )
2018-09-10 05:55:03 -     trace1
2018-09-10 05:55:03 -     |> Chart.Plot
2018-09-10 05:55:03 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-10 05:55:03 -     |> Chart.WithWidth 1000
2018-09-10 05:55:03 -     |> Chart.WithHeight 700
2018-09-10 05:55:03 - plotError()
2018-09-10 05:55:03 - let c = -2.
2018-09-10 05:55:03 - let d = 2.
2018-09-10 05:55:03 - let n = 5.
2018-09-10 05:55:03 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-10 05:55:03 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-10 05:55:03 - let NewtonPolynomialCheb = NewtonPolynomial ChebT
2018-09-10 05:55:03 - let plotNewtonCheb () =
2018-09-10 05:55:03 -     let x = [c .. 0.01 .. d]
2018-09-10 05:55:03 -     let trace1 =
2018-09-10 05:55:03 -         let y = x |> List.map f
2018-09-10 05:55:03 -         Scatter(
2018-09-10 05:55:03 -             x = x,
2018-09-10 05:55:03 -             y = y,
2018-09-10 05:55:03 -             name = "Исходная функция"
2018-09-10 05:55:03 -         )
2018-09-10 05:55:03 -     let trace2 =
2018-09-10 05:55:03 -         let y = x |> List.map NewtonPolynomialCheb
2018-09-10 05:55:03 -         Scatter(
2018-09-10 05:55:03 -             x = x,
2018-09-10 05:55:03 -             y = y,
2018-09-10 05:55:03 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-10 05:55:03 -         )
2018-09-10 05:55:03 -     let trace3 =
2018-09-10 05:55:03 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-10 05:55:03 -         Scatter(
2018-09-10 05:55:03 -             x = x,
2018-09-10 05:55:03 -             y = y,
2018-09-10 05:55:03 -             name = "Полином Ньютона"
2018-09-10 05:55:03 -         )
2018-09-10 05:55:03 -     [trace1; trace2; trace3]
2018-09-10 05:55:03 -     |> Chart.Plot
2018-09-10 05:55:03 -     |> Chart.WithWidth 1000
2018-09-10 05:55:03 -     |> Chart.WithHeight 700
2018-09-10 05:55:03 - plotNewtonCheb()
2018-09-10 05:55:03 - let plotErrorCheb () =
2018-09-10 05:55:03 -     let x = [c .. 0.01 .. d]
2018-09-10 05:55:03 -     let trace1 =
2018-09-10 05:55:03 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-10 05:55:03 -         Scatter(
2018-09-10 05:55:03 -             x = x,
2018-09-10 05:55:03 -             y = error,
2018-09-10 05:55:03 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-10 05:55:03 -         )
2018-09-10 05:55:03 -     let trace2 =
2018-09-10 05:55:03 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-10 05:55:03 -         Scatter(
2018-09-10 05:55:03 -             x = x,
2018-09-10 05:55:03 -             y = error,
2018-09-10 05:55:03 -             name = "Абсолютная погрешность полинома на заданных точках"
2018-09-10 05:55:03 -         )
2018-09-10 05:55:03 -     [trace1; trace2]
2018-09-10 05:55:03 -     |> Chart.Plot
2018-09-10 05:55:03 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских узлах и на заданных точках"
2018-09-10 05:55:03 -     |> Chart.WithWidth 1000
2018-09-10 05:55:03 -     |> Chart.WithHeight 700
2018-09-10 05:55:03 - plotErrorCheb()
2018-09-10 05:56:41 - #load "XPlot.Plotly.Paket.fsx"
2018-09-10 05:56:41 - #load "XPlot.Plotly.fsx"
2018-09-10 05:56:41 - open XPlot.Plotly
2018-09-10 05:56:41 - open System
2018-09-10 05:56:42 - let N = 5.
2018-09-10 05:56:42 - let f (x : float) = x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-10 05:56:42 - let x0 = - (N % 3.)
2018-09-10 05:56:42 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-10 05:56:42 - let l k x = 
2018-09-10 05:56:42 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-10 05:56:42 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-10 05:56:43 - let plotLagrange () =
2018-09-10 05:56:43 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 05:56:43 -     let trace1 =
2018-09-10 05:56:43 -         let y = x |> List.map f
2018-09-10 05:56:43 -         Scatter(
2018-09-10 05:56:43 -             x = x,
2018-09-10 05:56:43 -             y = y,
2018-09-10 05:56:43 -             name = "Исходная функция"
2018-09-10 05:56:43 -         )
2018-09-10 05:56:43 -     let trace2 =
2018-09-10 05:56:43 -         let y = x |> List.map LagrangePolynomial
2018-09-10 05:56:43 -         Scatter(
2018-09-10 05:56:43 -             x = x,
2018-09-10 05:56:43 -             y = y,
2018-09-10 05:56:43 -             name = "Полином Лагранжа"
2018-09-10 05:56:43 -         )
2018-09-10 05:56:43 -     [trace1; trace2]
2018-09-10 05:56:43 -     |> Chart.Plot
2018-09-10 05:56:43 -     |> Chart.WithWidth 1000
2018-09-10 05:56:43 -     |> Chart.WithHeight 700
2018-09-10 05:56:43 - plotLagrange()
2018-09-10 05:56:43 - let NewtonPolynomial (points : float list) x = 
2018-09-10 05:56:43 -     let dividedDifferencesTable = 
2018-09-10 05:56:43 -         let rec computeCells y acc = 
2018-09-10 05:56:43 -             let computeCol n (prevCol : float list) =
2018-09-10 05:56:43 -                 let rec computeColInternal x acc =
2018-09-10 05:56:43 -                     match x with
2018-09-10 05:56:43 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-10 05:56:43 -                     | _ -> acc
2018-09-10 05:56:43 -                 computeColInternal (points.Length - n) [] 
2018-09-10 05:56:43 -             match y with
2018-09-10 05:56:43 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-10 05:56:43 -             |_ -> List.rev acc
2018-09-10 05:56:43 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-10 05:56:43 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-10 05:56:43 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-10 05:56:43 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-10 05:56:43 - let NewtonPolynomialPoints = NewtonPolynomial points
2018-09-10 05:56:43 - let plotNewton () =
2018-09-10 05:56:43 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 05:56:43 -     let trace1 =
2018-09-10 05:56:43 -         let y = x |> List.map f
2018-09-10 05:56:43 -         Scatter(
2018-09-10 05:56:43 -             x = x,
2018-09-10 05:56:43 -             y = y,
2018-09-10 05:56:43 -             name = "Исходная функция"
2018-09-10 05:56:43 -         )
2018-09-10 05:56:43 -     let trace2 =
2018-09-10 05:56:43 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-10 05:56:43 -         Scatter(
2018-09-10 05:56:43 -             x = x,
2018-09-10 05:56:43 -             y = y,
2018-09-10 05:56:43 -             name = "Полином Ньютона"
2018-09-10 05:56:43 -         )
2018-09-10 05:56:43 -     [trace1; trace2]
2018-09-10 05:56:43 -     |> Chart.Plot
2018-09-10 05:56:43 -     |> Chart.WithWidth 1000
2018-09-10 05:56:43 -     |> Chart.WithHeight 700
2018-09-10 05:56:43 - plotNewton()
2018-09-10 05:56:43 - let plotError () =
2018-09-10 05:56:43 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 05:56:43 -     let trace1 =
2018-09-10 05:56:43 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-10 05:56:43 -         Scatter(
2018-09-10 05:56:43 -             x = x,
2018-09-10 05:56:43 -             y = error
2018-09-10 05:56:43 -         )
2018-09-10 05:56:43 -     trace1
2018-09-10 05:56:43 -     |> Chart.Plot
2018-09-10 05:56:43 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-10 05:56:43 -     |> Chart.WithWidth 1000
2018-09-10 05:56:43 -     |> Chart.WithHeight 700
2018-09-10 05:56:43 - plotError()
2018-09-10 05:56:43 - let c = -2.
2018-09-10 05:56:43 - let d = 2.
2018-09-10 05:56:43 - let n = 5.
2018-09-10 05:56:43 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-10 05:56:43 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-10 05:56:43 - let NewtonPolynomialCheb = NewtonPolynomial ChebT
2018-09-10 05:56:43 - let plotNewtonCheb () =
2018-09-10 05:56:43 -     let x = [c .. 0.01 .. d]
2018-09-10 05:56:43 -     let trace1 =
2018-09-10 05:56:43 -         let y = x |> List.map f
2018-09-10 05:56:43 -         Scatter(
2018-09-10 05:56:43 -             x = x,
2018-09-10 05:56:43 -             y = y,
2018-09-10 05:56:43 -             name = "Исходная функция"
2018-09-10 05:56:43 -         )
2018-09-10 05:56:43 -     let trace2 =
2018-09-10 05:56:43 -         let y = x |> List.map NewtonPolynomialCheb
2018-09-10 05:56:43 -         Scatter(
2018-09-10 05:56:43 -             x = x,
2018-09-10 05:56:43 -             y = y,
2018-09-10 05:56:43 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-10 05:56:43 -         )
2018-09-10 05:56:43 -     let trace3 =
2018-09-10 05:56:43 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-10 05:56:43 -         Scatter(
2018-09-10 05:56:43 -             x = x,
2018-09-10 05:56:43 -             y = y,
2018-09-10 05:56:43 -             name = "Полином Ньютона на заданных узлах"
2018-09-10 05:56:43 -         )
2018-09-10 05:56:43 -     [trace1; trace2; trace3]
2018-09-10 05:56:43 -     |> Chart.Plot
2018-09-10 05:56:43 -     |> Chart.WithWidth 1000
2018-09-10 05:56:43 -     |> Chart.WithHeight 700
2018-09-10 05:56:43 - plotNewtonCheb()
2018-09-10 05:56:43 - let plotErrorCheb () =
2018-09-10 05:56:43 -     let x = [c .. 0.01 .. d]
2018-09-10 05:56:43 -     let trace1 =
2018-09-10 05:56:43 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-10 05:56:43 -         Scatter(
2018-09-10 05:56:43 -             x = x,
2018-09-10 05:56:43 -             y = error,
2018-09-10 05:56:43 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-10 05:56:43 -         )
2018-09-10 05:56:43 -     let trace2 =
2018-09-10 05:56:43 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-10 05:56:43 -         Scatter(
2018-09-10 05:56:43 -             x = x,
2018-09-10 05:56:43 -             y = error,
2018-09-10 05:56:43 -             name = "Абсолютная погрешность полинома на заданных узлах"
2018-09-10 05:56:43 -         )
2018-09-10 05:56:43 -     [trace1; trace2]
2018-09-10 05:56:43 -     |> Chart.Plot
2018-09-10 05:56:43 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских и на заданных узлах"
2018-09-10 05:56:43 -     |> Chart.WithWidth 1000
2018-09-10 05:56:43 -     |> Chart.WithHeight 700
2018-09-10 05:56:43 - plotErrorCheb()
2018-09-10 06:07:05 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-10 06:12:11 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-10 06:15:52 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-10 06:16:21 - let plotLagrange () =
2018-09-10 06:16:21 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 06:16:21 -     let trace1 =
2018-09-10 06:16:21 -         let y = x |> List.map f
2018-09-10 06:16:21 -         Scatter(
2018-09-10 06:16:21 -             x = x,
2018-09-10 06:16:21 -             y = y,
2018-09-10 06:16:21 -             name = "Исходная функция"
2018-09-10 06:16:21 -         )
2018-09-10 06:16:21 -     let trace2 =
2018-09-10 06:16:21 -         let y = x |> List.map LagrangePolynomial
2018-09-10 06:16:21 -         Scatter(
2018-09-10 06:16:21 -             x = x,
2018-09-10 06:16:21 -             y = y,
2018-09-10 06:16:21 -             name = "Полином Лагранжа"
2018-09-10 06:16:21 -         )
2018-09-10 06:16:21 -     [trace1; trace2]
2018-09-10 06:16:21 -     |> Chart.Plot
2018-09-10 06:16:21 -     |> Chart.WithWidth 1000
2018-09-10 06:16:21 -     |> Chart.WithHeight 700
2018-09-10 06:16:21 -     |> Chart.GetHtml()
2018-09-10 06:16:21 - plotLagrange()
2018-09-10 06:16:21 - The field, constructor or member 'GetHtml' is not defined.
2018-09-10 06:17:09 - let plotLagrange () =
2018-09-10 06:17:09 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 06:17:09 -     let trace1 =
2018-09-10 06:17:09 -         let y = x |> List.map f
2018-09-10 06:17:09 -         Scatter(
2018-09-10 06:17:09 -             x = x,
2018-09-10 06:17:09 -             y = y,
2018-09-10 06:17:09 -             name = "Исходная функция"
2018-09-10 06:17:09 -         )
2018-09-10 06:17:09 -     let trace2 =
2018-09-10 06:17:09 -         let y = x |> List.map LagrangePolynomial
2018-09-10 06:17:09 -         Scatter(
2018-09-10 06:17:09 -             x = x,
2018-09-10 06:17:09 -             y = y,
2018-09-10 06:17:09 -             name = "Полином Лагранжа"
2018-09-10 06:17:09 -         )
2018-09-10 06:17:09 -     [trace1; trace2]
2018-09-10 06:17:09 -     |> Chart.Plot
2018-09-10 06:17:09 -     |> Chart.WithWidth 1000
2018-09-10 06:17:09 -     |> Chart.WithHeight 700
2018-09-10 06:17:09 -     |> Chart.Show()
2018-09-10 06:17:09 - plotLagrange()
2018-09-10 06:17:09 - This expression was expected to have type
2018-09-10 06:17:09 -     'PlotlyChart -> 'a'    
2018-09-10 06:17:09 - but here has type
2018-09-10 06:17:09 -     'unit'    
2018-09-10 06:17:18 - let plotLagrange () =
2018-09-10 06:17:18 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 06:17:18 -     let trace1 =
2018-09-10 06:17:18 -         let y = x |> List.map f
2018-09-10 06:17:18 -         Scatter(
2018-09-10 06:17:18 -             x = x,
2018-09-10 06:17:18 -             y = y,
2018-09-10 06:17:18 -             name = "Исходная функция"
2018-09-10 06:17:18 -         )
2018-09-10 06:17:18 -     let trace2 =
2018-09-10 06:17:18 -         let y = x |> List.map LagrangePolynomial
2018-09-10 06:17:18 -         Scatter(
2018-09-10 06:17:18 -             x = x,
2018-09-10 06:17:18 -             y = y,
2018-09-10 06:17:18 -             name = "Полином Лагранжа"
2018-09-10 06:17:18 -         )
2018-09-10 06:17:18 -     [trace1; trace2]
2018-09-10 06:17:18 -     |> Chart.Plot
2018-09-10 06:17:18 -     |> Chart.WithWidth 1000
2018-09-10 06:17:18 -     |> Chart.WithHeight 700
2018-09-10 06:17:18 -     |> Chart.Show
2018-09-10 06:17:18 - plotLagrange()
2018-09-10 06:17:31 - let plotLagrange () =
2018-09-10 06:17:31 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 06:17:31 -     let trace1 =
2018-09-10 06:17:31 -         let y = x |> List.map f
2018-09-10 06:17:31 -         Scatter(
2018-09-10 06:17:31 -             x = x,
2018-09-10 06:17:31 -             y = y,
2018-09-10 06:17:31 -             name = "Исходная функция"
2018-09-10 06:17:31 -         )
2018-09-10 06:17:31 -     let trace2 =
2018-09-10 06:17:31 -         let y = x |> List.map LagrangePolynomial
2018-09-10 06:17:31 -         Scatter(
2018-09-10 06:17:31 -             x = x,
2018-09-10 06:17:31 -             y = y,
2018-09-10 06:17:31 -             name = "Полином Лагранжа"
2018-09-10 06:17:31 -         )
2018-09-10 06:17:31 -     [trace1; trace2]
2018-09-10 06:17:31 -     |> Chart.Plot
2018-09-10 06:17:31 -     |> Chart.WithWidth 1000
2018-09-10 06:17:31 -     |> Chart.WithHeight 700
2018-09-10 06:17:31 -     |> Chart.Show
2018-09-10 06:17:31 - plotLagrange()
2018-09-10 06:49:31 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-10 06:54:06 - let plotLagrange () =
2018-09-10 06:54:06 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 06:54:06 -     let trace1 =
2018-09-10 06:54:06 -         let y = x |> List.map f
2018-09-10 06:54:06 -         Scatter(
2018-09-10 06:54:06 -             x = x,
2018-09-10 06:54:06 -             y = y,
2018-09-10 06:54:06 -             name = "Исходная функция"
2018-09-10 06:54:06 -         )
2018-09-10 06:54:06 -     let trace2 =
2018-09-10 06:54:06 -         let y = x |> List.map LagrangePolynomial
2018-09-10 06:54:06 -         Scatter(
2018-09-10 06:54:06 -             x = x,
2018-09-10 06:54:06 -             y = y,
2018-09-10 06:54:06 -             name = "Полином Лагранжа"
2018-09-10 06:54:06 -         )
2018-09-10 06:54:06 -         
2018-09-10 06:54:06 -     [trace1; trace2]
2018-09-10 06:54:06 -     |> Chart.Plot
2018-09-10 06:54:06 -     |> Chart.WithWidth 1000
2018-09-10 06:54:06 -     |> Chart.WithHeight 700
2018-09-10 06:54:06 - plotLagrange().GetHtml
2018-09-10 06:55:18 - let plotLagrange () =
2018-09-10 06:55:18 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 06:55:18 -     let trace1 =
2018-09-10 06:55:18 -         let y = x |> List.map f
2018-09-10 06:55:18 -         Scatter(
2018-09-10 06:55:18 -             x = x,
2018-09-10 06:55:18 -             y = y,
2018-09-10 06:55:18 -             name = "Исходная функция"
2018-09-10 06:55:18 -         )
2018-09-10 06:55:18 -     let trace2 =
2018-09-10 06:55:18 -         let y = x |> List.map LagrangePolynomial
2018-09-10 06:55:18 -         Scatter(
2018-09-10 06:55:18 -             x = x,
2018-09-10 06:55:18 -             y = y,
2018-09-10 06:55:18 -             name = "Полином Лагранжа"
2018-09-10 06:55:18 -         )
2018-09-10 06:55:18 -         
2018-09-10 06:55:18 -     [trace1; trace2]
2018-09-10 06:55:18 -     |> Chart.Plot
2018-09-10 06:55:18 -     |> Chart.WithWidth 1000
2018-09-10 06:55:18 -     |> Chart.WithHeight 700
2018-09-10 06:55:18 - { Html = plotLagrange().GetHtml }
2018-09-10 06:55:19 - This function takes too many arguments, or is used in a context where a function is not expected
2018-09-10 06:57:14 - let plotLagrange () =
2018-09-10 06:57:14 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 06:57:14 -     let trace1 =
2018-09-10 06:57:14 -         let y = x |> List.map f
2018-09-10 06:57:14 -         Scatter(
2018-09-10 06:57:14 -             x = x,
2018-09-10 06:57:14 -             y = y,
2018-09-10 06:57:14 -             name = "Исходная функция"
2018-09-10 06:57:14 -         )
2018-09-10 06:57:14 -     let trace2 =
2018-09-10 06:57:14 -         let y = x |> List.map LagrangePolynomial
2018-09-10 06:57:14 -         Scatter(
2018-09-10 06:57:14 -             x = x,
2018-09-10 06:57:14 -             y = y,
2018-09-10 06:57:14 -             name = "Полином Лагранжа"
2018-09-10 06:57:14 -         )
2018-09-10 06:57:14 -         
2018-09-10 06:57:14 -     [trace1; trace2]
2018-09-10 06:57:14 -     |> Chart.Plot
2018-09-10 06:57:14 -     |> Chart.WithWidth 1000
2018-09-10 06:57:14 -     |> Chart.WithHeight 700
2018-09-10 06:57:14 - let html x = { Html = x }
2018-09-10 06:57:14 - html (plotLagrange().GetHtml())
2018-09-10 06:58:35 - let plotLagrange () =
2018-09-10 06:58:35 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 06:58:35 -     let trace1 =
2018-09-10 06:58:35 -         let y = x |> List.map f
2018-09-10 06:58:35 -         Scatter(
2018-09-10 06:58:35 -             x = x,
2018-09-10 06:58:35 -             y = y,
2018-09-10 06:58:35 -             name = "Исходная функция"
2018-09-10 06:58:35 -         )
2018-09-10 06:58:35 -     let trace2 =
2018-09-10 06:58:35 -         let y = x |> List.map LagrangePolynomial
2018-09-10 06:58:35 -         Scatter(
2018-09-10 06:58:35 -             x = x,
2018-09-10 06:58:35 -             y = y,
2018-09-10 06:58:35 -             name = "Полином Лагранжа"
2018-09-10 06:58:35 -         )
2018-09-10 06:58:35 -         
2018-09-10 06:58:35 -     [trace1; trace2]
2018-09-10 06:58:35 -     |> Chart.Plot
2018-09-10 06:58:35 -     |> Chart.WithWidth 1000
2018-09-10 06:58:35 -     |> Chart.WithHeight 700
2018-09-10 06:58:35 - let html x = { Html = x }
2018-09-10 06:58:35 - html (plotLagrange().GetInlineHtml())
2018-09-10 07:00:31 - let plotLagrange () =
2018-09-10 07:00:31 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 07:00:31 -     let trace1 =
2018-09-10 07:00:31 -         let y = x |> List.map f
2018-09-10 07:00:31 -         Scatter(
2018-09-10 07:00:31 -             x = x,
2018-09-10 07:00:31 -             y = y,
2018-09-10 07:00:31 -             name = "Исходная функция"
2018-09-10 07:00:31 -         )
2018-09-10 07:00:31 -     let trace2 =
2018-09-10 07:00:31 -         let y = x |> List.map LagrangePolynomial
2018-09-10 07:00:31 -         Scatter(
2018-09-10 07:00:31 -             x = x,
2018-09-10 07:00:31 -             y = y,
2018-09-10 07:00:31 -             name = "Полином Лагранжа"
2018-09-10 07:00:31 -         )
2018-09-10 07:00:31 -         
2018-09-10 07:00:31 -     [trace1; trace2]
2018-09-10 07:00:31 -     |> Chart.Plot
2018-09-10 07:00:31 -     |> Chart.WithWidth 1000
2018-09-10 07:00:31 -     |> Chart.WithHeight 700
2018-09-10 07:00:31 - plotLagrange()
2018-09-10 07:00:36 - #load "XPlot.Plotly.Paket.fsx"
2018-09-10 07:00:36 - #load "XPlot.Plotly.fsx"
2018-09-10 07:00:36 - open XPlot.Plotly
2018-09-10 07:00:36 - open System
2018-09-10 07:00:36 - let N = 5.
2018-09-10 07:00:37 - let f (x : float) = x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-10 07:00:37 - let x0 = - (N % 3.)
2018-09-10 07:00:37 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-10 07:00:37 - let l k x = 
2018-09-10 07:00:37 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-10 07:00:37 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-10 07:00:37 - let plotLagrange () =
2018-09-10 07:00:37 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 07:00:37 -     let trace1 =
2018-09-10 07:00:37 -         let y = x |> List.map f
2018-09-10 07:00:37 -         Scatter(
2018-09-10 07:00:37 -             x = x,
2018-09-10 07:00:37 -             y = y,
2018-09-10 07:00:37 -             name = "Исходная функция"
2018-09-10 07:00:37 -         )
2018-09-10 07:00:37 -     let trace2 =
2018-09-10 07:00:37 -         let y = x |> List.map LagrangePolynomial
2018-09-10 07:00:37 -         Scatter(
2018-09-10 07:00:37 -             x = x,
2018-09-10 07:00:37 -             y = y,
2018-09-10 07:00:37 -             name = "Полином Лагранжа"
2018-09-10 07:00:37 -         )
2018-09-10 07:00:37 -         
2018-09-10 07:00:37 -     [trace1; trace2]
2018-09-10 07:00:37 -     |> Chart.Plot
2018-09-10 07:00:37 -     |> Chart.WithWidth 1000
2018-09-10 07:00:37 -     |> Chart.WithHeight 700
2018-09-10 07:00:37 - plotLagrange()
2018-09-10 07:00:37 - let NewtonPolynomial (points : float list) x = 
2018-09-10 07:00:37 -     let dividedDifferencesTable = 
2018-09-10 07:00:37 -         let rec computeCells y acc = 
2018-09-10 07:00:37 -             let computeCol n (prevCol : float list) =
2018-09-10 07:00:37 -                 let rec computeColInternal x acc =
2018-09-10 07:00:37 -                     match x with
2018-09-10 07:00:37 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-10 07:00:37 -                     | _ -> acc
2018-09-10 07:00:37 -                 computeColInternal (points.Length - n) [] 
2018-09-10 07:00:37 -             match y with
2018-09-10 07:00:37 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-10 07:00:37 -             |_ -> List.rev acc
2018-09-10 07:00:37 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-10 07:00:37 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-10 07:00:37 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-10 07:00:37 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-10 07:00:37 - let NewtonPolynomialPoints = NewtonPolynomial points
2018-09-10 07:00:37 - let plotNewton () =
2018-09-10 07:00:37 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 07:00:37 -     let trace1 =
2018-09-10 07:00:37 -         let y = x |> List.map f
2018-09-10 07:00:37 -         Scatter(
2018-09-10 07:00:37 -             x = x,
2018-09-10 07:00:37 -             y = y,
2018-09-10 07:00:37 -             name = "Исходная функция"
2018-09-10 07:00:37 -         )
2018-09-10 07:00:37 -     let trace2 =
2018-09-10 07:00:37 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-10 07:00:37 -         Scatter(
2018-09-10 07:00:37 -             x = x,
2018-09-10 07:00:37 -             y = y,
2018-09-10 07:00:37 -             name = "Полином Ньютона"
2018-09-10 07:00:37 -         )
2018-09-10 07:00:37 -     [trace1; trace2]
2018-09-10 07:00:37 -     |> Chart.Plot
2018-09-10 07:00:37 -     |> Chart.WithWidth 1000
2018-09-10 07:00:37 -     |> Chart.WithHeight 700
2018-09-10 07:00:37 - plotNewton()
2018-09-10 07:00:37 - let plotError () =
2018-09-10 07:00:37 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 07:00:37 -     let trace1 =
2018-09-10 07:00:37 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-10 07:00:37 -         Scatter(
2018-09-10 07:00:37 -             x = x,
2018-09-10 07:00:37 -             y = error
2018-09-10 07:00:37 -         )
2018-09-10 07:00:37 -     trace1
2018-09-10 07:00:37 -     |> Chart.Plot
2018-09-10 07:00:37 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-10 07:00:37 -     |> Chart.WithWidth 1000
2018-09-10 07:00:37 -     |> Chart.WithHeight 700
2018-09-10 07:00:37 - plotError()
2018-09-10 07:00:37 - let c = -2.
2018-09-10 07:00:37 - let d = 2.
2018-09-10 07:00:37 - let n = 5.
2018-09-10 07:00:37 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-10 07:00:37 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-10 07:00:37 - let NewtonPolynomialCheb = NewtonPolynomial ChebT
2018-09-10 07:00:38 - let plotNewtonCheb () =
2018-09-10 07:00:38 -     let x = [c .. 0.01 .. d]
2018-09-10 07:00:38 -     let trace1 =
2018-09-10 07:00:38 -         let y = x |> List.map f
2018-09-10 07:00:38 -         Scatter(
2018-09-10 07:00:38 -             x = x,
2018-09-10 07:00:38 -             y = y,
2018-09-10 07:00:38 -             name = "Исходная функция"
2018-09-10 07:00:38 -         )
2018-09-10 07:00:38 -     let trace2 =
2018-09-10 07:00:38 -         let y = x |> List.map NewtonPolynomialCheb
2018-09-10 07:00:38 -         Scatter(
2018-09-10 07:00:38 -             x = x,
2018-09-10 07:00:38 -             y = y,
2018-09-10 07:00:38 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-10 07:00:38 -         )
2018-09-10 07:00:38 -     let trace3 =
2018-09-10 07:00:38 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-10 07:00:38 -         Scatter(
2018-09-10 07:00:38 -             x = x,
2018-09-10 07:00:38 -             y = y,
2018-09-10 07:00:38 -             name = "Полином Ньютона на заданных узлах"
2018-09-10 07:00:38 -         )
2018-09-10 07:00:38 -     [trace1; trace2; trace3]
2018-09-10 07:00:38 -     |> Chart.Plot
2018-09-10 07:00:38 -     |> Chart.WithWidth 1000
2018-09-10 07:00:38 -     |> Chart.WithHeight 700
2018-09-10 07:00:38 - plotNewtonCheb()
2018-09-10 07:00:38 - let plotErrorCheb () =
2018-09-10 07:00:38 -     let x = [c .. 0.01 .. d]
2018-09-10 07:00:38 -     let trace1 =
2018-09-10 07:00:38 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-10 07:00:38 -         Scatter(
2018-09-10 07:00:38 -             x = x,
2018-09-10 07:00:38 -             y = error,
2018-09-10 07:00:38 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-10 07:00:38 -         )
2018-09-10 07:00:38 -     let trace2 =
2018-09-10 07:00:38 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-10 07:00:38 -         Scatter(
2018-09-10 07:00:38 -             x = x,
2018-09-10 07:00:38 -             y = error,
2018-09-10 07:00:38 -             name = "Абсолютная погрешность полинома на заданных узлах"
2018-09-10 07:00:38 -         )
2018-09-10 07:00:38 -     [trace1; trace2]
2018-09-10 07:00:38 -     |> Chart.Plot
2018-09-10 07:00:38 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских и на заданных узлах"
2018-09-10 07:00:38 -     |> Chart.WithWidth 1000
2018-09-10 07:00:38 -     |> Chart.WithHeight 700
2018-09-10 07:00:38 - plotErrorCheb()
2018-09-10 16:17:04 - // include directory, this will be replaced by the kernel
2018-09-10 16:17:05 - #I "/home/nbuser/IfSharp/bin"
2018-09-10 16:17:05 - // load base dlls
2018-09-10 16:17:05 - #r "IfSharp.Kernel.dll"
2018-09-10 16:17:05 - #r "NetMQ.dll"
2018-09-10 16:17:05 - // open the global functions and methods
2018-09-10 16:17:05 - open IfSharp.Kernel
2018-09-10 16:17:05 - open IfSharp.Kernel.Globals
2018-09-10 16:17:25 - F# Interactive for F# 4.1
2018-09-10 16:17:25 - Freely distributed under the Apache 2.0 Open Source License
2018-09-10 16:17:25 - For help type #help;;
2018-09-10 16:17:25 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-10 16:17:25 -   seq []
2018-09-10 16:17:25 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-10 16:17:25 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-10 16:17:25 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-10 16:17:26 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-10 17:26:46 - let derivativeF x = 16. * exp(2. * x) * (2. * x + 5.) + 243. * cos (3. * x)
2018-09-10 17:26:46 - let maxDerivativeF = [c .. 0.01 .. d] |> List.map (fun x -> abs <| derivativeF x) |> List.max
2018-09-10 17:26:46 - let w x = points |> List.fold (fun acc k -> acc * (x - k)) 1.
2018-09-10 17:26:46 - let R x = maxDerivativeF / 120. * abs (w x)
2018-09-10 17:26:47 - The value or constructor 'c' is not defined.
2018-09-10 17:26:47 - The value or constructor 'd' is not defined. Maybe you want one of the following:
2018-09-10 17:26:47 -    id
2018-09-10 17:26:47 - The value or constructor 'points' is not defined. Maybe you want one of the following:
2018-09-10 17:26:47 -    Printf
2018-09-10 17:26:47 -    printf
2018-09-10 17:27:59 - #load "XPlot.Plotly.Paket.fsx"
2018-09-10 17:27:59 - #load "XPlot.Plotly.fsx"
2018-09-10 17:27:59 - open XPlot.Plotly
2018-09-10 17:27:59 - open System
2018-09-10 17:28:10 - // include directory, this will be replaced by the kernel
2018-09-10 17:28:10 - #I "/home/nbuser/IfSharp/bin"
2018-09-10 17:28:10 - // load base dlls
2018-09-10 17:28:10 - #r "IfSharp.Kernel.dll"
2018-09-10 17:28:10 - #r "NetMQ.dll"
2018-09-10 17:28:10 - // open the global functions and methods
2018-09-10 17:28:10 - open IfSharp.Kernel
2018-09-10 17:28:10 - open IfSharp.Kernel.Globals
2018-09-10 17:28:17 - F# Interactive for F# 4.1
2018-09-10 17:28:17 - Freely distributed under the Apache 2.0 Open Source License
2018-09-10 17:28:17 - For help type #help;;
2018-09-10 17:28:17 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-10 17:28:17 -   seq []
2018-09-10 17:28:17 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-10 17:28:17 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-10 17:28:17 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-10 17:28:23 - let plotTeoreticalError () =
2018-09-10 17:28:23 -     let x = [c .. 0.01 .. d]
2018-09-10 17:28:23 -     let trace1 =
2018-09-10 17:28:23 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-10 17:28:23 -         Scatter(
2018-09-10 17:28:23 -             x = x,
2018-09-10 17:28:23 -             y = error,
2018-09-10 17:28:23 -             name = "Теоретическая погрешность"
2018-09-10 17:28:23 -         )
2018-09-10 17:28:23 -     [trace1]
2018-09-10 17:28:23 -     |> Chart.Plot
2018-09-10 17:28:23 -     |> Chart.WithTitle "График теоретичекой погрешности"
2018-09-10 17:28:23 -     |> Chart.WithWidth 1000
2018-09-10 17:28:23 -     |> Chart.WithHeight 700
2018-09-10 17:28:23 - plotTeoreticalError()
2018-09-10 17:28:23 - The value or constructor 'c' is not defined.
2018-09-10 17:28:23 - The value or constructor 'd' is not defined. Maybe you want one of the following:
2018-09-10 17:28:23 -    id
2018-09-10 17:28:23 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-09-10 17:28:23 -    i
2018-09-10 17:28:23 -    x
2018-09-10 17:28:23 - The value or constructor 'NewtonPolynomialCheb' is not defined.
2018-09-10 17:28:23 - The value or constructor 'Scatter' is not defined.
2018-09-10 17:28:23 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-10 17:28:23 -    char
2018-09-10 17:28:23 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-10 17:28:23 -    char
2018-09-10 17:28:23 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-10 17:28:23 -    char
2018-09-10 17:28:23 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-10 17:28:23 -    char
2018-09-10 17:29:00 - #load "XPlot.Plotly.Paket.fsx"
2018-09-10 17:29:00 - #load "XPlot.Plotly.fsx"
2018-09-10 17:29:00 - open XPlot.Plotly
2018-09-10 17:29:00 - open System
2018-09-10 17:29:06 - let N = 5.
2018-09-10 17:29:06 - let f (x : float) = x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-10 17:29:06 - let x0 = - (N % 3.)
2018-09-10 17:29:06 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-10 17:29:06 - let l k x = 
2018-09-10 17:29:06 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-10 17:29:06 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-10 17:29:06 - let plotLagrange () =
2018-09-10 17:29:06 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 17:29:06 -     let trace1 =
2018-09-10 17:29:06 -         let y = x |> List.map f
2018-09-10 17:29:06 -         Scatter(
2018-09-10 17:29:06 -             x = x,
2018-09-10 17:29:06 -             y = y,
2018-09-10 17:29:06 -             name = "Исходная функция"
2018-09-10 17:29:06 -         )
2018-09-10 17:29:06 -     let trace2 =
2018-09-10 17:29:06 -         let y = x |> List.map LagrangePolynomial
2018-09-10 17:29:06 -         Scatter(
2018-09-10 17:29:06 -             x = x,
2018-09-10 17:29:06 -             y = y,
2018-09-10 17:29:06 -             name = "Полином Лагранжа"
2018-09-10 17:29:06 -         )
2018-09-10 17:29:06 -         
2018-09-10 17:29:06 -     [trace1; trace2]
2018-09-10 17:29:06 -     |> Chart.Plot
2018-09-10 17:29:06 -     |> Chart.WithWidth 1000
2018-09-10 17:29:06 -     |> Chart.WithHeight 700
2018-09-10 17:29:06 - plotLagrange()
2018-09-10 17:29:07 - let NewtonPolynomial (points : float list) x = 
2018-09-10 17:29:07 -     let dividedDifferencesTable = 
2018-09-10 17:29:07 -         let rec computeCells y acc = 
2018-09-10 17:29:07 -             let computeCol n (prevCol : float list) =
2018-09-10 17:29:07 -                 let rec computeColInternal x acc =
2018-09-10 17:29:07 -                     match x with
2018-09-10 17:29:07 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-10 17:29:07 -                     | _ -> acc
2018-09-10 17:29:07 -                 computeColInternal (points.Length - n) [] 
2018-09-10 17:29:07 -             match y with
2018-09-10 17:29:07 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-10 17:29:07 -             |_ -> List.rev acc
2018-09-10 17:29:07 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-10 17:29:07 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-10 17:29:07 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-10 17:29:07 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-10 17:29:07 - let NewtonPolynomialPoints = NewtonPolynomial points
2018-09-10 17:29:07 - let plotNewton () =
2018-09-10 17:29:07 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 17:29:07 -     let trace1 =
2018-09-10 17:29:07 -         let y = x |> List.map f
2018-09-10 17:29:07 -         Scatter(
2018-09-10 17:29:07 -             x = x,
2018-09-10 17:29:07 -             y = y,
2018-09-10 17:29:07 -             name = "Исходная функция"
2018-09-10 17:29:07 -         )
2018-09-10 17:29:07 -     let trace2 =
2018-09-10 17:29:07 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-10 17:29:07 -         Scatter(
2018-09-10 17:29:07 -             x = x,
2018-09-10 17:29:07 -             y = y,
2018-09-10 17:29:07 -             name = "Полином Ньютона"
2018-09-10 17:29:07 -         )
2018-09-10 17:29:07 -     [trace1; trace2]
2018-09-10 17:29:07 -     |> Chart.Plot
2018-09-10 17:29:07 -     |> Chart.WithWidth 1000
2018-09-10 17:29:07 -     |> Chart.WithHeight 700
2018-09-10 17:29:07 - plotNewton()
2018-09-10 17:29:07 - let plotError () =
2018-09-10 17:29:07 -     let x = [-2. .. 0.01 .. 2.]
2018-09-10 17:29:07 -     let trace1 =
2018-09-10 17:29:07 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-10 17:29:07 -         Scatter(
2018-09-10 17:29:07 -             x = x,
2018-09-10 17:29:07 -             y = error
2018-09-10 17:29:07 -         )
2018-09-10 17:29:07 -     trace1
2018-09-10 17:29:07 -     |> Chart.Plot
2018-09-10 17:29:07 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-10 17:29:07 -     |> Chart.WithWidth 1000
2018-09-10 17:29:07 -     |> Chart.WithHeight 700
2018-09-10 17:29:07 - plotError()
2018-09-10 17:29:07 - let c = -2.
2018-09-10 17:29:07 - let d = 2.
2018-09-10 17:29:07 - let n = 5.
2018-09-10 17:29:07 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-10 17:29:07 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-10 17:29:07 - let NewtonPolynomialCheb = NewtonPolynomial ChebT
2018-09-10 17:29:07 - let plotNewtonCheb () =
2018-09-10 17:29:07 -     let x = [c .. 0.01 .. d]
2018-09-10 17:29:07 -     let trace1 =
2018-09-10 17:29:07 -         let y = x |> List.map f
2018-09-10 17:29:07 -         Scatter(
2018-09-10 17:29:07 -             x = x,
2018-09-10 17:29:07 -             y = y,
2018-09-10 17:29:07 -             name = "Исходная функция"
2018-09-10 17:29:07 -         )
2018-09-10 17:29:07 -     let trace2 =
2018-09-10 17:29:07 -         let y = x |> List.map NewtonPolynomialCheb
2018-09-10 17:29:07 -         Scatter(
2018-09-10 17:29:07 -             x = x,
2018-09-10 17:29:07 -             y = y,
2018-09-10 17:29:07 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-10 17:29:07 -         )
2018-09-10 17:29:07 -     let trace3 =
2018-09-10 17:29:07 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-10 17:29:07 -         Scatter(
2018-09-10 17:29:07 -             x = x,
2018-09-10 17:29:07 -             y = y,
2018-09-10 17:29:07 -             name = "Полином Ньютона на заданных узлах"
2018-09-10 17:29:07 -         )
2018-09-10 17:29:07 -     [trace1; trace2; trace3]
2018-09-10 17:29:07 -     |> Chart.Plot
2018-09-10 17:29:07 -     |> Chart.WithWidth 1000
2018-09-10 17:29:07 -     |> Chart.WithHeight 700
2018-09-10 17:29:07 - plotNewtonCheb()
2018-09-10 17:29:07 - let plotErrorCheb () =
2018-09-10 17:29:07 -     let x = [c .. 0.01 .. d]
2018-09-10 17:29:07 -     let trace1 =
2018-09-10 17:29:07 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-10 17:29:07 -         Scatter(
2018-09-10 17:29:07 -             x = x,
2018-09-10 17:29:07 -             y = error,
2018-09-10 17:29:07 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-10 17:29:07 -         )
2018-09-10 17:29:07 -     let trace2 =
2018-09-10 17:29:07 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-10 17:29:07 -         Scatter(
2018-09-10 17:29:07 -             x = x,
2018-09-10 17:29:07 -             y = error,
2018-09-10 17:29:07 -             name = "Абсолютная погрешность полинома на заданных узлах"
2018-09-10 17:29:07 -         )
2018-09-10 17:29:07 -     [trace1; trace2]
2018-09-10 17:29:07 -     |> Chart.Plot
2018-09-10 17:29:07 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских и на заданных узлах"
2018-09-10 17:29:07 -     |> Chart.WithWidth 1000
2018-09-10 17:29:07 -     |> Chart.WithHeight 700
2018-09-10 17:29:07 - plotErrorCheb()
2018-09-10 17:29:07 - let derivativeF x = 16. * exp(2. * x) * (2. * x + 5.) + 243. * cos (3. * x)
2018-09-10 17:29:07 - let maxDerivativeF = [c .. 0.01 .. d] |> List.map (fun x -> abs <| derivativeF x) |> List.max
2018-09-10 17:29:07 - let w x = points |> List.fold (fun acc k -> acc * (x - k)) 1.
2018-09-10 17:29:07 - let R x = maxDerivativeF / 120. * abs (w x)
2018-09-10 17:29:08 - let plotTeoreticalError () =
2018-09-10 17:29:08 -     let x = [c .. 0.01 .. d]
2018-09-10 17:29:08 -     let trace1 =
2018-09-10 17:29:08 -         let error = List.map R x
2018-09-10 17:29:08 -         Scatter(
2018-09-10 17:29:08 -             x = x,
2018-09-10 17:29:08 -             y = error,
2018-09-10 17:29:08 -             name = "Теоретическая погрешность"
2018-09-10 17:29:08 -         )
2018-09-10 17:29:08 -     [trace1]
2018-09-10 17:29:08 -     |> Chart.Plot
2018-09-10 17:29:08 -     |> Chart.WithTitle "График теоретичекой погрешности"
2018-09-10 17:29:08 -     |> Chart.WithWidth 1000
2018-09-10 17:29:08 -     |> Chart.WithHeight 700
2018-09-10 17:29:08 - plotTeoreticalError()
2018-09-11 12:29:16 - // include directory, this will be replaced by the kernel
2018-09-11 12:29:16 - #I "/home/nbuser/IfSharp/bin"
2018-09-11 12:29:16 - // load base dlls
2018-09-11 12:29:16 - #r "IfSharp.Kernel.dll"
2018-09-11 12:29:16 - #r "NetMQ.dll"
2018-09-11 12:29:16 - // open the global functions and methods
2018-09-11 12:29:16 - open IfSharp.Kernel
2018-09-11 12:29:16 - open IfSharp.Kernel.Globals
2018-09-11 12:29:25 - F# Interactive for F# 4.1
2018-09-11 12:29:25 - Freely distributed under the Apache 2.0 Open Source License
2018-09-11 12:29:25 - For help type #help;;
2018-09-11 12:29:25 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-11 12:29:25 -   seq []
2018-09-11 12:29:25 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-11 12:29:25 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-11 12:29:25 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-11 12:29:25 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-11 12:29:55 - #load "XPlot.Plotly.Paket.fsx"
2018-09-11 12:29:55 - #load "XPlot.Plotly.fsx"
2018-09-11 12:29:55 - open XPlot.Plotly
2018-09-11 12:29:55 - open System
2018-09-11 12:30:04 - let N = 5.
2018-09-11 12:30:04 - let f (x : float) = x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-11 12:30:04 - let x0 = - (N % 3.)
2018-09-11 12:30:04 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-11 12:30:04 - let l k x = 
2018-09-11 12:30:04 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-11 12:30:05 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-11 12:30:05 - let plotLagrange () =
2018-09-11 12:30:05 -     let x = [-2. .. 0.01 .. 2.]
2018-09-11 12:30:05 -     let trace1 =
2018-09-11 12:30:05 -         let y = x |> List.map f
2018-09-11 12:30:05 -         Scatter(
2018-09-11 12:30:05 -             x = x,
2018-09-11 12:30:05 -             y = y,
2018-09-11 12:30:05 -             name = "Исходная функция"
2018-09-11 12:30:05 -         )
2018-09-11 12:30:05 -     let trace2 =
2018-09-11 12:30:05 -         let y = x |> List.map LagrangePolynomial
2018-09-11 12:30:05 -         Scatter(
2018-09-11 12:30:05 -             x = x,
2018-09-11 12:30:05 -             y = y,
2018-09-11 12:30:05 -             name = "Полином Лагранжа"
2018-09-11 12:30:05 -         )
2018-09-11 12:30:05 -         
2018-09-11 12:30:05 -     [trace1; trace2]
2018-09-11 12:30:05 -     |> Chart.Plot
2018-09-11 12:30:05 -     |> Chart.WithWidth 1000
2018-09-11 12:30:05 -     |> Chart.WithHeight 700
2018-09-11 12:30:05 - plotLagrange()
2018-09-11 12:30:05 - let NewtonPolynomial (points : float list) x = 
2018-09-11 12:30:05 -     let dividedDifferencesTable = 
2018-09-11 12:30:05 -         let rec computeCells y acc = 
2018-09-11 12:30:05 -             let computeCol n (prevCol : float list) =
2018-09-11 12:30:05 -                 let rec computeColInternal x acc =
2018-09-11 12:30:05 -                     match x with
2018-09-11 12:30:05 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-11 12:30:05 -                     | _ -> acc
2018-09-11 12:30:05 -                 computeColInternal (points.Length - n) [] 
2018-09-11 12:30:05 -             match y with
2018-09-11 12:30:05 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-11 12:30:05 -             |_ -> List.rev acc
2018-09-11 12:30:05 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-11 12:30:05 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-11 12:30:05 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-11 12:30:05 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-11 12:30:05 - let NewtonPolynomialPoints = NewtonPolynomial points
2018-09-11 12:30:05 - let plotNewton () =
2018-09-11 12:30:05 -     let x = [-2. .. 0.01 .. 2.]
2018-09-11 12:30:05 -     let trace1 =
2018-09-11 12:30:05 -         let y = x |> List.map f
2018-09-11 12:30:05 -         Scatter(
2018-09-11 12:30:05 -             x = x,
2018-09-11 12:30:05 -             y = y,
2018-09-11 12:30:05 -             name = "Исходная функция"
2018-09-11 12:30:05 -         )
2018-09-11 12:30:05 -     let trace2 =
2018-09-11 12:30:05 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-11 12:30:05 -         Scatter(
2018-09-11 12:30:05 -             x = x,
2018-09-11 12:30:05 -             y = y,
2018-09-11 12:30:05 -             name = "Полином Ньютона"
2018-09-11 12:30:05 -         )
2018-09-11 12:30:05 -     [trace1; trace2]
2018-09-11 12:30:05 -     |> Chart.Plot
2018-09-11 12:30:05 -     |> Chart.WithWidth 1000
2018-09-11 12:30:05 -     |> Chart.WithHeight 700
2018-09-11 12:30:05 - plotNewton()
2018-09-11 12:30:05 - let plotError () =
2018-09-11 12:30:05 -     let x = [-2. .. 0.01 .. 2.]
2018-09-11 12:30:05 -     let trace1 =
2018-09-11 12:30:05 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 12:30:05 -         Scatter(
2018-09-11 12:30:05 -             x = x,
2018-09-11 12:30:05 -             y = error
2018-09-11 12:30:05 -         )
2018-09-11 12:30:05 -     trace1
2018-09-11 12:30:05 -     |> Chart.Plot
2018-09-11 12:30:05 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-11 12:30:05 -     |> Chart.WithWidth 1000
2018-09-11 12:30:05 -     |> Chart.WithHeight 700
2018-09-11 12:30:05 - plotError()
2018-09-11 12:30:05 - let c = -2.
2018-09-11 12:30:05 - let d = 2.
2018-09-11 12:30:05 - let n = 5.
2018-09-11 12:30:05 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-11 12:30:05 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-11 12:30:05 - let NewtonPolynomialCheb = NewtonPolynomial ChebT
2018-09-11 12:30:05 - let plotNewtonCheb () =
2018-09-11 12:30:05 -     let x = [c .. 0.01 .. d]
2018-09-11 12:30:05 -     let trace1 =
2018-09-11 12:30:05 -         let y = x |> List.map f
2018-09-11 12:30:05 -         Scatter(
2018-09-11 12:30:05 -             x = x,
2018-09-11 12:30:05 -             y = y,
2018-09-11 12:30:05 -             name = "Исходная функция"
2018-09-11 12:30:05 -         )
2018-09-11 12:30:05 -     let trace2 =
2018-09-11 12:30:05 -         let y = x |> List.map NewtonPolynomialCheb
2018-09-11 12:30:05 -         Scatter(
2018-09-11 12:30:05 -             x = x,
2018-09-11 12:30:05 -             y = y,
2018-09-11 12:30:05 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-11 12:30:05 -         )
2018-09-11 12:30:05 -     let trace3 =
2018-09-11 12:30:05 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-11 12:30:05 -         Scatter(
2018-09-11 12:30:05 -             x = x,
2018-09-11 12:30:05 -             y = y,
2018-09-11 12:30:05 -             name = "Полином Ньютона на заданных узлах"
2018-09-11 12:30:05 -         )
2018-09-11 12:30:05 -     [trace1; trace2; trace3]
2018-09-11 12:30:05 -     |> Chart.Plot
2018-09-11 12:30:05 -     |> Chart.WithWidth 1000
2018-09-11 12:30:05 -     |> Chart.WithHeight 700
2018-09-11 12:30:05 - plotNewtonCheb()
2018-09-11 12:30:05 - let plotErrorCheb () =
2018-09-11 12:30:05 -     let x = [c .. 0.01 .. d]
2018-09-11 12:30:05 -     let trace1 =
2018-09-11 12:30:05 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-11 12:30:05 -         Scatter(
2018-09-11 12:30:05 -             x = x,
2018-09-11 12:30:05 -             y = error,
2018-09-11 12:30:05 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-11 12:30:05 -         )
2018-09-11 12:30:05 -     let trace2 =
2018-09-11 12:30:05 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 12:30:05 -         Scatter(
2018-09-11 12:30:05 -             x = x,
2018-09-11 12:30:05 -             y = error,
2018-09-11 12:30:05 -             name = "Абсолютная погрешность полинома на заданных узлах"
2018-09-11 12:30:05 -         )
2018-09-11 12:30:05 -     [trace1; trace2]
2018-09-11 12:30:05 -     |> Chart.Plot
2018-09-11 12:30:05 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских и на заданных узлах"
2018-09-11 12:30:05 -     |> Chart.WithWidth 1000
2018-09-11 12:30:05 -     |> Chart.WithHeight 700
2018-09-11 12:30:05 - plotErrorCheb()
2018-09-11 12:30:06 - let derivativeF x = 16. * exp(2. * x) * (2. * x + 5.) + 243. * cos (3. * x)
2018-09-11 12:30:06 - let maxDerivativeF = [c .. 0.01 .. d] |> List.map (fun x -> abs <| derivativeF x) |> List.max
2018-09-11 12:30:06 - let w x = points |> List.fold (fun acc k -> acc * (x - k)) 1.
2018-09-11 12:30:06 - let R x = maxDerivativeF / 120. * abs (w x)
2018-09-11 12:30:06 - let plotTeoreticalError () =
2018-09-11 12:30:06 -     let x = [c .. 0.01 .. d]
2018-09-11 12:30:06 -     let trace1 =
2018-09-11 12:30:06 -         let error = List.map R x
2018-09-11 12:30:06 -         Scatter(
2018-09-11 12:30:06 -             x = x,
2018-09-11 12:30:06 -             y = error,
2018-09-11 12:30:06 -             name = "Теоретическая погрешность"
2018-09-11 12:30:06 -         )
2018-09-11 12:30:06 -     [trace1]
2018-09-11 12:30:06 -     |> Chart.Plot
2018-09-11 12:30:06 -     |> Chart.WithTitle "График теоретичекой погрешности"
2018-09-11 12:30:06 -     |> Chart.WithWidth 1000
2018-09-11 12:30:06 -     |> Chart.WithHeight 700
2018-09-11 12:30:06 - plotTeoreticalError()
2018-09-11 12:31:10 - let plotTeoreticalError () =
2018-09-11 12:31:10 -     let x = [c .. 0.01 .. d]
2018-09-11 12:31:10 -     let trace1 =
2018-09-11 12:31:10 -         let error = List.map R x
2018-09-11 12:31:10 -         Scatter(
2018-09-11 12:31:10 -             x = x,
2018-09-11 12:31:10 -             y = error,
2018-09-11 12:31:10 -             name = "Теоретическая погрешность"
2018-09-11 12:31:10 -         )
2018-09-11 12:31:10 -     let trace2 =
2018-09-11 12:31:10 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-11 12:31:10 -         Scatter(
2018-09-11 12:31:10 -             x = x,
2018-09-11 12:31:10 -             y = error,
2018-09-11 12:31:10 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-11 12:31:10 -         )
2018-09-11 12:31:10 -     let trace3 =
2018-09-11 12:31:10 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 12:31:10 -         Scatter(
2018-09-11 12:31:10 -             x = x,
2018-09-11 12:31:10 -             y = error,
2018-09-11 12:31:10 -             name = "Абсолютная погрешность полинома на заданных узлах"
2018-09-11 12:31:10 -         )
2018-09-11 12:31:10 -     [trace1; trace2; trace3]
2018-09-11 12:31:10 -     |> Chart.Plot
2018-09-11 12:31:10 -     |> Chart.WithTitle "График теоретичекой погрешности"
2018-09-11 12:31:10 -     |> Chart.WithWidth 1000
2018-09-11 12:31:10 -     |> Chart.WithHeight 700
2018-09-11 12:31:10 - plotTeoreticalError()
2018-09-11 13:11:59 - let c = -2.
2018-09-11 13:11:59 - let d = 2.
2018-09-11 13:11:59 - let n = 5.
2018-09-11 13:11:59 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-11 13:11:59 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-11 13:11:59 - let NewtonPolynomialCheb = NewtonPolynomial ChebT
2018-09-11 13:11:59 - ChebX
2018-09-11 13:30:57 - let plotError () =
2018-09-11 13:30:57 -     let x = [-2. .. 0.01 .. -1.5]
2018-09-11 13:30:57 -     let trace1 =
2018-09-11 13:30:57 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:30:57 -         Scatter(
2018-09-11 13:30:57 -             x = x,
2018-09-11 13:30:57 -             y = error
2018-09-11 13:30:57 -         )
2018-09-11 13:30:57 -     trace1
2018-09-11 13:30:57 -     |> Chart.Plot
2018-09-11 13:30:57 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-11 13:30:57 -     |> Chart.WithWidth 1000
2018-09-11 13:30:57 -     |> Chart.WithHeight 700
2018-09-11 13:30:57 - plotError()
2018-09-11 13:34:28 - let plotError () =
2018-09-11 13:34:28 -     let x = [-2. .. 0.01 .. -1.5]
2018-09-11 13:34:28 -     let trace1 =
2018-09-11 13:34:28 -         let error = List.map (fun i -> abs (LagrangePolynomial i - (NewtonPolynomialPoints i))) x
2018-09-11 13:34:28 -         Scatter(
2018-09-11 13:34:28 -             x = x,
2018-09-11 13:34:28 -             y = error
2018-09-11 13:34:28 -         )
2018-09-11 13:34:28 -     trace1
2018-09-11 13:34:28 -     |> Chart.Plot
2018-09-11 13:34:28 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-11 13:34:28 -     |> Chart.WithWidth 1000
2018-09-11 13:34:28 -     |> Chart.WithHeight 700
2018-09-11 13:34:28 - plotError()
2018-09-11 13:35:01 - let c = -2.
2018-09-11 13:35:01 - let d = -1.5.
2018-09-11 13:35:01 - let n = 5.
2018-09-11 13:35:01 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-11 13:35:01 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-11 13:35:01 - let NewtonPolynomialCheb = NewtonPolynomial ChebT
2018-09-11 13:35:01 - ChebX
2018-09-11 13:35:01 - Missing qualification after '.'
2018-09-11 13:35:16 - #load "XPlot.Plotly.Paket.fsx"
2018-09-11 13:35:16 - #load "XPlot.Plotly.fsx"
2018-09-11 13:35:16 - open XPlot.Plotly
2018-09-11 13:35:16 - open System
2018-09-11 13:35:20 - let N = 5.
2018-09-11 13:35:20 - let f (x : float) = x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-11 13:35:20 - let x0 = - (N % 3.)
2018-09-11 13:35:20 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-11 13:35:20 - let l k x = 
2018-09-11 13:35:20 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-11 13:35:20 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-11 13:35:20 - let plotLagrange () =
2018-09-11 13:35:20 -     let x = [-2. .. 0.01 .. 2.]
2018-09-11 13:35:20 -     let trace1 =
2018-09-11 13:35:20 -         let y = x |> List.map f
2018-09-11 13:35:20 -         Scatter(
2018-09-11 13:35:20 -             x = x,
2018-09-11 13:35:20 -             y = y,
2018-09-11 13:35:20 -             name = "Исходная функция"
2018-09-11 13:35:20 -         )
2018-09-11 13:35:20 -     let trace2 =
2018-09-11 13:35:20 -         let y = x |> List.map LagrangePolynomial
2018-09-11 13:35:20 -         Scatter(
2018-09-11 13:35:20 -             x = x,
2018-09-11 13:35:20 -             y = y,
2018-09-11 13:35:20 -             name = "Полином Лагранжа"
2018-09-11 13:35:20 -         )
2018-09-11 13:35:20 -         
2018-09-11 13:35:20 -     [trace1; trace2]
2018-09-11 13:35:20 -     |> Chart.Plot
2018-09-11 13:35:20 -     |> Chart.WithWidth 1000
2018-09-11 13:35:20 -     |> Chart.WithHeight 700
2018-09-11 13:35:20 - plotLagrange()
2018-09-11 13:35:20 - let NewtonPolynomial (points : float list) x = 
2018-09-11 13:35:20 -     let dividedDifferencesTable = 
2018-09-11 13:35:20 -         let rec computeCells y acc = 
2018-09-11 13:35:20 -             let computeCol n (prevCol : float list) =
2018-09-11 13:35:20 -                 let rec computeColInternal x acc =
2018-09-11 13:35:20 -                     match x with
2018-09-11 13:35:20 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-11 13:35:20 -                     | _ -> acc
2018-09-11 13:35:20 -                 computeColInternal (points.Length - n) [] 
2018-09-11 13:35:20 -             match y with
2018-09-11 13:35:20 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-11 13:35:20 -             |_ -> List.rev acc
2018-09-11 13:35:20 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-11 13:35:20 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-11 13:35:20 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-11 13:35:20 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-11 13:35:20 - let NewtonPolynomialPoints = NewtonPolynomial points
2018-09-11 13:35:20 - let plotNewton () =
2018-09-11 13:35:20 -     let x = [-2. .. 0.01 .. 2.]
2018-09-11 13:35:20 -     let trace1 =
2018-09-11 13:35:20 -         let y = x |> List.map f
2018-09-11 13:35:20 -         Scatter(
2018-09-11 13:35:20 -             x = x,
2018-09-11 13:35:20 -             y = y,
2018-09-11 13:35:20 -             name = "Исходная функция"
2018-09-11 13:35:20 -         )
2018-09-11 13:35:20 -     let trace2 =
2018-09-11 13:35:20 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-11 13:35:20 -         Scatter(
2018-09-11 13:35:20 -             x = x,
2018-09-11 13:35:20 -             y = y,
2018-09-11 13:35:20 -             name = "Полином Ньютона"
2018-09-11 13:35:20 -         )
2018-09-11 13:35:20 -     [trace1; trace2]
2018-09-11 13:35:20 -     |> Chart.Plot
2018-09-11 13:35:20 -     |> Chart.WithWidth 1000
2018-09-11 13:35:20 -     |> Chart.WithHeight 700
2018-09-11 13:35:20 - plotNewton()
2018-09-11 13:35:20 - let plotError () =
2018-09-11 13:35:20 -     let x = [-2. .. 0.01 .. -1.5]
2018-09-11 13:35:20 -     let trace1 =
2018-09-11 13:35:20 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:35:20 -         Scatter(
2018-09-11 13:35:20 -             x = x,
2018-09-11 13:35:20 -             y = error
2018-09-11 13:35:20 -         )
2018-09-11 13:35:20 -     trace1
2018-09-11 13:35:20 -     |> Chart.Plot
2018-09-11 13:35:20 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-11 13:35:20 -     |> Chart.WithWidth 1000
2018-09-11 13:35:20 -     |> Chart.WithHeight 700
2018-09-11 13:35:20 - plotError()
2018-09-11 13:35:21 - let plotError () =
2018-09-11 13:35:21 -     let x = [-2. .. 0.01 .. -1.5]
2018-09-11 13:35:21 -     let trace1 =
2018-09-11 13:35:21 -         let error = List.map (fun i -> abs (LagrangePolynomial i - (NewtonPolynomialPoints i))) x
2018-09-11 13:35:21 -         Scatter(
2018-09-11 13:35:21 -             x = x,
2018-09-11 13:35:21 -             y = error
2018-09-11 13:35:21 -         )
2018-09-11 13:35:21 -     trace1
2018-09-11 13:35:21 -     |> Chart.Plot
2018-09-11 13:35:21 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-11 13:35:21 -     |> Chart.WithWidth 1000
2018-09-11 13:35:21 -     |> Chart.WithHeight 700
2018-09-11 13:35:21 - plotError()
2018-09-11 13:35:21 - let c = -2.
2018-09-11 13:35:21 - let d = -1.5.
2018-09-11 13:35:21 - let n = 5.
2018-09-11 13:35:21 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-11 13:35:21 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-11 13:35:21 - let NewtonPolynomialCheb = NewtonPolynomial ChebT
2018-09-11 13:35:21 - ChebX
2018-09-11 13:35:21 - Missing qualification after '.'
2018-09-11 13:35:21 - let plotNewtonCheb () =
2018-09-11 13:35:21 -     let x = [c .. 0.01 .. d]
2018-09-11 13:35:21 -     let trace1 =
2018-09-11 13:35:21 -         let y = x |> List.map f
2018-09-11 13:35:21 -         Scatter(
2018-09-11 13:35:21 -             x = x,
2018-09-11 13:35:21 -             y = y,
2018-09-11 13:35:21 -             name = "Исходная функция"
2018-09-11 13:35:21 -         )
2018-09-11 13:35:21 -     let trace2 =
2018-09-11 13:35:21 -         let y = x |> List.map NewtonPolynomialCheb
2018-09-11 13:35:21 -         Scatter(
2018-09-11 13:35:21 -             x = x,
2018-09-11 13:35:21 -             y = y,
2018-09-11 13:35:21 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-11 13:35:21 -         )
2018-09-11 13:35:21 -     let trace3 =
2018-09-11 13:35:21 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-11 13:35:21 -         Scatter(
2018-09-11 13:35:21 -             x = x,
2018-09-11 13:35:21 -             y = y,
2018-09-11 13:35:21 -             name = "Полином Ньютона на заданных узлах"
2018-09-11 13:35:21 -         )
2018-09-11 13:35:21 -     [trace1; trace2; trace3]
2018-09-11 13:35:21 -     |> Chart.Plot
2018-09-11 13:35:21 -     |> Chart.WithWidth 1000
2018-09-11 13:35:21 -     |> Chart.WithHeight 700
2018-09-11 13:35:21 - plotNewtonCheb()
2018-09-11 13:35:21 - let plotErrorCheb () =
2018-09-11 13:35:21 -     let x = [c .. 0.01 .. d]
2018-09-11 13:35:21 -     let trace1 =
2018-09-11 13:35:21 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-11 13:35:21 -         Scatter(
2018-09-11 13:35:21 -             x = x,
2018-09-11 13:35:21 -             y = error,
2018-09-11 13:35:21 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-11 13:35:21 -         )
2018-09-11 13:35:21 -     let trace2 =
2018-09-11 13:35:21 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:35:21 -         Scatter(
2018-09-11 13:35:21 -             x = x,
2018-09-11 13:35:21 -             y = error,
2018-09-11 13:35:21 -             name = "Абсолютная погрешность полинома на заданных узлах"
2018-09-11 13:35:21 -         )
2018-09-11 13:35:21 -     [trace1; trace2]
2018-09-11 13:35:21 -     |> Chart.Plot
2018-09-11 13:35:21 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских и на заданных узлах"
2018-09-11 13:35:21 -     |> Chart.WithWidth 1000
2018-09-11 13:35:21 -     |> Chart.WithHeight 700
2018-09-11 13:35:21 - plotErrorCheb()
2018-09-11 13:35:21 - let derivativeF x = 16. * exp(2. * x) * (2. * x + 5.) + 243. * cos (3. * x)
2018-09-11 13:35:21 - let maxDerivativeF = [c .. 0.01 .. d] |> List.map (fun x -> abs <| derivativeF x) |> List.max
2018-09-11 13:35:21 - let w x = points |> List.fold (fun acc k -> acc * (x - k)) 1.
2018-09-11 13:35:21 - let R x = maxDerivativeF / 120. * abs (w x)
2018-09-11 13:35:21 - let plotTeoreticalError () =
2018-09-11 13:35:21 -     let x = [c .. 0.01 .. d]
2018-09-11 13:35:21 -     let trace1 =
2018-09-11 13:35:21 -         let error = List.map R x
2018-09-11 13:35:21 -         Scatter(
2018-09-11 13:35:21 -             x = x,
2018-09-11 13:35:21 -             y = error,
2018-09-11 13:35:21 -             name = "Теоретическая погрешность"
2018-09-11 13:35:21 -         )
2018-09-11 13:35:21 -     let trace2 =
2018-09-11 13:35:21 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-11 13:35:21 -         Scatter(
2018-09-11 13:35:21 -             x = x,
2018-09-11 13:35:21 -             y = error,
2018-09-11 13:35:21 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-11 13:35:21 -         )
2018-09-11 13:35:21 -     let trace3 =
2018-09-11 13:35:21 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:35:21 -         Scatter(
2018-09-11 13:35:21 -             x = x,
2018-09-11 13:35:21 -             y = error,
2018-09-11 13:35:21 -             name = "Абсолютная погрешность полинома на заданных узлах"
2018-09-11 13:35:21 -         )
2018-09-11 13:35:21 -     [trace1; trace2; trace3]
2018-09-11 13:35:21 -     |> Chart.Plot
2018-09-11 13:35:21 -     |> Chart.WithTitle "График теоретичекой погрешности"
2018-09-11 13:35:21 -     |> Chart.WithWidth 1000
2018-09-11 13:35:21 -     |> Chart.WithHeight 700
2018-09-11 13:35:21 - plotTeoreticalError()
2018-09-11 13:35:44 - let c = -2.
2018-09-11 13:35:44 - let d = -1.5
2018-09-11 13:35:44 - let n = 5.
2018-09-11 13:35:44 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-11 13:35:44 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-11 13:35:44 - let NewtonPolynomialCheb = NewtonPolynomial ChebT
2018-09-11 13:35:44 - ChebX
2018-09-11 13:35:48 - let plotNewtonCheb () =
2018-09-11 13:35:48 -     let x = [c .. 0.01 .. d]
2018-09-11 13:35:48 -     let trace1 =
2018-09-11 13:35:48 -         let y = x |> List.map f
2018-09-11 13:35:48 -         Scatter(
2018-09-11 13:35:48 -             x = x,
2018-09-11 13:35:48 -             y = y,
2018-09-11 13:35:48 -             name = "Исходная функция"
2018-09-11 13:35:48 -         )
2018-09-11 13:35:48 -     let trace2 =
2018-09-11 13:35:48 -         let y = x |> List.map NewtonPolynomialCheb
2018-09-11 13:35:48 -         Scatter(
2018-09-11 13:35:48 -             x = x,
2018-09-11 13:35:48 -             y = y,
2018-09-11 13:35:48 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-11 13:35:48 -         )
2018-09-11 13:35:48 -     let trace3 =
2018-09-11 13:35:48 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-11 13:35:48 -         Scatter(
2018-09-11 13:35:48 -             x = x,
2018-09-11 13:35:48 -             y = y,
2018-09-11 13:35:48 -             name = "Полином Ньютона на заданных узлах"
2018-09-11 13:35:48 -         )
2018-09-11 13:35:48 -     [trace1; trace2; trace3]
2018-09-11 13:35:48 -     |> Chart.Plot
2018-09-11 13:35:48 -     |> Chart.WithWidth 1000
2018-09-11 13:35:48 -     |> Chart.WithHeight 700
2018-09-11 13:35:48 - plotNewtonCheb()
2018-09-11 13:36:17 - let plotErrorCheb () =
2018-09-11 13:36:17 -     let x = [c .. 0.01 .. d]
2018-09-11 13:36:17 -     let trace1 =
2018-09-11 13:36:17 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-11 13:36:17 -         Scatter(
2018-09-11 13:36:17 -             x = x,
2018-09-11 13:36:17 -             y = error,
2018-09-11 13:36:17 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-11 13:36:17 -         )
2018-09-11 13:36:17 -     let trace2 =
2018-09-11 13:36:17 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:36:17 -         Scatter(
2018-09-11 13:36:17 -             x = x,
2018-09-11 13:36:17 -             y = error,
2018-09-11 13:36:17 -             name = "Абсолютная погрешность полинома на заданных узлах"
2018-09-11 13:36:17 -         )
2018-09-11 13:36:17 -     [trace1; trace2]
2018-09-11 13:36:17 -     |> Chart.Plot
2018-09-11 13:36:17 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских и на заданных узлах"
2018-09-11 13:36:17 -     |> Chart.WithWidth 1000
2018-09-11 13:36:17 -     |> Chart.WithHeight 700
2018-09-11 13:36:17 - plotErrorCheb()
2018-09-11 13:37:06 - let derivativeF x = 16. * exp(2. * x) * (2. * x + 5.) + 243. * cos (3. * x)
2018-09-11 13:37:06 - let maxDerivativeF = [c .. 0.01 .. d] |> List.map (fun x -> abs <| derivativeF x) |> List.max
2018-09-11 13:37:06 - let w x = points |> List.fold (fun acc k -> acc * (x - k)) 1.
2018-09-11 13:37:06 - let R x = maxDerivativeF / 120. * abs (w x)
2018-09-11 13:37:10 - let plotTeoreticalError () =
2018-09-11 13:37:10 -     let x = [c .. 0.01 .. d]
2018-09-11 13:37:10 -     let trace1 =
2018-09-11 13:37:10 -         let error = List.map R x
2018-09-11 13:37:10 -         Scatter(
2018-09-11 13:37:10 -             x = x,
2018-09-11 13:37:10 -             y = error,
2018-09-11 13:37:10 -             name = "Теоретическая погрешность"
2018-09-11 13:37:10 -         )
2018-09-11 13:37:10 -     let trace2 =
2018-09-11 13:37:10 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-11 13:37:10 -         Scatter(
2018-09-11 13:37:10 -             x = x,
2018-09-11 13:37:10 -             y = error,
2018-09-11 13:37:10 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-11 13:37:10 -         )
2018-09-11 13:37:10 -     let trace3 =
2018-09-11 13:37:10 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:37:10 -         Scatter(
2018-09-11 13:37:10 -             x = x,
2018-09-11 13:37:10 -             y = error,
2018-09-11 13:37:10 -             name = "Абсолютная погрешность полинома на заданных узлах"
2018-09-11 13:37:10 -         )
2018-09-11 13:37:10 -     [trace1; trace2; trace3]
2018-09-11 13:37:10 -     |> Chart.Plot
2018-09-11 13:37:10 -     |> Chart.WithTitle "График теоретичекой погрешности"
2018-09-11 13:37:10 -     |> Chart.WithWidth 1000
2018-09-11 13:37:10 -     |> Chart.WithHeight 700
2018-09-11 13:37:10 - plotTeoreticalError()
2018-09-11 13:38:25 - let derivativeF x = 16. * exp(2. * x) * (2. * x + 5.) + 243. * cos (3. * x)
2018-09-11 13:38:25 - let maxDerivativeF = [c .. 0.01 .. d] |> List.map (fun x -> abs <| derivativeF x) |> List.max
2018-09-11 13:38:25 - let w x = ChebT |> List.fold (fun acc k -> acc * (x - k)) 1.
2018-09-11 13:38:25 - let R x = maxDerivativeF / 120. * abs (w x)
2018-09-11 13:38:26 - let plotTeoreticalError () =
2018-09-11 13:38:26 -     let x = [c .. 0.01 .. d]
2018-09-11 13:38:26 -     let trace1 =
2018-09-11 13:38:26 -         let error = List.map R x
2018-09-11 13:38:26 -         Scatter(
2018-09-11 13:38:26 -             x = x,
2018-09-11 13:38:26 -             y = error,
2018-09-11 13:38:26 -             name = "Теоретическая погрешность"
2018-09-11 13:38:26 -         )
2018-09-11 13:38:26 -     let trace2 =
2018-09-11 13:38:26 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-11 13:38:26 -         Scatter(
2018-09-11 13:38:26 -             x = x,
2018-09-11 13:38:26 -             y = error,
2018-09-11 13:38:26 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-11 13:38:26 -         )
2018-09-11 13:38:26 -     let trace3 =
2018-09-11 13:38:26 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:38:26 -         Scatter(
2018-09-11 13:38:26 -             x = x,
2018-09-11 13:38:26 -             y = error,
2018-09-11 13:38:26 -             name = "Абсолютная погрешность полинома на заданных узлах"
2018-09-11 13:38:26 -         )
2018-09-11 13:38:26 -     [trace1; trace2; trace3]
2018-09-11 13:38:26 -     |> Chart.Plot
2018-09-11 13:38:26 -     |> Chart.WithTitle "График теоретичекой погрешности"
2018-09-11 13:38:26 -     |> Chart.WithWidth 1000
2018-09-11 13:38:26 -     |> Chart.WithHeight 700
2018-09-11 13:38:26 - plotTeoreticalError()
2018-09-11 13:48:18 - #load "XPlot.Plotly.Paket.fsx"
2018-09-11 13:48:18 - #load "XPlot.Plotly.fsx"
2018-09-11 13:48:18 - open XPlot.Plotly
2018-09-11 13:48:18 - open System
2018-09-11 13:48:20 - let N = 5.
2018-09-11 13:48:20 - let f (x : float) = x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-11 13:48:20 - let x0 = - (N % 3.)
2018-09-11 13:48:20 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-11 13:48:20 - let l k x = 
2018-09-11 13:48:20 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-11 13:48:20 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-11 13:48:20 - let plotLagrange () =
2018-09-11 13:48:20 -     let x = [-2. .. 0.01 .. 2.]
2018-09-11 13:48:20 -     let trace1 =
2018-09-11 13:48:20 -         let y = x |> List.map f
2018-09-11 13:48:20 -         Scatter(
2018-09-11 13:48:20 -             x = x,
2018-09-11 13:48:20 -             y = y,
2018-09-11 13:48:20 -             name = "Исходная функция"
2018-09-11 13:48:20 -         )
2018-09-11 13:48:20 -     let trace2 =
2018-09-11 13:48:20 -         let y = x |> List.map LagrangePolynomial
2018-09-11 13:48:20 -         Scatter(
2018-09-11 13:48:20 -             x = x,
2018-09-11 13:48:20 -             y = y,
2018-09-11 13:48:20 -             name = "Полином Лагранжа"
2018-09-11 13:48:20 -         )
2018-09-11 13:48:20 -         
2018-09-11 13:48:20 -     [trace1; trace2]
2018-09-11 13:48:20 -     |> Chart.Plot
2018-09-11 13:48:20 -     |> Chart.WithWidth 1000
2018-09-11 13:48:20 -     |> Chart.WithHeight 700
2018-09-11 13:48:20 - plotLagrange()
2018-09-11 13:48:20 - let NewtonPolynomial (points : float list) x = 
2018-09-11 13:48:20 -     let dividedDifferencesTable = 
2018-09-11 13:48:20 -         let rec computeCells y acc = 
2018-09-11 13:48:20 -             let computeCol n (prevCol : float list) =
2018-09-11 13:48:20 -                 let rec computeColInternal x acc =
2018-09-11 13:48:20 -                     match x with
2018-09-11 13:48:20 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-11 13:48:20 -                     | _ -> acc
2018-09-11 13:48:20 -                 computeColInternal (points.Length - n) [] 
2018-09-11 13:48:20 -             match y with
2018-09-11 13:48:20 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-11 13:48:20 -             |_ -> List.rev acc
2018-09-11 13:48:20 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-11 13:48:20 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-11 13:48:20 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-11 13:48:20 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-11 13:48:20 - let NewtonPolynomialPoints = NewtonPolynomial points
2018-09-11 13:48:21 - let plotNewton () =
2018-09-11 13:48:21 -     let x = [-2. .. 0.01 .. 2.]
2018-09-11 13:48:21 -     let trace1 =
2018-09-11 13:48:21 -         let y = x |> List.map f
2018-09-11 13:48:21 -         Scatter(
2018-09-11 13:48:21 -             x = x,
2018-09-11 13:48:21 -             y = y,
2018-09-11 13:48:21 -             name = "Исходная функция"
2018-09-11 13:48:21 -         )
2018-09-11 13:48:21 -     let trace2 =
2018-09-11 13:48:21 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-11 13:48:21 -         Scatter(
2018-09-11 13:48:21 -             x = x,
2018-09-11 13:48:21 -             y = y,
2018-09-11 13:48:21 -             name = "Полином Ньютона"
2018-09-11 13:48:21 -         )
2018-09-11 13:48:21 -     [trace1; trace2]
2018-09-11 13:48:21 -     |> Chart.Plot
2018-09-11 13:48:21 -     |> Chart.WithWidth 1000
2018-09-11 13:48:21 -     |> Chart.WithHeight 700
2018-09-11 13:48:21 - plotNewton()
2018-09-11 13:48:21 - let plotError () =
2018-09-11 13:48:21 -     let x = [-2. .. 0.01 .. -1.5]
2018-09-11 13:48:21 -     let trace1 =
2018-09-11 13:48:21 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:48:21 -         Scatter(
2018-09-11 13:48:21 -             x = x,
2018-09-11 13:48:21 -             y = error
2018-09-11 13:48:21 -         )
2018-09-11 13:48:21 -     trace1
2018-09-11 13:48:21 -     |> Chart.Plot
2018-09-11 13:48:21 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-11 13:48:21 -     |> Chart.WithWidth 1000
2018-09-11 13:48:21 -     |> Chart.WithHeight 700
2018-09-11 13:48:21 - plotError()
2018-09-11 13:48:21 - let plotError () =
2018-09-11 13:48:21 -     let x = [-2. .. 0.01 .. -1.5]
2018-09-11 13:48:21 -     let trace1 =
2018-09-11 13:48:21 -         let error = List.map (fun i -> abs (LagrangePolynomial i - (NewtonPolynomialPoints i))) x
2018-09-11 13:48:21 -         Scatter(
2018-09-11 13:48:21 -             x = x,
2018-09-11 13:48:21 -             y = error
2018-09-11 13:48:21 -         )
2018-09-11 13:48:21 -     trace1
2018-09-11 13:48:21 -     |> Chart.Plot
2018-09-11 13:48:21 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-11 13:48:21 -     |> Chart.WithWidth 1000
2018-09-11 13:48:21 -     |> Chart.WithHeight 700
2018-09-11 13:48:21 - plotError()
2018-09-11 13:48:21 - let c = -2.
2018-09-11 13:48:21 - let d = -1.5
2018-09-11 13:48:21 - let n = 5.
2018-09-11 13:48:21 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-11 13:48:21 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-11 13:48:21 - let NewtonPolynomialCheb = NewtonPolynomial ChebT
2018-09-11 13:48:21 - ChebX
2018-09-11 13:48:21 - let plotNewtonCheb () =
2018-09-11 13:48:21 -     let x = [c .. 0.01 .. d]
2018-09-11 13:48:21 -     let trace1 =
2018-09-11 13:48:21 -         let y = x |> List.map f
2018-09-11 13:48:21 -         Scatter(
2018-09-11 13:48:21 -             x = x,
2018-09-11 13:48:21 -             y = y,
2018-09-11 13:48:21 -             name = "Исходная функция"
2018-09-11 13:48:21 -         )
2018-09-11 13:48:21 -     let trace2 =
2018-09-11 13:48:21 -         let y = x |> List.map NewtonPolynomialCheb
2018-09-11 13:48:21 -         Scatter(
2018-09-11 13:48:21 -             x = x,
2018-09-11 13:48:21 -             y = y,
2018-09-11 13:48:21 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-11 13:48:21 -         )
2018-09-11 13:48:21 -     let trace3 =
2018-09-11 13:48:21 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-11 13:48:21 -         Scatter(
2018-09-11 13:48:21 -             x = x,
2018-09-11 13:48:21 -             y = y,
2018-09-11 13:48:21 -             name = "Полином Ньютона на заданных узлах"
2018-09-11 13:48:21 -         )
2018-09-11 13:48:21 -     [trace1; trace2; trace3]
2018-09-11 13:48:21 -     |> Chart.Plot
2018-09-11 13:48:21 -     |> Chart.WithWidth 1000
2018-09-11 13:48:21 -     |> Chart.WithHeight 700
2018-09-11 13:48:21 - plotNewtonCheb()
2018-09-11 13:48:21 - let plotErrorCheb () =
2018-09-11 13:48:21 -     let x = [c .. 0.01 .. d]
2018-09-11 13:48:21 -     let trace1 =
2018-09-11 13:48:21 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-11 13:48:21 -         Scatter(
2018-09-11 13:48:21 -             x = x,
2018-09-11 13:48:21 -             y = error,
2018-09-11 13:48:21 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-11 13:48:21 -         )
2018-09-11 13:48:21 -     let trace2 =
2018-09-11 13:48:21 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:48:21 -         Scatter(
2018-09-11 13:48:21 -             x = x,
2018-09-11 13:48:21 -             y = error,
2018-09-11 13:48:21 -             name = "Абсолютная погрешность полинома на заданных узлах"
2018-09-11 13:48:21 -         )
2018-09-11 13:48:21 -     [trace1; trace2]
2018-09-11 13:48:21 -     |> Chart.Plot
2018-09-11 13:48:21 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских и на заданных узлах"
2018-09-11 13:48:21 -     |> Chart.WithWidth 1000
2018-09-11 13:48:21 -     |> Chart.WithHeight 700
2018-09-11 13:48:21 - plotErrorCheb()
2018-09-11 13:48:21 - let derivativeF x = 16. * exp(2. * x) * (2. * x + 5.) + 243. * cos (3. * x)
2018-09-11 13:48:21 - let maxDerivativeF = [c .. 0.01 .. d] |> List.map (fun x -> abs <| derivativeF x) |> List.max
2018-09-11 13:48:21 - let w p x = p |> List.fold (fun acc k -> acc * (x - k)) 1.
2018-09-11 13:48:21 - let R w x = maxDerivativeF / 120. * abs (w x)
2018-09-11 13:48:21 - let ROurPoints = R <| w points
2018-09-11 13:48:21 - let RChebPoints = R <| w ChebT
2018-09-11 13:48:21 - let plotOurTeoreticalError () =
2018-09-11 13:48:21 -     let x = [c .. 0.01 .. d]
2018-09-11 13:48:21 -     let trace1 =
2018-09-11 13:48:21 -         let error = List.map ROurPoints x
2018-09-11 13:48:21 -         Scatter(
2018-09-11 13:48:21 -             x = x,
2018-09-11 13:48:21 -             y = error,
2018-09-11 13:48:21 -             name = "Теоретическая погрешность на наших узлах"
2018-09-11 13:48:21 -         )
2018-09-11 13:48:21 -     let trace2 =
2018-09-11 13:48:21 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:48:21 -         Scatter(
2018-09-11 13:48:21 -             x = x,
2018-09-11 13:48:21 -             y = error,
2018-09-11 13:48:21 -             name = "Абсолютная погрешность полинома на наших узлах"
2018-09-11 13:48:21 -         )
2018-09-11 13:48:21 -     [trace1; trace2]
2018-09-11 13:48:21 -     |> Chart.Plot
2018-09-11 13:48:21 -     |> Chart.WithTitle "График теоретичекой погрешности"
2018-09-11 13:48:21 -     |> Chart.WithWidth 1000
2018-09-11 13:48:21 -     |> Chart.WithHeight 700
2018-09-11 13:48:21 - plotOurTeoreticalError()
2018-09-11 13:48:22 - let plotChebTeoreticalError () =
2018-09-11 13:48:22 -     let x = [c .. 0.01 .. d]
2018-09-11 13:48:22 -     let trace1 =
2018-09-11 13:48:22 -         let error = List.map RChebPoints x
2018-09-11 13:48:22 -         Scatter(
2018-09-11 13:48:22 -             x = x,
2018-09-11 13:48:22 -             y = error,
2018-09-11 13:48:22 -             name = "Теоретическая погрешность на Чебышевских узлах"
2018-09-11 13:48:22 -         )
2018-09-11 13:48:22 -     let trace2 =
2018-09-11 13:48:22 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-11 13:48:22 -         Scatter(
2018-09-11 13:48:22 -             x = x,
2018-09-11 13:48:22 -             y = error,
2018-09-11 13:48:22 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-11 13:48:22 -         )
2018-09-11 13:48:22 -     [trace1; trace2]
2018-09-11 13:48:22 -     |> Chart.Plot
2018-09-11 13:48:22 -     |> Chart.WithTitle "График теоретичекой погрешности"
2018-09-11 13:48:22 -     |> Chart.WithWidth 1000
2018-09-11 13:48:22 -     |> Chart.WithHeight 700
2018-09-11 13:48:22 - plotChebTeoreticalError()
2018-09-11 13:49:07 - #load "XPlot.Plotly.Paket.fsx"
2018-09-11 13:49:07 - #load "XPlot.Plotly.fsx"
2018-09-11 13:49:07 - open XPlot.Plotly
2018-09-11 13:49:07 - open System
2018-09-11 13:49:08 - let N = 5.
2018-09-11 13:49:08 - let f (x : float) = x * Math.Exp(x * (N % 2. + 1.)) + Math.Sin(x / 2. * (N % 7. + 1.))
2018-09-11 13:49:08 - let x0 = - (N % 3.)
2018-09-11 13:49:08 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-11 13:49:08 - let l k x = 
2018-09-11 13:49:08 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-11 13:49:08 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-11 13:49:08 - let plotLagrange () =
2018-09-11 13:49:08 -     let x = [-2. .. 0.01 .. 2.]
2018-09-11 13:49:08 -     let trace1 =
2018-09-11 13:49:08 -         let y = x |> List.map f
2018-09-11 13:49:08 -         Scatter(
2018-09-11 13:49:08 -             x = x,
2018-09-11 13:49:08 -             y = y,
2018-09-11 13:49:08 -             name = "Исходная функция"
2018-09-11 13:49:08 -         )
2018-09-11 13:49:08 -     let trace2 =
2018-09-11 13:49:08 -         let y = x |> List.map LagrangePolynomial
2018-09-11 13:49:08 -         Scatter(
2018-09-11 13:49:08 -             x = x,
2018-09-11 13:49:08 -             y = y,
2018-09-11 13:49:08 -             name = "Полином Лагранжа"
2018-09-11 13:49:08 -         )
2018-09-11 13:49:08 -         
2018-09-11 13:49:08 -     [trace1; trace2]
2018-09-11 13:49:08 -     |> Chart.Plot
2018-09-11 13:49:08 -     |> Chart.WithWidth 1000
2018-09-11 13:49:08 -     |> Chart.WithHeight 700
2018-09-11 13:49:08 - plotLagrange()
2018-09-11 13:49:08 - let NewtonPolynomial (points : float list) x = 
2018-09-11 13:49:08 -     let dividedDifferencesTable = 
2018-09-11 13:49:08 -         let rec computeCells y acc = 
2018-09-11 13:49:08 -             let computeCol n (prevCol : float list) =
2018-09-11 13:49:08 -                 let rec computeColInternal x acc =
2018-09-11 13:49:08 -                     match x with
2018-09-11 13:49:08 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-11 13:49:08 -                     | _ -> acc
2018-09-11 13:49:08 -                 computeColInternal (points.Length - n) [] 
2018-09-11 13:49:08 -             match y with
2018-09-11 13:49:08 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-11 13:49:08 -             |_ -> List.rev acc
2018-09-11 13:49:08 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-11 13:49:08 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-11 13:49:08 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-11 13:49:08 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-11 13:49:08 - let NewtonPolynomialPoints = NewtonPolynomial points
2018-09-11 13:49:08 - let plotNewton () =
2018-09-11 13:49:08 -     let x = [-2. .. 0.01 .. 2.]
2018-09-11 13:49:08 -     let trace1 =
2018-09-11 13:49:08 -         let y = x |> List.map f
2018-09-11 13:49:08 -         Scatter(
2018-09-11 13:49:08 -             x = x,
2018-09-11 13:49:08 -             y = y,
2018-09-11 13:49:08 -             name = "Исходная функция"
2018-09-11 13:49:08 -         )
2018-09-11 13:49:08 -     let trace2 =
2018-09-11 13:49:08 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-11 13:49:08 -         Scatter(
2018-09-11 13:49:08 -             x = x,
2018-09-11 13:49:08 -             y = y,
2018-09-11 13:49:08 -             name = "Полином Ньютона"
2018-09-11 13:49:08 -         )
2018-09-11 13:49:08 -     [trace1; trace2]
2018-09-11 13:49:08 -     |> Chart.Plot
2018-09-11 13:49:08 -     |> Chart.WithWidth 1000
2018-09-11 13:49:08 -     |> Chart.WithHeight 700
2018-09-11 13:49:08 - plotNewton()
2018-09-11 13:49:08 - let plotError () =
2018-09-11 13:49:08 -     let x = [-2. .. 0.01 .. -1.5]
2018-09-11 13:49:08 -     let trace1 =
2018-09-11 13:49:08 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:49:08 -         Scatter(
2018-09-11 13:49:08 -             x = x,
2018-09-11 13:49:08 -             y = error
2018-09-11 13:49:08 -         )
2018-09-11 13:49:08 -     trace1
2018-09-11 13:49:08 -     |> Chart.Plot
2018-09-11 13:49:08 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-11 13:49:08 -     |> Chart.WithWidth 1000
2018-09-11 13:49:08 -     |> Chart.WithHeight 700
2018-09-11 13:49:08 - plotError()
2018-09-11 13:49:09 - let plotNewtonLagrangeError () =
2018-09-11 13:49:09 -     let x = [-2. .. 0.01 .. -1.5]
2018-09-11 13:49:09 -     let trace1 =
2018-09-11 13:49:09 -         let error = List.map (fun i -> abs (LagrangePolynomial i - (NewtonPolynomialPoints i))) x
2018-09-11 13:49:09 -         Scatter(
2018-09-11 13:49:09 -             x = x,
2018-09-11 13:49:09 -             y = error
2018-09-11 13:49:09 -         )
2018-09-11 13:49:09 -     trace1
2018-09-11 13:49:09 -     |> Chart.Plot
2018-09-11 13:49:09 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-11 13:49:09 -     |> Chart.WithWidth 1000
2018-09-11 13:49:09 -     |> Chart.WithHeight 700
2018-09-11 13:49:09 - plotNewtonLagrangeError()
2018-09-11 13:49:09 - let c = -2.
2018-09-11 13:49:09 - let d = -1.5
2018-09-11 13:49:09 - let n = 5.
2018-09-11 13:49:09 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-11 13:49:09 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-11 13:49:09 - let NewtonPolynomialCheb = NewtonPolynomial ChebT
2018-09-11 13:49:09 - ChebX
2018-09-11 13:49:09 - let plotNewtonCheb () =
2018-09-11 13:49:09 -     let x = [c .. 0.01 .. d]
2018-09-11 13:49:09 -     let trace1 =
2018-09-11 13:49:09 -         let y = x |> List.map f
2018-09-11 13:49:09 -         Scatter(
2018-09-11 13:49:09 -             x = x,
2018-09-11 13:49:09 -             y = y,
2018-09-11 13:49:09 -             name = "Исходная функция"
2018-09-11 13:49:09 -         )
2018-09-11 13:49:09 -     let trace2 =
2018-09-11 13:49:09 -         let y = x |> List.map NewtonPolynomialCheb
2018-09-11 13:49:09 -         Scatter(
2018-09-11 13:49:09 -             x = x,
2018-09-11 13:49:09 -             y = y,
2018-09-11 13:49:09 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-11 13:49:09 -         )
2018-09-11 13:49:09 -     let trace3 =
2018-09-11 13:49:09 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-11 13:49:09 -         Scatter(
2018-09-11 13:49:09 -             x = x,
2018-09-11 13:49:09 -             y = y,
2018-09-11 13:49:09 -             name = "Полином Ньютона на заданных узлах"
2018-09-11 13:49:09 -         )
2018-09-11 13:49:09 -     [trace1; trace2; trace3]
2018-09-11 13:49:09 -     |> Chart.Plot
2018-09-11 13:49:09 -     |> Chart.WithWidth 1000
2018-09-11 13:49:09 -     |> Chart.WithHeight 700
2018-09-11 13:49:09 - plotNewtonCheb()
2018-09-11 13:49:09 - let plotErrorCheb () =
2018-09-11 13:49:09 -     let x = [c .. 0.01 .. d]
2018-09-11 13:49:09 -     let trace1 =
2018-09-11 13:49:09 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-11 13:49:09 -         Scatter(
2018-09-11 13:49:09 -             x = x,
2018-09-11 13:49:09 -             y = error,
2018-09-11 13:49:09 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-11 13:49:09 -         )
2018-09-11 13:49:09 -     let trace2 =
2018-09-11 13:49:09 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:49:09 -         Scatter(
2018-09-11 13:49:09 -             x = x,
2018-09-11 13:49:09 -             y = error,
2018-09-11 13:49:09 -             name = "Абсолютная погрешность полинома на заданных узлах"
2018-09-11 13:49:09 -         )
2018-09-11 13:49:09 -     [trace1; trace2]
2018-09-11 13:49:09 -     |> Chart.Plot
2018-09-11 13:49:09 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских и на заданных узлах"
2018-09-11 13:49:09 -     |> Chart.WithWidth 1000
2018-09-11 13:49:09 -     |> Chart.WithHeight 700
2018-09-11 13:49:09 - plotErrorCheb()
2018-09-11 13:49:09 - let derivativeF x = 16. * exp(2. * x) * (2. * x + 5.) + 243. * cos (3. * x)
2018-09-11 13:49:09 - let maxDerivativeF = [c .. 0.01 .. d] |> List.map (fun x -> abs <| derivativeF x) |> List.max
2018-09-11 13:49:09 - let w p x = p |> List.fold (fun acc k -> acc * (x - k)) 1.
2018-09-11 13:49:09 - let R w x = maxDerivativeF / 120. * abs (w x)
2018-09-11 13:49:09 - let ROurPoints = R <| w points
2018-09-11 13:49:09 - let RChebPoints = R <| w ChebT
2018-09-11 13:49:09 - let plotOurTeoreticalError () =
2018-09-11 13:49:09 -     let x = [c .. 0.01 .. d]
2018-09-11 13:49:09 -     let trace1 =
2018-09-11 13:49:09 -         let error = List.map ROurPoints x
2018-09-11 13:49:09 -         Scatter(
2018-09-11 13:49:09 -             x = x,
2018-09-11 13:49:09 -             y = error,
2018-09-11 13:49:09 -             name = "Теоретическая погрешность на наших узлах"
2018-09-11 13:49:09 -         )
2018-09-11 13:49:09 -     let trace2 =
2018-09-11 13:49:09 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:49:09 -         Scatter(
2018-09-11 13:49:09 -             x = x,
2018-09-11 13:49:09 -             y = error,
2018-09-11 13:49:09 -             name = "Абсолютная погрешность полинома на наших узлах"
2018-09-11 13:49:09 -         )
2018-09-11 13:49:09 -     [trace1; trace2]
2018-09-11 13:49:09 -     |> Chart.Plot
2018-09-11 13:49:09 -     |> Chart.WithTitle "График теоретичекой погрешности"
2018-09-11 13:49:09 -     |> Chart.WithWidth 1000
2018-09-11 13:49:09 -     |> Chart.WithHeight 700
2018-09-11 13:49:09 - plotOurTeoreticalError()
2018-09-11 13:49:09 - let plotChebTeoreticalError () =
2018-09-11 13:49:09 -     let x = [c .. 0.01 .. d]
2018-09-11 13:49:09 -     let trace1 =
2018-09-11 13:49:09 -         let error = List.map RChebPoints x
2018-09-11 13:49:09 -         Scatter(
2018-09-11 13:49:09 -             x = x,
2018-09-11 13:49:09 -             y = error,
2018-09-11 13:49:09 -             name = "Теоретическая погрешность на Чебышевских узлах"
2018-09-11 13:49:09 -         )
2018-09-11 13:49:09 -     let trace2 =
2018-09-11 13:49:09 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-11 13:49:09 -         Scatter(
2018-09-11 13:49:09 -             x = x,
2018-09-11 13:49:09 -             y = error,
2018-09-11 13:49:09 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-11 13:49:09 -         )
2018-09-11 13:49:09 -     [trace1; trace2]
2018-09-11 13:49:09 -     |> Chart.Plot
2018-09-11 13:49:09 -     |> Chart.WithTitle "График теоретичекой погрешности"
2018-09-11 13:49:09 -     |> Chart.WithWidth 1000
2018-09-11 13:49:09 -     |> Chart.WithHeight 700
2018-09-11 13:49:09 - plotChebTeoreticalError()
2018-09-11 13:58:27 - #load "XPlot.Plotly.Paket.fsx"
2018-09-11 13:58:27 - #load "XPlot.Plotly.fsx"
2018-09-11 13:58:27 - open XPlot.Plotly
2018-09-11 13:58:27 - open System
2018-09-11 13:58:27 - let N = 5.
2018-09-11 13:58:28 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-09-11 13:58:28 - let x0 = - (N % 3.)
2018-09-11 13:58:28 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-11 13:58:28 - let l k x = 
2018-09-11 13:58:28 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-11 13:58:28 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-11 13:58:28 - let plotLagrange () =
2018-09-11 13:58:28 -     let x = [-2. .. 0.01 .. 2.]
2018-09-11 13:58:28 -     let trace1 =
2018-09-11 13:58:28 -         let y = x |> List.map f
2018-09-11 13:58:28 -         Scatter(
2018-09-11 13:58:28 -             x = x,
2018-09-11 13:58:28 -             y = y,
2018-09-11 13:58:28 -             name = "Исходная функция"
2018-09-11 13:58:28 -         )
2018-09-11 13:58:28 -     let trace2 =
2018-09-11 13:58:28 -         let y = x |> List.map LagrangePolynomial
2018-09-11 13:58:28 -         Scatter(
2018-09-11 13:58:28 -             x = x,
2018-09-11 13:58:28 -             y = y,
2018-09-11 13:58:28 -             name = "Полином Лагранжа"
2018-09-11 13:58:28 -         )
2018-09-11 13:58:28 -         
2018-09-11 13:58:28 -     [trace1; trace2]
2018-09-11 13:58:28 -     |> Chart.Plot
2018-09-11 13:58:28 -     |> Chart.WithWidth 1000
2018-09-11 13:58:28 -     |> Chart.WithHeight 700
2018-09-11 13:58:28 - plotLagrange()
2018-09-11 13:58:28 - let NewtonPolynomial (points : float list) x = 
2018-09-11 13:58:28 -     let dividedDifferencesTable = 
2018-09-11 13:58:28 -         let rec computeCells y acc = 
2018-09-11 13:58:28 -             let computeCol n (prevCol : float list) =
2018-09-11 13:58:28 -                 let rec computeColInternal x acc =
2018-09-11 13:58:28 -                     match x with
2018-09-11 13:58:28 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-11 13:58:28 -                     | _ -> acc
2018-09-11 13:58:28 -                 computeColInternal (points.Length - n) [] 
2018-09-11 13:58:28 -             match y with
2018-09-11 13:58:28 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-11 13:58:28 -             |_ -> List.rev acc
2018-09-11 13:58:28 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-11 13:58:28 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-11 13:58:28 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-11 13:58:28 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-11 13:58:28 - let NewtonPolynomialPoints = NewtonPolynomial points
2018-09-11 13:58:28 - let plotNewton () =
2018-09-11 13:58:28 -     let x = [-2. .. 0.01 .. 2.]
2018-09-11 13:58:28 -     let trace1 =
2018-09-11 13:58:28 -         let y = x |> List.map f
2018-09-11 13:58:28 -         Scatter(
2018-09-11 13:58:28 -             x = x,
2018-09-11 13:58:28 -             y = y,
2018-09-11 13:58:28 -             name = "Исходная функция"
2018-09-11 13:58:28 -         )
2018-09-11 13:58:28 -     let trace2 =
2018-09-11 13:58:28 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-11 13:58:28 -         Scatter(
2018-09-11 13:58:28 -             x = x,
2018-09-11 13:58:28 -             y = y,
2018-09-11 13:58:28 -             name = "Полином Ньютона"
2018-09-11 13:58:28 -         )
2018-09-11 13:58:28 -     [trace1; trace2]
2018-09-11 13:58:28 -     |> Chart.Plot
2018-09-11 13:58:28 -     |> Chart.WithWidth 1000
2018-09-11 13:58:28 -     |> Chart.WithHeight 700
2018-09-11 13:58:28 - plotNewton()
2018-09-11 13:58:28 - let plotError () =
2018-09-11 13:58:28 -     let x = [-2. .. 0.01 .. -1.5]
2018-09-11 13:58:28 -     let trace1 =
2018-09-11 13:58:28 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:58:28 -         Scatter(
2018-09-11 13:58:28 -             x = x,
2018-09-11 13:58:28 -             y = error
2018-09-11 13:58:28 -         )
2018-09-11 13:58:28 -     trace1
2018-09-11 13:58:28 -     |> Chart.Plot
2018-09-11 13:58:28 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-11 13:58:28 -     |> Chart.WithWidth 1000
2018-09-11 13:58:28 -     |> Chart.WithHeight 700
2018-09-11 13:58:28 - plotError()
2018-09-11 13:58:28 - let plotNewtonLagrangeError () =
2018-09-11 13:58:28 -     let x = [-2. .. 0.01 .. -1.5]
2018-09-11 13:58:28 -     let trace1 =
2018-09-11 13:58:28 -         let error = List.map (fun i -> abs (LagrangePolynomial i - (NewtonPolynomialPoints i))) x
2018-09-11 13:58:28 -         Scatter(
2018-09-11 13:58:28 -             x = x,
2018-09-11 13:58:28 -             y = error
2018-09-11 13:58:28 -         )
2018-09-11 13:58:28 -     trace1
2018-09-11 13:58:28 -     |> Chart.Plot
2018-09-11 13:58:28 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-11 13:58:28 -     |> Chart.WithWidth 1000
2018-09-11 13:58:28 -     |> Chart.WithHeight 700
2018-09-11 13:58:28 - plotNewtonLagrangeError()
2018-09-11 13:58:29 - let c = -2.
2018-09-11 13:58:29 - let d = -1.5
2018-09-11 13:58:29 - let n = 5.
2018-09-11 13:58:29 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-11 13:58:29 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-11 13:58:29 - let NewtonPolynomialCheb = NewtonPolynomial ChebT
2018-09-11 13:58:29 - ChebX
2018-09-11 13:58:29 - let plotNewtonCheb () =
2018-09-11 13:58:29 -     let x = [c .. 0.01 .. d]
2018-09-11 13:58:29 -     let trace1 =
2018-09-11 13:58:29 -         let y = x |> List.map f
2018-09-11 13:58:29 -         Scatter(
2018-09-11 13:58:29 -             x = x,
2018-09-11 13:58:29 -             y = y,
2018-09-11 13:58:29 -             name = "Исходная функция"
2018-09-11 13:58:29 -         )
2018-09-11 13:58:29 -     let trace2 =
2018-09-11 13:58:29 -         let y = x |> List.map NewtonPolynomialCheb
2018-09-11 13:58:29 -         Scatter(
2018-09-11 13:58:29 -             x = x,
2018-09-11 13:58:29 -             y = y,
2018-09-11 13:58:29 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-11 13:58:29 -         )
2018-09-11 13:58:29 -     let trace3 =
2018-09-11 13:58:29 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-11 13:58:29 -         Scatter(
2018-09-11 13:58:29 -             x = x,
2018-09-11 13:58:29 -             y = y,
2018-09-11 13:58:29 -             name = "Полином Ньютона на заданных узлах"
2018-09-11 13:58:29 -         )
2018-09-11 13:58:29 -     [trace1; trace2; trace3]
2018-09-11 13:58:29 -     |> Chart.Plot
2018-09-11 13:58:29 -     |> Chart.WithWidth 1000
2018-09-11 13:58:29 -     |> Chart.WithHeight 700
2018-09-11 13:58:29 - plotNewtonCheb()
2018-09-11 13:58:29 - let plotErrorCheb () =
2018-09-11 13:58:29 -     let x = [c .. 0.01 .. d]
2018-09-11 13:58:29 -     let trace1 =
2018-09-11 13:58:29 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-11 13:58:29 -         Scatter(
2018-09-11 13:58:29 -             x = x,
2018-09-11 13:58:29 -             y = error,
2018-09-11 13:58:29 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-11 13:58:29 -         )
2018-09-11 13:58:29 -     let trace2 =
2018-09-11 13:58:29 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:58:29 -         Scatter(
2018-09-11 13:58:29 -             x = x,
2018-09-11 13:58:29 -             y = error,
2018-09-11 13:58:29 -             name = "Абсолютная погрешность полинома на заданных узлах"
2018-09-11 13:58:29 -         )
2018-09-11 13:58:29 -     [trace1; trace2]
2018-09-11 13:58:29 -     |> Chart.Plot
2018-09-11 13:58:29 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских и на заданных узлах"
2018-09-11 13:58:29 -     |> Chart.WithWidth 1000
2018-09-11 13:58:29 -     |> Chart.WithHeight 700
2018-09-11 13:58:29 - plotErrorCheb()
2018-09-11 13:58:29 - let derivativeF x = 16. * exp(2. * x) * (2. * x + 5.) + 243. * cos (3. * x)
2018-09-11 13:58:29 - let maxDerivativeF = [c .. 0.01 .. d] |> List.map (fun x -> abs <| derivativeF x) |> List.max
2018-09-11 13:58:29 - let w p x = p |> List.fold (fun acc k -> acc * (x - k)) 1.
2018-09-11 13:58:29 - let R w x = maxDerivativeF / 120. * abs (w x)
2018-09-11 13:58:29 - let ROurPoints = R <| w points
2018-09-11 13:58:29 - let RChebPoints = R <| w ChebT
2018-09-11 13:58:29 - let plotOurTeoreticalError () =
2018-09-11 13:58:29 -     let x = [c .. 0.01 .. d]
2018-09-11 13:58:29 -     let trace1 =
2018-09-11 13:58:29 -         let error = List.map ROurPoints x
2018-09-11 13:58:29 -         Scatter(
2018-09-11 13:58:29 -             x = x,
2018-09-11 13:58:29 -             y = error,
2018-09-11 13:58:29 -             name = "Теоретическая погрешность на наших узлах"
2018-09-11 13:58:29 -         )
2018-09-11 13:58:29 -     let trace2 =
2018-09-11 13:58:29 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-11 13:58:29 -         Scatter(
2018-09-11 13:58:29 -             x = x,
2018-09-11 13:58:29 -             y = error,
2018-09-11 13:58:29 -             name = "Абсолютная погрешность полинома на наших узлах"
2018-09-11 13:58:29 -         )
2018-09-11 13:58:29 -     [trace1; trace2]
2018-09-11 13:58:29 -     |> Chart.Plot
2018-09-11 13:58:29 -     |> Chart.WithTitle "График теоретичекой погрешности"
2018-09-11 13:58:29 -     |> Chart.WithWidth 1000
2018-09-11 13:58:29 -     |> Chart.WithHeight 700
2018-09-11 13:58:29 - plotOurTeoreticalError()
2018-09-11 13:58:29 - let plotChebTeoreticalError () =
2018-09-11 13:58:29 -     let x = [c .. 0.01 .. d]
2018-09-11 13:58:29 -     let trace1 =
2018-09-11 13:58:29 -         let error = List.map RChebPoints x
2018-09-11 13:58:29 -         Scatter(
2018-09-11 13:58:29 -             x = x,
2018-09-11 13:58:29 -             y = error,
2018-09-11 13:58:29 -             name = "Теоретическая погрешность на Чебышевских узлах"
2018-09-11 13:58:29 -         )
2018-09-11 13:58:29 -     let trace2 =
2018-09-11 13:58:29 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-11 13:58:29 -         Scatter(
2018-09-11 13:58:29 -             x = x,
2018-09-11 13:58:29 -             y = error,
2018-09-11 13:58:29 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-11 13:58:29 -         )
2018-09-11 13:58:29 -     [trace1; trace2]
2018-09-11 13:58:29 -     |> Chart.Plot
2018-09-11 13:58:29 -     |> Chart.WithTitle "График теоретичекой погрешности"
2018-09-11 13:58:29 -     |> Chart.WithWidth 1000
2018-09-11 13:58:29 -     |> Chart.WithHeight 700
2018-09-11 13:58:29 - plotChebTeoreticalError()
2018-09-17 21:17:38 - // include directory, this will be replaced by the kernel
2018-09-17 21:17:38 - #I "/home/nbuser/IfSharp/bin"
2018-09-17 21:17:38 - // load base dlls
2018-09-17 21:17:38 - #r "IfSharp.Kernel.dll"
2018-09-17 21:17:38 - #r "NetMQ.dll"
2018-09-17 21:17:38 - // open the global functions and methods
2018-09-17 21:17:38 - open IfSharp.Kernel
2018-09-17 21:17:38 - open IfSharp.Kernel.Globals
2018-09-17 21:17:56 - F# Interactive for F# 4.1
2018-09-17 21:17:56 - Freely distributed under the Apache 2.0 Open Source License
2018-09-17 21:17:56 - For help type #help;;
2018-09-17 21:17:56 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-17 21:17:56 -   seq []
2018-09-17 21:17:56 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-17 21:17:56 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-17 21:17:56 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-17 21:17:56 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-17 21:18:15 - #load "XPlot.Plotly.Paket.fsx"
2018-09-17 21:18:15 - #load "XPlot.Plotly.fsx"
2018-09-17 21:18:15 - open XPlot.Plotly
2018-09-17 21:18:15 - open System
2018-09-17 21:18:25 - let N = 5.
2018-09-17 21:18:26 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-09-17 21:18:26 - let x0 = - (N % 3.)
2018-09-17 21:18:26 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-09-17 21:18:26 - let l k x = 
2018-09-17 21:18:26 -     points |> List.where (fun i -> i <> k) |> List.fold (fun acc i -> (x - i) / (k - i) * acc) 1.
2018-09-17 21:18:26 - let LagrangePolynomial x = List.sumBy (fun k -> l k x * f k) points
2018-09-17 21:18:26 - let plotLagrange () =
2018-09-17 21:18:26 -     let x = [-2. .. 0.01 .. 2.]
2018-09-17 21:18:26 -     let trace1 =
2018-09-17 21:18:26 -         let y = x |> List.map f
2018-09-17 21:18:26 -         Scatter(
2018-09-17 21:18:26 -             x = x,
2018-09-17 21:18:26 -             y = y,
2018-09-17 21:18:26 -             name = "Исходная функция"
2018-09-17 21:18:26 -         )
2018-09-17 21:18:26 -     let trace2 =
2018-09-17 21:18:26 -         let y = x |> List.map LagrangePolynomial
2018-09-17 21:18:26 -         Scatter(
2018-09-17 21:18:26 -             x = x,
2018-09-17 21:18:26 -             y = y,
2018-09-17 21:18:26 -             name = "Полином Лагранжа"
2018-09-17 21:18:26 -         )
2018-09-17 21:18:26 -         
2018-09-17 21:18:26 -     [trace1; trace2]
2018-09-17 21:18:26 -     |> Chart.Plot
2018-09-17 21:18:26 -     |> Chart.WithWidth 1000
2018-09-17 21:18:26 -     |> Chart.WithHeight 700
2018-09-17 21:18:26 - plotLagrange()
2018-09-17 21:18:27 - let NewtonPolynomial (points : float list) x = 
2018-09-17 21:18:27 -     let dividedDifferencesTable = 
2018-09-17 21:18:27 -         let rec computeCells y acc = 
2018-09-17 21:18:27 -             let computeCol n (prevCol : float list) =
2018-09-17 21:18:27 -                 let rec computeColInternal x acc =
2018-09-17 21:18:27 -                     match x with
2018-09-17 21:18:27 -                     | _ when x > 0 -> computeColInternal (x - 1) (((prevCol.[x] - prevCol.[x - 1]) / (points.[x + n - 1] - points.[x - 1])) :: acc)
2018-09-17 21:18:27 -                     | _ -> acc
2018-09-17 21:18:27 -                 computeColInternal (points.Length - n) [] 
2018-09-17 21:18:27 -             match y with
2018-09-17 21:18:27 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-17 21:18:27 -             |_ -> List.rev acc
2018-09-17 21:18:27 -         computeCells (points.Length - 1) [points |> List.map f; points]
2018-09-17 21:18:27 -     let multiply = 1. :: ([0 .. points.Length - 2] |> List.mapFold (fun acc k -> ((x - points.[k]) * acc, (x - points.[k]) * acc)) 1. |> fst)
2018-09-17 21:18:27 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-09-17 21:18:27 -     [0 .. points.Length - 1] |> List.sumBy (fun k -> term k)
2018-09-17 21:18:27 - let NewtonPolynomialPoints = NewtonPolynomial points
2018-09-17 21:18:27 - let plotNewton () =
2018-09-17 21:18:27 -     let x = [-2. .. 0.01 .. 2.]
2018-09-17 21:18:27 -     let trace1 =
2018-09-17 21:18:27 -         let y = x |> List.map f
2018-09-17 21:18:27 -         Scatter(
2018-09-17 21:18:27 -             x = x,
2018-09-17 21:18:27 -             y = y,
2018-09-17 21:18:27 -             name = "Исходная функция"
2018-09-17 21:18:27 -         )
2018-09-17 21:18:27 -     let trace2 =
2018-09-17 21:18:27 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-17 21:18:27 -         Scatter(
2018-09-17 21:18:27 -             x = x,
2018-09-17 21:18:27 -             y = y,
2018-09-17 21:18:27 -             name = "Полином Ньютона"
2018-09-17 21:18:27 -         )
2018-09-17 21:18:27 -     [trace1; trace2]
2018-09-17 21:18:27 -     |> Chart.Plot
2018-09-17 21:18:27 -     |> Chart.WithWidth 1000
2018-09-17 21:18:27 -     |> Chart.WithHeight 700
2018-09-17 21:18:27 - plotNewton()
2018-09-17 21:18:27 - let plotError () =
2018-09-17 21:18:27 -     let x = [-2. .. 0.01 .. -1.5]
2018-09-17 21:18:27 -     let trace1 =
2018-09-17 21:18:27 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-17 21:18:27 -         Scatter(
2018-09-17 21:18:27 -             x = x,
2018-09-17 21:18:27 -             y = error
2018-09-17 21:18:27 -         )
2018-09-17 21:18:27 -     trace1
2018-09-17 21:18:27 -     |> Chart.Plot
2018-09-17 21:18:27 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-17 21:18:27 -     |> Chart.WithWidth 1000
2018-09-17 21:18:27 -     |> Chart.WithHeight 700
2018-09-17 21:18:27 - plotError()
2018-09-17 21:18:27 - let plotNewtonLagrangeError () =
2018-09-17 21:18:27 -     let x = [-2. .. 0.01 .. -1.5]
2018-09-17 21:18:27 -     let trace1 =
2018-09-17 21:18:27 -         let error = List.map (fun i -> abs (LagrangePolynomial i - (NewtonPolynomialPoints i))) x
2018-09-17 21:18:27 -         Scatter(
2018-09-17 21:18:27 -             x = x,
2018-09-17 21:18:27 -             y = error
2018-09-17 21:18:27 -         )
2018-09-17 21:18:27 -     trace1
2018-09-17 21:18:27 -     |> Chart.Plot
2018-09-17 21:18:27 -     |> Chart.WithTitle "График абсолютной погрешности"
2018-09-17 21:18:27 -     |> Chart.WithWidth 1000
2018-09-17 21:18:27 -     |> Chart.WithHeight 700
2018-09-17 21:18:27 - plotNewtonLagrangeError()
2018-09-17 21:18:27 - let c = -2.
2018-09-17 21:18:27 - let d = -1.5
2018-09-17 21:18:27 - let n = 5.
2018-09-17 21:18:27 - let ChebX = [1. .. n] |> List.map (fun k -> cos ((2. * k - 1.) * Math.PI / (2. * n)))
2018-09-17 21:18:27 - let ChebT = ChebX |> List.map (fun x -> (d - c) / 2. * x + (d + c) / 2.)
2018-09-17 21:18:27 - let NewtonPolynomialCheb = NewtonPolynomial ChebT
2018-09-17 21:18:27 - ChebX
2018-09-17 21:18:28 - let plotNewtonCheb () =
2018-09-17 21:18:28 -     let x = [c .. 0.01 .. d]
2018-09-17 21:18:28 -     let trace1 =
2018-09-17 21:18:28 -         let y = x |> List.map f
2018-09-17 21:18:28 -         Scatter(
2018-09-17 21:18:28 -             x = x,
2018-09-17 21:18:28 -             y = y,
2018-09-17 21:18:28 -             name = "Исходная функция"
2018-09-17 21:18:28 -         )
2018-09-17 21:18:28 -     let trace2 =
2018-09-17 21:18:28 -         let y = x |> List.map NewtonPolynomialCheb
2018-09-17 21:18:28 -         Scatter(
2018-09-17 21:18:28 -             x = x,
2018-09-17 21:18:28 -             y = y,
2018-09-17 21:18:28 -             name = "Полином Ньютона на Чебышевских узлах"
2018-09-17 21:18:28 -         )
2018-09-17 21:18:28 -     let trace3 =
2018-09-17 21:18:28 -         let y = x |> List.map NewtonPolynomialPoints
2018-09-17 21:18:28 -         Scatter(
2018-09-17 21:18:28 -             x = x,
2018-09-17 21:18:28 -             y = y,
2018-09-17 21:18:28 -             name = "Полином Ньютона на заданных узлах"
2018-09-17 21:18:28 -         )
2018-09-17 21:18:28 -     [trace1; trace2; trace3]
2018-09-17 21:18:28 -     |> Chart.Plot
2018-09-17 21:18:28 -     |> Chart.WithWidth 1000
2018-09-17 21:18:28 -     |> Chart.WithHeight 700
2018-09-17 21:18:28 - plotNewtonCheb()
2018-09-17 21:18:28 - let plotErrorCheb () =
2018-09-17 21:18:28 -     let x = [c .. 0.01 .. d]
2018-09-17 21:18:28 -     let trace1 =
2018-09-17 21:18:28 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-17 21:18:28 -         Scatter(
2018-09-17 21:18:28 -             x = x,
2018-09-17 21:18:28 -             y = error,
2018-09-17 21:18:28 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-17 21:18:28 -         )
2018-09-17 21:18:28 -     let trace2 =
2018-09-17 21:18:28 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-17 21:18:28 -         Scatter(
2018-09-17 21:18:28 -             x = x,
2018-09-17 21:18:28 -             y = error,
2018-09-17 21:18:28 -             name = "Абсолютная погрешность полинома на заданных узлах"
2018-09-17 21:18:28 -         )
2018-09-17 21:18:28 -     [trace1; trace2]
2018-09-17 21:18:28 -     |> Chart.Plot
2018-09-17 21:18:28 -     |> Chart.WithTitle "График абсолютной погрешности на Чебышевских и на заданных узлах"
2018-09-17 21:18:28 -     |> Chart.WithWidth 1000
2018-09-17 21:18:28 -     |> Chart.WithHeight 700
2018-09-17 21:18:28 - plotErrorCheb()
2018-09-17 21:18:28 - let derivativeF x = 16. * exp(2. * x) * (2. * x + 5.) + 243. * cos (3. * x)
2018-09-17 21:18:28 - let maxDerivativeF = [c .. 0.01 .. d] |> List.map (fun x -> abs <| derivativeF x) |> List.max
2018-09-17 21:18:28 - let w p x = p |> List.fold (fun acc k -> acc * (x - k)) 1.
2018-09-17 21:18:28 - let R w x = maxDerivativeF / 120. * abs (w x)
2018-09-17 21:18:28 - let ROurPoints = R <| w points
2018-09-17 21:18:28 - let RChebPoints = R <| w ChebT
2018-09-17 21:18:28 - let plotOurTeoreticalError () =
2018-09-17 21:18:28 -     let x = [c .. 0.01 .. d]
2018-09-17 21:18:28 -     let trace1 =
2018-09-17 21:18:28 -         let error = List.map ROurPoints x
2018-09-17 21:18:28 -         Scatter(
2018-09-17 21:18:28 -             x = x,
2018-09-17 21:18:28 -             y = error,
2018-09-17 21:18:28 -             name = "Теоретическая погрешность на наших узлах"
2018-09-17 21:18:28 -         )
2018-09-17 21:18:28 -     let trace2 =
2018-09-17 21:18:28 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialPoints i))) x
2018-09-17 21:18:28 -         Scatter(
2018-09-17 21:18:28 -             x = x,
2018-09-17 21:18:28 -             y = error,
2018-09-17 21:18:28 -             name = "Абсолютная погрешность полинома на наших узлах"
2018-09-17 21:18:28 -         )
2018-09-17 21:18:28 -     [trace1; trace2]
2018-09-17 21:18:28 -     |> Chart.Plot
2018-09-17 21:18:28 -     |> Chart.WithTitle "График теоретичекой погрешности"
2018-09-17 21:18:28 -     |> Chart.WithWidth 1000
2018-09-17 21:18:28 -     |> Chart.WithHeight 700
2018-09-17 21:18:28 - plotOurTeoreticalError()
2018-09-17 21:18:32 - let plotChebTeoreticalError () =
2018-09-17 21:18:32 -     let x = [c .. 0.01 .. d]
2018-09-17 21:18:32 -     let trace1 =
2018-09-17 21:18:32 -         let error = List.map RChebPoints x
2018-09-17 21:18:32 -         Scatter(
2018-09-17 21:18:32 -             x = x,
2018-09-17 21:18:32 -             y = error,
2018-09-17 21:18:32 -             name = "Теоретическая погрешность на Чебышевских узлах"
2018-09-17 21:18:32 -         )
2018-09-17 21:18:32 -     let trace2 =
2018-09-17 21:18:32 -         let error = List.map (fun i -> abs (f i - (NewtonPolynomialCheb i))) x
2018-09-17 21:18:32 -         Scatter(
2018-09-17 21:18:32 -             x = x,
2018-09-17 21:18:32 -             y = error,
2018-09-17 21:18:32 -             name = "Абсолютная погрешность полинома на Чебышевских узлах"
2018-09-17 21:18:32 -         )
2018-09-17 21:18:32 -     [trace1; trace2]
2018-09-17 21:18:32 -     |> Chart.Plot
2018-09-17 21:18:32 -     |> Chart.WithTitle "График теоретичекой погрешности"
2018-09-17 21:18:32 -     |> Chart.WithWidth 1000
2018-09-17 21:18:32 -     |> Chart.WithHeight 700
2018-09-17 21:18:32 - plotChebTeoreticalError()
2018-09-18 12:35:27 - // include directory, this will be replaced by the kernel
2018-09-18 12:35:27 - #I "/home/nbuser/IfSharp/bin"
2018-09-18 12:35:27 - // load base dlls
2018-09-18 12:35:27 - #r "IfSharp.Kernel.dll"
2018-09-18 12:35:27 - #r "NetMQ.dll"
2018-09-18 12:35:27 - // open the global functions and methods
2018-09-18 12:35:27 - open IfSharp.Kernel
2018-09-18 12:35:27 - open IfSharp.Kernel.Globals
2018-09-18 12:35:45 - F# Interactive for F# 4.1
2018-09-18 12:35:45 - Freely distributed under the Apache 2.0 Open Source License
2018-09-18 12:35:45 - For help type #help;;
2018-09-18 12:35:45 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-18 12:35:45 -   seq []
2018-09-18 12:35:45 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-18 12:35:45 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-18 12:35:45 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-18 12:35:45 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-24 15:53:03 - // include directory, this will be replaced by the kernel
2018-09-24 15:53:03 - #I "/home/nbuser/IfSharp/bin"
2018-09-24 15:53:03 - // load base dlls
2018-09-24 15:53:03 - #r "IfSharp.Kernel.dll"
2018-09-24 15:53:03 - #r "NetMQ.dll"
2018-09-24 15:53:03 - // open the global functions and methods
2018-09-24 15:53:03 - open IfSharp.Kernel
2018-09-24 15:53:03 - open IfSharp.Kernel.Globals
2018-09-24 15:53:10 - F# Interactive for F# 4.1
2018-09-24 15:53:10 - Freely distributed under the Apache 2.0 Open Source License
2018-09-24 15:53:10 - For help type #help;;
2018-09-24 15:53:10 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-24 15:53:10 -   seq []
2018-09-24 15:53:10 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-24 15:53:10 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-24 15:53:10 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-24 15:53:10 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-24 17:14:14 - // include directory, this will be replaced by the kernel
2018-09-24 17:14:14 - #I "/home/nbuser/IfSharp/bin"
2018-09-24 17:14:14 - // load base dlls
2018-09-24 17:14:14 - #r "IfSharp.Kernel.dll"
2018-09-24 17:14:14 - #r "NetMQ.dll"
2018-09-24 17:14:14 - // open the global functions and methods
2018-09-24 17:14:14 - open IfSharp.Kernel
2018-09-24 17:14:14 - open IfSharp.Kernel.Globals
2018-09-24 17:14:19 - F# Interactive for F# 4.1
2018-09-24 17:14:19 - Freely distributed under the Apache 2.0 Open Source License
2018-09-24 17:14:19 - For help type #help;;
2018-09-24 17:14:19 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-24 17:14:19 -   seq []
2018-09-24 17:14:19 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-24 17:14:19 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-24 17:14:19 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-24 17:14:19 - Unknown content type on shell. msg_type is `comm_info_request`
2018-09-24 17:14:49 - let N = 5.
2018-09-24 17:14:49 - let x0 = -(N % 3.)
2018-09-24 17:14:49 - let h = 0.01
2018-09-24 17:14:49 - let points = [x0 .. h .. (x0 + 1.)]
2018-09-24 17:14:49 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-09-24 17:14:59 - //first case
2018-09-24 17:14:59 - let polynom n x =
2018-09-24 17:14:59 -     let t = (x - x0) / h
2018-09-24 17:14:59 -     let Nk =
2018-09-24 17:14:59 -         let rec NkInternal prev cur = seq{
2018-09-24 17:14:59 -             match cur with
2018-09-24 17:14:59 -             | 0. -> yield t
2018-09-24 17:14:59 -                     yield! NkInternal t (cur + 1.)
2018-09-24 17:14:59 -             | k when int k = n - 1 -> yield prev * (t - k) /  (k + 1.)
2018-09-24 17:14:59 -             | _ -> yield! NkInternal (prev * (t - cur) /  (cur + 1.)) (cur + 1.)
2018-09-24 17:14:59 -         } 
2018-09-24 17:14:59 -         NkInternal 1. 0. |> Seq.toList
2018-09-24 17:14:59 -     let finiteDifferencesTable = 
2018-09-24 17:14:59 -         let rec computeCells y acc = 
2018-09-24 17:14:59 -             let computeCol height (prevCol : float list) =
2018-09-24 17:14:59 -                 let rec computeColInternal x acc =
2018-09-24 17:14:59 -                     match x with
2018-09-24 17:14:59 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-24 17:14:59 -                     | _ -> acc
2018-09-24 17:14:59 -                 computeColInternal (n + 1 - height) [] 
2018-09-24 17:14:59 -             match y with
2018-09-24 17:14:59 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (n + 1 - y) acc.[0]) :: acc)
2018-09-24 17:14:59 -             |_ -> List.rev acc
2018-09-24 17:14:59 -         computeCells n [points |> List.map f; points]
2018-09-24 17:14:59 -     List.fold2 (fun acc nk fd -> acc + nk * fd) (f x0) Nk (finiteDifferencesTable |> List.map (fun x -> x.[0]))
2018-09-24 17:21:40 - //first case
2018-09-24 17:21:40 - let polynom n x =
2018-09-24 17:21:40 -     let t = (x - x0) / h
2018-09-24 17:21:40 -     let Nk =
2018-09-24 17:21:40 -         let rec NkInternal prev cur = seq{
2018-09-24 17:21:40 -             match cur with
2018-09-24 17:21:40 -             | 0. -> yield t
2018-09-24 17:21:40 -                     yield! NkInternal t (cur + 1.)
2018-09-24 17:21:40 -             | k when int k = n - 1 -> yield prev * (t - k) /  (k + 1.)
2018-09-24 17:21:40 -             | _ -> yield! NkInternal (prev * (t - cur) /  (cur + 1.)) (cur + 1.)
2018-09-24 17:21:40 -         } 
2018-09-24 17:21:40 -         NkInternal 1. 0. |> Seq.toList
2018-09-24 17:21:40 -     let finiteDifferencesTable = 
2018-09-24 17:21:40 -         let rec computeCells y acc = 
2018-09-24 17:21:40 -             let computeCol height (prevCol : float list) =
2018-09-24 17:21:40 -                 let rec computeColInternal x acc =
2018-09-24 17:21:40 -                     match x with
2018-09-24 17:21:40 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-24 17:21:40 -                     | _ -> acc
2018-09-24 17:21:40 -                 computeColInternal (n + 1 - height) [] 
2018-09-24 17:21:40 -             match y with
2018-09-24 17:21:40 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (n + 1 - y) acc.[0]) :: acc)
2018-09-24 17:21:40 -             |_ -> List.rev acc
2018-09-24 17:21:40 -         computeCells n [points |> List.map f]
2018-09-24 17:21:40 -     List.fold2 (fun acc nk fd -> acc + nk * fd) (f x0) Nk (finiteDifferencesTable |> List.map (fun x -> x.[0]))
2018-09-24 17:23:49 - let plotFirstCaseError () =
2018-09-24 17:23:49 -     let trace1 =
2018-09-24 17:23:49 -         let y = points |> List.map f
2018-09-24 17:23:49 -         Scatter(
2018-09-24 17:23:49 -             x = points,
2018-09-24 17:23:49 -             y = y,
2018-09-24 17:23:49 -             name = "Исходная функция"
2018-09-24 17:23:49 -         )
2018-09-24 17:23:49 -     let trace2 =
2018-09-24 17:23:49 -         let y = points |> List.map (polynom 1)
2018-09-24 17:23:49 -         Scatter(
2018-09-24 17:23:49 -             x = points,
2018-09-24 17:23:49 -             y = y,
2018-09-24 17:23:49 -             name = "Интерполяционный полином"
2018-09-24 17:23:49 -         )
2018-09-24 17:23:49 -     [trace1; trace2]
2018-09-24 17:23:49 -     |> Chart.Plot
2018-09-24 17:23:49 -     |> Chart.WithWidth 1000
2018-09-24 17:23:49 -     |> Chart.WithHeight 700
2018-09-24 17:23:49 - plotNewton()
2018-09-24 17:23:49 - The value or constructor 'Scatter' is not defined.
2018-09-24 17:23:49 - The value or constructor 'Scatter' is not defined.
2018-09-24 17:23:49 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-24 17:23:49 -    char
2018-09-24 17:23:49 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-24 17:23:49 -    char
2018-09-24 17:23:49 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-24 17:23:49 -    char
2018-09-24 17:23:49 - The value or constructor 'plotNewton' is not defined.
2018-09-24 17:24:07 - #load "XPlot.Plotly.Paket.fsx"
2018-09-24 17:24:07 - #load "XPlot.Plotly.fsx"
2018-09-24 17:24:07 - open XPlot.Plotly
2018-09-24 17:24:07 - open System
2018-09-24 17:24:16 - let plotFirstCaseError () =
2018-09-24 17:24:16 -     let trace1 =
2018-09-24 17:24:16 -         let y = points |> List.map f
2018-09-24 17:24:16 -         Scatter(
2018-09-24 17:24:16 -             x = points,
2018-09-24 17:24:16 -             y = y,
2018-09-24 17:24:16 -             name = "Исходная функция"
2018-09-24 17:24:16 -         )
2018-09-24 17:24:16 -     let trace2 =
2018-09-24 17:24:16 -         let y = points |> List.map (polynom 1)
2018-09-24 17:24:16 -         Scatter(
2018-09-24 17:24:16 -             x = points,
2018-09-24 17:24:16 -             y = y,
2018-09-24 17:24:16 -             name = "Интерполяционный полином"
2018-09-24 17:24:16 -         )
2018-09-24 17:24:16 -     [trace1; trace2]
2018-09-24 17:24:16 -     |> Chart.Plot
2018-09-24 17:24:16 -     |> Chart.WithWidth 1000
2018-09-24 17:24:16 -     |> Chart.WithHeight 700
2018-09-24 17:24:16 - plotNewton()
2018-09-24 17:24:16 - The value or constructor 'plotNewton' is not defined.
2018-09-24 17:24:37 - let plotFirstCaseError () =
2018-09-24 17:24:37 -     let trace1 =
2018-09-24 17:24:37 -         let y = points |> List.map f
2018-09-24 17:24:37 -         Scatter(
2018-09-24 17:24:37 -             x = points,
2018-09-24 17:24:37 -             y = y,
2018-09-24 17:24:37 -             name = "Исходная функция"
2018-09-24 17:24:37 -         )
2018-09-24 17:24:37 -     let trace2 =
2018-09-24 17:24:37 -         let y = points |> List.map (polynom 1)
2018-09-24 17:24:37 -         Scatter(
2018-09-24 17:24:37 -             x = points,
2018-09-24 17:24:37 -             y = y,
2018-09-24 17:24:37 -             name = "Интерполяционный полином"
2018-09-24 17:24:37 -         )
2018-09-24 17:24:37 -     [trace1; trace2]
2018-09-24 17:24:37 -     |> Chart.Plot
2018-09-24 17:24:37 -     |> Chart.WithWidth 1000
2018-09-24 17:24:37 -     |> Chart.WithHeight 700
2018-09-24 17:24:37 - plotFirstCaseError()
2018-09-24 17:26:20 - // include directory, this will be replaced by the kernel
2018-09-24 17:26:20 - #I "/home/nbuser/IfSharp/bin"
2018-09-24 17:26:20 - // load base dlls
2018-09-24 17:26:20 - #r "IfSharp.Kernel.dll"
2018-09-24 17:26:20 - #r "NetMQ.dll"
2018-09-24 17:26:20 - // open the global functions and methods
2018-09-24 17:26:20 - open IfSharp.Kernel
2018-09-24 17:26:20 - open IfSharp.Kernel.Globals
2018-09-24 17:26:23 - F# Interactive for F# 4.1
2018-09-24 17:26:23 - Freely distributed under the Apache 2.0 Open Source License
2018-09-24 17:26:23 - For help type #help;;
2018-09-24 17:26:23 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-24 17:26:23 -   seq []
2018-09-24 17:26:23 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-24 17:26:23 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-24 17:26:23 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-24 18:05:29 - //first case
2018-09-24 18:05:29 - let polynom n x =
2018-09-24 18:05:29 -     let t = (x - x0) / h
2018-09-24 18:05:29 -     let Nk =
2018-09-24 18:05:29 -         let rec NkInternal prev cur = seq{
2018-09-24 18:05:29 -             match cur with
2018-09-24 18:05:29 -             | 0. -> yield t
2018-09-24 18:05:29 -                     yield! NkInternal t (cur + 1.)
2018-09-24 18:05:29 -             | _ when int cur = n - 1 -> yield prev * (t - cur) /  (cur + 1.)
2018-09-24 18:05:29 -             | _ -> yield! NkInternal (prev * (t - cur) /  (cur + 1.)) (cur + 1.)
2018-09-24 18:05:29 -         }
2018-09-24 18:05:29 -         NkInternal 1. 0. |> Seq.toList
2018-09-24 18:05:29 -     let finiteDifferencesTable = 
2018-09-24 18:05:29 -         let rec computeCells y acc = 
2018-09-24 18:05:29 -             let computeCol height (prevCol : float list) =
2018-09-24 18:05:29 -                 let rec computeColInternal x acc =
2018-09-24 18:05:29 -                     match x with
2018-09-24 18:05:29 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-24 18:05:29 -                     | _ -> acc
2018-09-24 18:05:29 -                 computeColInternal (n + 1 - height) [] 
2018-09-24 18:05:29 -             match y with
2018-09-24 18:05:29 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (n + 1 - y) acc.[0]) :: acc)
2018-09-24 18:05:29 -             |_ -> List.rev acc
2018-09-24 18:05:29 -         computeCells n [points |> List.map f]
2018-09-24 18:05:29 -     List.fold2 (fun acc nk fd -> acc + nk * fd) (f x0) Nk (finiteDifferencesTable |> List.tail |> List.map (fun x -> x.[0]))
2018-09-24 18:05:29 - The value or constructor 'x0' is not defined. Maybe you want one of the following:
2018-09-24 18:05:29 -    x
2018-09-24 18:05:29 - The value or constructor 'h' is not defined. Maybe you want one of the following:
2018-09-24 18:05:29 -    n
2018-09-24 18:05:29 -    x
2018-09-24 18:05:29 - The value or constructor 'points' is not defined. Maybe you want one of the following:
2018-09-24 18:05:29 -    Printf
2018-09-24 18:05:29 -    printf
2018-09-24 18:05:29 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-09-24 18:05:29 -    n
2018-09-24 18:05:29 -    t
2018-09-24 18:05:29 -    x
2018-09-24 18:05:29 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-09-24 18:05:29 -    n
2018-09-24 18:05:29 -    t
2018-09-24 18:05:29 -    x
2018-09-24 18:05:34 - let plotFirstCaseError () =
2018-09-24 18:05:34 -     let trace1 =
2018-09-24 18:05:34 -         let y = points |> List.map f
2018-09-24 18:05:34 -         Scatter(
2018-09-24 18:05:34 -             x = points,
2018-09-24 18:05:34 -             y = y,
2018-09-24 18:05:34 -             name = "Исходная функция"
2018-09-24 18:05:34 -         )
2018-09-24 18:05:34 -     let trace2 =
2018-09-24 18:05:34 -         let y = points |> List.map (polynom 2)
2018-09-24 18:05:34 -         Scatter(
2018-09-24 18:05:34 -             x = points,
2018-09-24 18:05:34 -             y = y,
2018-09-24 18:05:34 -             name = "Интерполяционный полином"
2018-09-24 18:05:34 -         )
2018-09-24 18:05:34 -     [trace1; trace2]
2018-09-24 18:05:34 -     |> Chart.Plot
2018-09-24 18:05:34 -     |> Chart.WithWidth 1000
2018-09-24 18:05:34 -     |> Chart.WithHeight 700
2018-09-24 18:05:34 - plotFirstCaseError()
2018-09-24 18:05:34 - The value or constructor 'points' is not defined. Maybe you want one of the following:
2018-09-24 18:05:34 -    Printf
2018-09-24 18:05:34 -    printf
2018-09-24 18:05:34 - The value or constructor 'f' is not defined.
2018-09-24 18:05:34 - The value or constructor 'Scatter' is not defined.
2018-09-24 18:05:34 - The value or constructor 'points' is not defined. Maybe you want one of the following:
2018-09-24 18:05:34 -    Printf
2018-09-24 18:05:34 -    printf
2018-09-24 18:05:34 - The value or constructor 'polynom' is not defined.
2018-09-24 18:05:34 - The value or constructor 'Scatter' is not defined.
2018-09-24 18:05:34 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-24 18:05:34 -    char
2018-09-24 18:05:34 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-24 18:05:34 -    char
2018-09-24 18:05:34 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-24 18:05:34 -    char
2018-09-24 18:05:37 - #load "XPlot.Plotly.Paket.fsx"
2018-09-24 18:05:37 - #load "XPlot.Plotly.fsx"
2018-09-24 18:05:37 - open XPlot.Plotly
2018-09-24 18:05:37 - open System
2018-09-24 18:05:40 - let N = 5.
2018-09-24 18:05:40 - let x0 = -(N % 3.)
2018-09-24 18:05:40 - let h = 0.01
2018-09-24 18:05:40 - let points = [x0 .. h .. (x0 + 1.)]
2018-09-24 18:05:40 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-09-24 18:05:40 - //first case
2018-09-24 18:05:40 - let polynom n x =
2018-09-24 18:05:40 -     let t = (x - x0) / h
2018-09-24 18:05:40 -     let Nk =
2018-09-24 18:05:40 -         let rec NkInternal prev cur = seq{
2018-09-24 18:05:40 -             match cur with
2018-09-24 18:05:40 -             | 0. -> yield t
2018-09-24 18:05:40 -                     yield! NkInternal t (cur + 1.)
2018-09-24 18:05:40 -             | _ when int cur = n - 1 -> yield prev * (t - cur) /  (cur + 1.)
2018-09-24 18:05:40 -             | _ -> yield! NkInternal (prev * (t - cur) /  (cur + 1.)) (cur + 1.)
2018-09-24 18:05:40 -         }
2018-09-24 18:05:40 -         NkInternal 1. 0. |> Seq.toList
2018-09-24 18:05:40 -     let finiteDifferencesTable = 
2018-09-24 18:05:40 -         let rec computeCells y acc = 
2018-09-24 18:05:40 -             let computeCol height (prevCol : float list) =
2018-09-24 18:05:40 -                 let rec computeColInternal x acc =
2018-09-24 18:05:40 -                     match x with
2018-09-24 18:05:40 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-24 18:05:40 -                     | _ -> acc
2018-09-24 18:05:40 -                 computeColInternal (n + 1 - height) [] 
2018-09-24 18:05:40 -             match y with
2018-09-24 18:05:40 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (n + 1 - y) acc.[0]) :: acc)
2018-09-24 18:05:40 -             |_ -> List.rev acc
2018-09-24 18:05:40 -         computeCells n [points |> List.map f]
2018-09-24 18:05:40 -     List.fold2 (fun acc nk fd -> acc + nk * fd) (f x0) Nk (finiteDifferencesTable |> List.tail |> List.map (fun x -> x.[0]))
2018-09-24 18:05:40 - let plotFirstCaseError () =
2018-09-24 18:05:40 -     let trace1 =
2018-09-24 18:05:40 -         let y = points |> List.map f
2018-09-24 18:05:40 -         Scatter(
2018-09-24 18:05:40 -             x = points,
2018-09-24 18:05:40 -             y = y,
2018-09-24 18:05:40 -             name = "Исходная функция"
2018-09-24 18:05:40 -         )
2018-09-24 18:05:40 -     let trace2 =
2018-09-24 18:05:40 -         let y = points |> List.map (polynom 2)
2018-09-24 18:05:40 -         Scatter(
2018-09-24 18:05:40 -             x = points,
2018-09-24 18:05:40 -             y = y,
2018-09-24 18:05:40 -             name = "Интерполяционный полином"
2018-09-24 18:05:40 -         )
2018-09-24 18:05:40 -     [trace1; trace2]
2018-09-24 18:05:40 -     |> Chart.Plot
2018-09-24 18:05:40 -     |> Chart.WithWidth 1000
2018-09-24 18:05:40 -     |> Chart.WithHeight 700
2018-09-24 18:05:40 - plotFirstCaseError()
2018-09-24 18:06:44 - let plotFirstCaseError () =
2018-09-24 18:06:44 -     let trace1 =
2018-09-24 18:06:44 -         let y = points |> List.map f
2018-09-24 18:06:44 -         Scatter(
2018-09-24 18:06:44 -             x = points,
2018-09-24 18:06:44 -             y = y,
2018-09-24 18:06:44 -             name = "Исходная функция"
2018-09-24 18:06:44 -         )
2018-09-24 18:06:44 -     let trace2 =
2018-09-24 18:06:44 -         let y = points |> List.map (polynom 10)
2018-09-24 18:06:44 -         Scatter(
2018-09-24 18:06:44 -             x = points,
2018-09-24 18:06:44 -             y = y,
2018-09-24 18:06:44 -             name = "Интерполяционный полином"
2018-09-24 18:06:44 -         )
2018-09-24 18:06:44 -     [trace1; trace2]
2018-09-24 18:06:44 -     |> Chart.Plot
2018-09-24 18:06:44 -     |> Chart.WithWidth 1000
2018-09-24 18:06:44 -     |> Chart.WithHeight 700
2018-09-24 18:06:44 - plotFirstCaseError()
2018-09-24 18:06:44 - Expression evaluation failed: The lists had different lengths.
2018-09-24 18:06:44 - list1 is 8 elements shorter than list2
2018-09-24 18:06:44 - Parameter name: list1
2018-09-24 18:06:44 - ArgumentExceptionThe lists had different lengths.
2018-09-24 18:06:44 - list1 is 8 elements shorter than list2
2018-09-24 18:06:44 - Parameter name: list1
2018-09-24 18:06:44 -   at Microsoft.FSharp.Core.DetailedExceptions.invalidArgDifferentListLength[?] (System.String arg1, System.String arg2, System.Int32 diff) [0x00065] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:06:44 -   at Microsoft.FSharp.Collections.ListModule.loop@245-30[T1,T2,TState] (Microsoft.FSharp.Core.OptimizedClosures+FSharpFunc`4[T1,T2,T3,TResult] f, TState acc, Microsoft.FSharp.Collections.FSharpList`1[T] list1, Microsoft.FSharp.Collections.FSharpList`1[T] list2) [0x0007f] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:06:44 -   at Microsoft.FSharp.Collections.ListModule.Fold2[T1,T2,TState] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] folder, TState state, Microsoft.FSharp.Collections.FSharpList`1[T] list1, Microsoft.FSharp.Collections.FSharpList`1[T] list2) [0x0000a] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:06:44 -   at FSI_0013+y@10-3.Invoke (System.Double x) [0x00001] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:06:44 -   at Microsoft.FSharp.Primitives.Basics.List.map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] x) [0x0003f] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:06:44 -   at Microsoft.FSharp.Collections.ListModule.Map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x00001] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:06:44 -   at FSI_0013.plotFirstCaseError () [0x0005b] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:06:44 -   at <StartupCode$FSI_0013>.$FSI_0013.main@ () [0x00001] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:06:44 -   at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-09-24 18:06:44 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <77c9551943624fd18301ba6f78a841e5>:0 
2018-09-24 18:15:41 - //first case
2018-09-24 18:15:41 - let polynom n x =
2018-09-24 18:15:41 -     let t = (x - x0) / h
2018-09-24 18:15:41 -     let Nk =
2018-09-24 18:15:41 -         let rec NkInternal prev i = seq{
2018-09-24 18:15:41 -             match i with
2018-09-24 18:15:41 -             | 0. -> yield t
2018-09-24 18:15:41 -                     yield! NkInternal t (i + 1.)
2018-09-24 18:15:41 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-09-24 18:15:41 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-09-24 18:15:41 -                     yield cur
2018-09-24 18:15:41 -                     yield! NkInternal cur (i + 1.)
2018-09-24 18:15:41 -         }
2018-09-24 18:15:41 -         NkInternal 1. 0. |> Seq.toList
2018-09-24 18:15:41 -     let finiteDifferencesTable = 
2018-09-24 18:15:41 -         let rec computeCells y acc = 
2018-09-24 18:15:41 -             let computeCol height (prevCol : float list) =
2018-09-24 18:15:41 -                 let rec computeColInternal x acc =
2018-09-24 18:15:41 -                     match x with
2018-09-24 18:15:41 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-24 18:15:41 -                     | _ -> acc
2018-09-24 18:15:41 -                 computeColInternal (n + 1 - height) [] 
2018-09-24 18:15:41 -             match y with
2018-09-24 18:15:41 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (n + 1 - y) acc.[0]) :: acc)
2018-09-24 18:15:41 -             |_ -> List.rev acc
2018-09-24 18:15:41 -         computeCells n [points |> List.map f]
2018-09-24 18:15:41 -     List.fold2 (fun acc nk fd -> acc + nk * fd) (f x0) Nk (finiteDifferencesTable |> List.tail |> List.map (fun x -> x.[0]))
2018-09-24 18:15:42 - let plotFirstCaseError () =
2018-09-24 18:15:42 -     let trace1 =
2018-09-24 18:15:42 -         let y = points |> List.map f
2018-09-24 18:15:42 -         Scatter(
2018-09-24 18:15:42 -             x = points,
2018-09-24 18:15:42 -             y = y,
2018-09-24 18:15:42 -             name = "Исходная функция"
2018-09-24 18:15:42 -         )
2018-09-24 18:15:42 -     let trace2 =
2018-09-24 18:15:42 -         let y = points |> List.map (polynom 10)
2018-09-24 18:15:42 -         Scatter(
2018-09-24 18:15:42 -             x = points,
2018-09-24 18:15:42 -             y = y,
2018-09-24 18:15:42 -             name = "Интерполяционный полином"
2018-09-24 18:15:42 -         )
2018-09-24 18:15:42 -     [trace1; trace2]
2018-09-24 18:15:42 -     |> Chart.Plot
2018-09-24 18:15:42 -     |> Chart.WithWidth 1000
2018-09-24 18:15:42 -     |> Chart.WithHeight 700
2018-09-24 18:15:42 - plotFirstCaseError()
2018-09-24 18:15:58 - let plotFirstCaseError () =
2018-09-24 18:15:58 -     let trace1 =
2018-09-24 18:15:58 -         let y = points |> List.map f
2018-09-24 18:15:58 -         Scatter(
2018-09-24 18:15:58 -             x = points,
2018-09-24 18:15:58 -             y = y,
2018-09-24 18:15:58 -             name = "Исходная функция"
2018-09-24 18:15:58 -         )
2018-09-24 18:15:58 -     let trace2 =
2018-09-24 18:15:58 -         let y = points |> List.map (polynom 100)
2018-09-24 18:15:58 -         Scatter(
2018-09-24 18:15:58 -             x = points,
2018-09-24 18:15:58 -             y = y,
2018-09-24 18:15:58 -             name = "Интерполяционный полином"
2018-09-24 18:15:58 -         )
2018-09-24 18:15:58 -     [trace1; trace2]
2018-09-24 18:15:58 -     |> Chart.Plot
2018-09-24 18:15:58 -     |> Chart.WithWidth 1000
2018-09-24 18:15:58 -     |> Chart.WithHeight 700
2018-09-24 18:15:58 - plotFirstCaseError()
2018-09-24 18:16:17 - let plotFirstCaseError () =
2018-09-24 18:16:17 -     let trace1 =
2018-09-24 18:16:17 -         let y = points |> List.map f
2018-09-24 18:16:17 -         Scatter(
2018-09-24 18:16:17 -             x = points,
2018-09-24 18:16:17 -             y = y,
2018-09-24 18:16:17 -             name = "Исходная функция"
2018-09-24 18:16:17 -         )
2018-09-24 18:16:17 -     let trace2 =
2018-09-24 18:16:17 -         let y = points |> List.map (polynom 10000)
2018-09-24 18:16:17 -         Scatter(
2018-09-24 18:16:17 -             x = points,
2018-09-24 18:16:17 -             y = y,
2018-09-24 18:16:17 -             name = "Интерполяционный полином"
2018-09-24 18:16:17 -         )
2018-09-24 18:16:17 -     [trace1; trace2]
2018-09-24 18:16:17 -     |> Chart.Plot
2018-09-24 18:16:17 -     |> Chart.WithWidth 1000
2018-09-24 18:16:17 -     |> Chart.WithHeight 700
2018-09-24 18:16:17 - plotFirstCaseError()
2018-09-24 18:16:18 - Expression evaluation failed: The index was outside the range of elements in the list.
2018-09-24 18:16:18 - Parameter name: n
2018-09-24 18:16:18 - ArgumentExceptionThe index was outside the range of elements in the list.
2018-09-24 18:16:18 - Parameter name: n
2018-09-24 18:16:18 -   at Microsoft.FSharp.Collections.PrivateListHelpers.nth[a] (Microsoft.FSharp.Collections.FSharpList`1[T] l, System.Int32 n) [0x0005f] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:16:18 -   at Microsoft.FSharp.Collections.FSharpList`1[T].get_Item (System.Int32 index) [0x00001] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:16:18 -   at FSI_0014.computeColInternal@18-1 (Microsoft.FSharp.Collections.FSharpList`1[T] prevCol, System.Int32 x, Microsoft.FSharp.Collections.FSharpList`1[T] acc) [0x0000f] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:16:18 -   at FSI_0014.computeCol@17-1 (System.Int32 n, System.Int32 height, Microsoft.FSharp.Collections.FSharpList`1[T] prevCol) [0x00021] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:16:18 -   at FSI_0014.computeCells@16-1 (System.Int32 n, System.Int32 y, Microsoft.FSharp.Collections.FSharpList`1[T] acc) [0x0003e] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:16:18 -   at FSI_0014.polynom (System.Int32 n, System.Double x) [0x0007a] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:16:18 -   at FSI_0019+y@10-9.Invoke (System.Double x) [0x00001] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:16:18 -   at Microsoft.FSharp.Primitives.Basics.List.map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] x) [0x0003f] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:16:18 -   at Microsoft.FSharp.Collections.ListModule.Map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x00001] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:16:18 -   at FSI_0019.plotFirstCaseError () [0x0005b] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:16:18 -   at <StartupCode$FSI_0019>.$FSI_0019.main@ () [0x00001] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:16:18 -   at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-09-24 18:16:18 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <77c9551943624fd18301ba6f78a841e5>:0 
2018-09-24 18:17:49 - let plotFirstCaseError () =
2018-09-24 18:17:49 -     let trace1 =
2018-09-24 18:17:49 -         let y = points |> List.map f
2018-09-24 18:17:49 -         Scatter(
2018-09-24 18:17:49 -             x = points,
2018-09-24 18:17:49 -             y = y,
2018-09-24 18:17:49 -             name = "Исходная функция"
2018-09-24 18:17:49 -         )
2018-09-24 18:17:49 -     let trace2 =
2018-09-24 18:17:49 -         let y = points |> List.map (polynom 101)
2018-09-24 18:17:49 -         Scatter(
2018-09-24 18:17:49 -             x = points,
2018-09-24 18:17:49 -             y = y,
2018-09-24 18:17:49 -             name = "Интерполяционный полином"
2018-09-24 18:17:49 -         )
2018-09-24 18:17:49 -     [trace1; trace2]
2018-09-24 18:17:49 -     |> Chart.Plot
2018-09-24 18:17:49 -     |> Chart.WithWidth 1000
2018-09-24 18:17:49 -     |> Chart.WithHeight 700
2018-09-24 18:17:49 - plotFirstCaseError()
2018-09-24 18:17:49 - Expression evaluation failed: The index was outside the range of elements in the list.
2018-09-24 18:17:49 - Parameter name: n
2018-09-24 18:17:49 - ArgumentExceptionThe index was outside the range of elements in the list.
2018-09-24 18:17:49 - Parameter name: n
2018-09-24 18:17:49 -   at Microsoft.FSharp.Collections.PrivateListHelpers.nth[a] (Microsoft.FSharp.Collections.FSharpList`1[T] l, System.Int32 n) [0x0005f] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:17:49 -   at Microsoft.FSharp.Collections.FSharpList`1[T].get_Item (System.Int32 index) [0x00001] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:17:49 -   at FSI_0014.computeColInternal@18-1 (Microsoft.FSharp.Collections.FSharpList`1[T] prevCol, System.Int32 x, Microsoft.FSharp.Collections.FSharpList`1[T] acc) [0x0000f] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:17:49 -   at FSI_0014.computeCol@17-1 (System.Int32 n, System.Int32 height, Microsoft.FSharp.Collections.FSharpList`1[T] prevCol) [0x00021] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:17:49 -   at FSI_0014.computeCells@16-1 (System.Int32 n, System.Int32 y, Microsoft.FSharp.Collections.FSharpList`1[T] acc) [0x0003e] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:17:49 -   at FSI_0014.polynom (System.Int32 n, System.Double x) [0x0007a] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:17:49 -   at FSI_0020+y@10-11.Invoke (System.Double x) [0x00001] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:17:49 -   at Microsoft.FSharp.Primitives.Basics.List.map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] x) [0x0003f] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:17:49 -   at Microsoft.FSharp.Collections.ListModule.Map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x00001] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:17:49 -   at FSI_0020.plotFirstCaseError () [0x0005b] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:17:49 -   at <StartupCode$FSI_0020>.$FSI_0020.main@ () [0x00001] in <926491a15786410089c0c7077e70f1f1>:0 
2018-09-24 18:17:49 -   at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-09-24 18:17:49 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <77c9551943624fd18301ba6f78a841e5>:0 
2018-09-24 18:17:54 - let plotFirstCaseError () =
2018-09-24 18:17:54 -     let trace1 =
2018-09-24 18:17:54 -         let y = points |> List.map f
2018-09-24 18:17:54 -         Scatter(
2018-09-24 18:17:54 -             x = points,
2018-09-24 18:17:54 -             y = y,
2018-09-24 18:17:54 -             name = "Исходная функция"
2018-09-24 18:17:54 -         )
2018-09-24 18:17:54 -     let trace2 =
2018-09-24 18:17:54 -         let y = points |> List.map (polynom 100)
2018-09-24 18:17:54 -         Scatter(
2018-09-24 18:17:54 -             x = points,
2018-09-24 18:17:54 -             y = y,
2018-09-24 18:17:54 -             name = "Интерполяционный полином"
2018-09-24 18:17:54 -         )
2018-09-24 18:17:54 -     [trace1; trace2]
2018-09-24 18:17:54 -     |> Chart.Plot
2018-09-24 18:17:54 -     |> Chart.WithWidth 1000
2018-09-24 18:17:54 -     |> Chart.WithHeight 700
2018-09-24 18:17:54 - plotFirstCaseError()
2018-09-24 18:18:16 - let plotFirstCaseError () =
2018-09-24 18:18:16 -     let trace1 =
2018-09-24 18:18:16 -         let y = points |> List.map f
2018-09-24 18:18:16 -         Scatter(
2018-09-24 18:18:16 -             x = points,
2018-09-24 18:18:16 -             y = y,
2018-09-24 18:18:16 -             name = "Исходная функция"
2018-09-24 18:18:16 -         )
2018-09-24 18:18:16 -     let trace2 =
2018-09-24 18:18:16 -         let y = points |> List.map (polynom 1)
2018-09-24 18:18:16 -         Scatter(
2018-09-24 18:18:16 -             x = points,
2018-09-24 18:18:16 -             y = y,
2018-09-24 18:18:16 -             name = "Интерполяционный полином"
2018-09-24 18:18:16 -         )
2018-09-24 18:18:16 -     [trace1; trace2]
2018-09-24 18:18:16 -     |> Chart.Plot
2018-09-24 18:18:16 -     |> Chart.WithWidth 1000
2018-09-24 18:18:16 -     |> Chart.WithHeight 700
2018-09-24 18:18:16 - plotFirstCaseError()
2018-09-24 18:19:35 - // include directory, this will be replaced by the kernel
2018-09-24 18:19:35 - #I "/home/nbuser/IfSharp/bin"
2018-09-24 18:19:35 - // load base dlls
2018-09-24 18:19:35 - #r "IfSharp.Kernel.dll"
2018-09-24 18:19:35 - #r "NetMQ.dll"
2018-09-24 18:19:35 - // open the global functions and methods
2018-09-24 18:19:35 - open IfSharp.Kernel
2018-09-24 18:19:35 - open IfSharp.Kernel.Globals
2018-09-24 18:19:38 - F# Interactive for F# 4.1
2018-09-24 18:19:38 - Freely distributed under the Apache 2.0 Open Source License
2018-09-24 18:19:38 - For help type #help;;
2018-09-24 18:19:38 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-09-24 18:19:38 -   seq []
2018-09-24 18:19:38 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-24 18:19:38 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-24 18:19:38 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-24 18:20:05 - //first case
2018-09-24 18:20:05 - let polynom n x =
2018-09-24 18:20:05 -     let t = (x - x0) / h
2018-09-24 18:20:05 -     let Nk =
2018-09-24 18:20:05 -         let rec NkInternal prev i = seq{
2018-09-24 18:20:05 -             match i with
2018-09-24 18:20:05 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-09-24 18:20:05 -             | 0. -> yield t
2018-09-24 18:20:05 -                     yield! NkInternal t (i + 1.)
2018-09-24 18:20:05 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-09-24 18:20:05 -                     yield cur
2018-09-24 18:20:05 -                     yield! NkInternal cur (i + 1.)
2018-09-24 18:20:05 -         }
2018-09-24 18:20:05 -         NkInternal 1. 0. |> Seq.toList
2018-09-24 18:20:05 -     let finiteDifferencesTable = 
2018-09-24 18:20:05 -         let rec computeCells y acc = 
2018-09-24 18:20:05 -             let computeCol height (prevCol : float list) =
2018-09-24 18:20:05 -                 let rec computeColInternal x acc =
2018-09-24 18:20:05 -                     match x with
2018-09-24 18:20:05 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-24 18:20:05 -                     | _ -> acc
2018-09-24 18:20:05 -                 computeColInternal (n + 1 - height) [] 
2018-09-24 18:20:05 -             match y with
2018-09-24 18:20:05 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (n + 1 - y) acc.[0]) :: acc)
2018-09-24 18:20:05 -             |_ -> List.rev acc
2018-09-24 18:20:05 -         computeCells n [points |> List.map f]
2018-09-24 18:20:05 -     List.fold2 (fun acc nk fd -> acc + nk * fd) (f x0) Nk (finiteDifferencesTable |> List.tail |> List.map (fun x -> x.[0]))
2018-09-24 18:20:05 - The value or constructor 'x0' is not defined. Maybe you want one of the following:
2018-09-24 18:20:05 -    x
2018-09-24 18:20:05 - The value or constructor 'h' is not defined. Maybe you want one of the following:
2018-09-24 18:20:05 -    n
2018-09-24 18:20:05 -    x
2018-09-24 18:20:05 - The value or constructor 'points' is not defined. Maybe you want one of the following:
2018-09-24 18:20:05 -    Printf
2018-09-24 18:20:05 -    printf
2018-09-24 18:20:05 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-09-24 18:20:05 -    n
2018-09-24 18:20:05 -    t
2018-09-24 18:20:05 -    x
2018-09-24 18:20:05 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-09-24 18:20:05 -    n
2018-09-24 18:20:05 -    t
2018-09-24 18:20:05 -    x
2018-09-24 18:20:06 - let plotFirstCaseError () =
2018-09-24 18:20:06 -     let trace1 =
2018-09-24 18:20:06 -         let y = points |> List.map f
2018-09-24 18:20:06 -         Scatter(
2018-09-24 18:20:06 -             x = points,
2018-09-24 18:20:06 -             y = y,
2018-09-24 18:20:06 -             name = "Исходная функция"
2018-09-24 18:20:06 -         )
2018-09-24 18:20:06 -     let trace2 =
2018-09-24 18:20:06 -         let y = points |> List.map (polynom 2)
2018-09-24 18:20:06 -         Scatter(
2018-09-24 18:20:06 -             x = points,
2018-09-24 18:20:06 -             y = y,
2018-09-24 18:20:06 -             name = "Интерполяционный полином"
2018-09-24 18:20:06 -         )
2018-09-24 18:20:06 -     [trace1; trace2]
2018-09-24 18:20:06 -     |> Chart.Plot
2018-09-24 18:20:06 -     |> Chart.WithWidth 1000
2018-09-24 18:20:06 -     |> Chart.WithHeight 700
2018-09-24 18:20:06 - plotFirstCaseError()
2018-09-24 18:20:06 - The value or constructor 'points' is not defined. Maybe you want one of the following:
2018-09-24 18:20:06 -    Printf
2018-09-24 18:20:06 -    printf
2018-09-24 18:20:06 - The value or constructor 'f' is not defined.
2018-09-24 18:20:06 - The value or constructor 'Scatter' is not defined.
2018-09-24 18:20:06 - The value or constructor 'points' is not defined. Maybe you want one of the following:
2018-09-24 18:20:06 -    Printf
2018-09-24 18:20:06 -    printf
2018-09-24 18:20:06 - The value or constructor 'polynom' is not defined.
2018-09-24 18:20:06 - The value or constructor 'Scatter' is not defined.
2018-09-24 18:20:06 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-24 18:20:06 -    char
2018-09-24 18:20:06 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-24 18:20:06 -    char
2018-09-24 18:20:06 - The value, namespace, type or module 'Chart' is not defined. Maybe you want one of the following:
2018-09-24 18:20:06 -    char
2018-09-24 18:20:11 - #load "XPlot.Plotly.Paket.fsx"
2018-09-24 18:20:11 - #load "XPlot.Plotly.fsx"
2018-09-24 18:20:11 - open XPlot.Plotly
2018-09-24 18:20:11 - open System
2018-09-24 18:20:14 - let N = 5.
2018-09-24 18:20:14 - let x0 = -(N % 3.)
2018-09-24 18:20:14 - let h = 0.01
2018-09-24 18:20:14 - let points = [x0 .. h .. (x0 + 1.)]
2018-09-24 18:20:14 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-09-24 18:20:14 - //first case
2018-09-24 18:20:14 - let polynom n x =
2018-09-24 18:20:14 -     let t = (x - x0) / h
2018-09-24 18:20:14 -     let Nk =
2018-09-24 18:20:14 -         let rec NkInternal prev i = seq{
2018-09-24 18:20:14 -             match i with
2018-09-24 18:20:14 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-09-24 18:20:14 -             | 0. -> yield t
2018-09-24 18:20:14 -                     yield! NkInternal t (i + 1.)
2018-09-24 18:20:14 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-09-24 18:20:14 -                     yield cur
2018-09-24 18:20:14 -                     yield! NkInternal cur (i + 1.)
2018-09-24 18:20:14 -         }
2018-09-24 18:20:14 -         NkInternal 1. 0. |> Seq.toList
2018-09-24 18:20:14 -     let finiteDifferencesTable = 
2018-09-24 18:20:14 -         let rec computeCells y acc = 
2018-09-24 18:20:14 -             let computeCol height (prevCol : float list) =
2018-09-24 18:20:14 -                 let rec computeColInternal x acc =
2018-09-24 18:20:14 -                     match x with
2018-09-24 18:20:14 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-24 18:20:14 -                     | _ -> acc
2018-09-24 18:20:14 -                 computeColInternal (n + 1 - height) [] 
2018-09-24 18:20:14 -             match y with
2018-09-24 18:20:14 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (n + 1 - y) acc.[0]) :: acc)
2018-09-24 18:20:14 -             |_ -> List.rev acc
2018-09-24 18:20:14 -         computeCells n [points |> List.map f]
2018-09-24 18:20:14 -     List.fold2 (fun acc nk fd -> acc + nk * fd) (f x0) Nk (finiteDifferencesTable |> List.tail |> List.map (fun x -> x.[0]))
2018-09-24 18:20:14 - let plotFirstCaseError () =
2018-09-24 18:20:14 -     let trace1 =
2018-09-24 18:20:14 -         let y = points |> List.map f
2018-09-24 18:20:14 -         Scatter(
2018-09-24 18:20:14 -             x = points,
2018-09-24 18:20:14 -             y = y,
2018-09-24 18:20:14 -             name = "Исходная функция"
2018-09-24 18:20:14 -         )
2018-09-24 18:20:14 -     let trace2 =
2018-09-24 18:20:14 -         let y = points |> List.map (polynom 2)
2018-09-24 18:20:14 -         Scatter(
2018-09-24 18:20:14 -             x = points,
2018-09-24 18:20:14 -             y = y,
2018-09-24 18:20:14 -             name = "Интерполяционный полином"
2018-09-24 18:20:14 -         )
2018-09-24 18:20:14 -     [trace1; trace2]
2018-09-24 18:20:14 -     |> Chart.Plot
2018-09-24 18:20:14 -     |> Chart.WithWidth 1000
2018-09-24 18:20:14 -     |> Chart.WithHeight 700
2018-09-24 18:20:14 - plotFirstCaseError()
2018-09-24 18:20:38 - let plotFirstCaseError () =
2018-09-24 18:20:38 -     let trace1 =
2018-09-24 18:20:38 -         let y = points |> List.map f
2018-09-24 18:20:38 -         Scatter(
2018-09-24 18:20:38 -             x = points,
2018-09-24 18:20:38 -             y = y,
2018-09-24 18:20:38 -             name = "Исходная функция"
2018-09-24 18:20:38 -         )
2018-09-24 18:20:38 -     let trace2 =
2018-09-24 18:20:38 -         let y = points |> List.map (polynom 1)
2018-09-24 18:20:38 -         Scatter(
2018-09-24 18:20:38 -             x = points,
2018-09-24 18:20:38 -             y = y,
2018-09-24 18:20:38 -             name = "Интерполяционный полином"
2018-09-24 18:20:38 -         )
2018-09-24 18:20:38 -     [trace1; trace2]
2018-09-24 18:20:38 -     |> Chart.Plot
2018-09-24 18:20:38 -     |> Chart.WithWidth 1000
2018-09-24 18:20:38 -     |> Chart.WithHeight 700
2018-09-24 18:20:38 - plotFirstCaseError()
2018-09-24 18:47:17 - //second case
2018-09-24 18:47:17 - let polynom2 n x =
2018-09-24 18:47:17 -     let t = (x - xm) / h
2018-09-24 18:47:17 -     let Nk =
2018-09-24 18:47:17 -         let rec NkInternal prev i = seq{
2018-09-24 18:47:17 -             match i with
2018-09-24 18:47:17 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-09-24 18:47:17 -             | 0. -> yield t
2018-09-24 18:47:17 -                     yield! NkInternal t (i + 1.)
2018-09-24 18:47:17 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-09-24 18:47:17 -                     yield cur
2018-09-24 18:47:17 -                     yield! NkInternal cur (i + 1.)
2018-09-24 18:47:17 -         }
2018-09-24 18:47:17 -         NkInternal 1. 0. |> Seq.toList
2018-09-24 18:47:17 -     let finiteDifferencesTable = 
2018-09-24 18:47:17 -         let rec computeCells y acc = 
2018-09-24 18:47:17 -             let computeCol height (prevCol : float list) =
2018-09-24 18:47:17 -                 let rec computeColInternal x acc =
2018-09-24 18:47:17 -                     match x with
2018-09-24 18:47:17 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-24 18:47:17 -                     | _ -> acc
2018-09-24 18:47:17 -                 computeColInternal (n + 1 - height) [] 
2018-09-24 18:47:17 -             match y with
2018-09-24 18:47:17 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (n + 1 - y) acc.[0]) :: acc)
2018-09-24 18:47:17 -             |_ -> List.rev acc
2018-09-24 18:47:17 -         computeCells n [points |> List.map f]
2018-09-24 18:47:17 -     
2018-09-24 18:47:17 -     let rec polynom2Internal nki finiteDifference k acc =
2018-09-24 18:47:17 -         match nki, finiteDifference with
2018-09-24 18:47:17 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length - k - 2])
2018-09-24 18:47:17 -         | _ -> acc
2018-09-24 18:47:17 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-09-24 18:47:17 - The value or constructor 'xm' is not defined. Maybe you want one of the following:
2018-09-24 18:47:17 -    Xml
2018-09-24 18:47:17 -    X
2018-09-24 18:47:17 -    x
2018-09-24 18:47:17 -    x0
2018-09-24 18:47:17 - The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints
2018-09-24 18:47:17 - The value or constructor 'xm' is not defined. Maybe you want one of the following:
2018-09-24 18:47:17 -    Xml
2018-09-24 18:47:17 -    X
2018-09-24 18:47:17 -    x
2018-09-24 18:47:17 -    x0
2018-09-24 18:47:33 - let N = 5.
2018-09-24 18:47:33 - let x0 = -(N % 3.)
2018-09-24 18:47:33 - let xm = x0 + 1.
2018-09-24 18:47:33 - let h = 0.01
2018-09-24 18:47:33 - let points = [x0 .. h .. xm]
2018-09-24 18:47:33 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-09-24 18:47:37 - //second case
2018-09-24 18:47:37 - let polynom2 n x =
2018-09-24 18:47:37 -     let t = (x - xm) / h
2018-09-24 18:47:37 -     let Nk =
2018-09-24 18:47:37 -         let rec NkInternal prev i = seq{
2018-09-24 18:47:37 -             match i with
2018-09-24 18:47:37 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-09-24 18:47:37 -             | 0. -> yield t
2018-09-24 18:47:37 -                     yield! NkInternal t (i + 1.)
2018-09-24 18:47:37 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-09-24 18:47:37 -                     yield cur
2018-09-24 18:47:37 -                     yield! NkInternal cur (i + 1.)
2018-09-24 18:47:37 -         }
2018-09-24 18:47:37 -         NkInternal 1. 0. |> Seq.toList
2018-09-24 18:47:37 -     let finiteDifferencesTable = 
2018-09-24 18:47:37 -         let rec computeCells y acc = 
2018-09-24 18:47:37 -             let computeCol height (prevCol : float list) =
2018-09-24 18:47:37 -                 let rec computeColInternal x acc =
2018-09-24 18:47:37 -                     match x with
2018-09-24 18:47:37 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-24 18:47:37 -                     | _ -> acc
2018-09-24 18:47:37 -                 computeColInternal (n + 1 - height) [] 
2018-09-24 18:47:37 -             match y with
2018-09-24 18:47:37 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (n + 1 - y) acc.[0]) :: acc)
2018-09-24 18:47:37 -             |_ -> List.rev acc
2018-09-24 18:47:37 -         computeCells n [points |> List.map f]
2018-09-24 18:47:37 -     
2018-09-24 18:47:37 -     let rec polynom2Internal nki finiteDifference k acc =
2018-09-24 18:47:37 -         match nki, finiteDifference with
2018-09-24 18:47:37 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length - k - 2])
2018-09-24 18:47:37 -         | _ -> acc
2018-09-24 18:47:37 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-09-24 18:47:37 - The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints
2018-09-24 18:49:32 - //second case
2018-09-24 18:49:32 - let polynom2 n x =
2018-09-24 18:49:32 -     let t = (x - xm) / h
2018-09-24 18:49:32 -     let Nk =
2018-09-24 18:49:32 -         let rec NkInternal prev i = seq{
2018-09-24 18:49:32 -             match i with
2018-09-24 18:49:32 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-09-24 18:49:32 -             | 0. -> yield t
2018-09-24 18:49:32 -                     yield! NkInternal t (i + 1.)
2018-09-24 18:49:32 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-09-24 18:49:32 -                     yield cur
2018-09-24 18:49:32 -                     yield! NkInternal cur (i + 1.)
2018-09-24 18:49:32 -         }
2018-09-24 18:49:32 -         NkInternal 1. 0. |> Seq.toList
2018-09-24 18:49:32 -     let finiteDifferencesTable = 
2018-09-24 18:49:32 -         let rec computeCells y acc = 
2018-09-24 18:49:32 -             let computeCol height (prevCol : float list) =
2018-09-24 18:49:32 -                 let rec computeColInternal x acc =
2018-09-24 18:49:32 -                     match x with
2018-09-24 18:49:32 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-24 18:49:32 -                     | _ -> acc
2018-09-24 18:49:32 -                 computeColInternal (n + 1 - height) [] 
2018-09-24 18:49:32 -             match y with
2018-09-24 18:49:32 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (n + 1 - y) acc.[0]) :: acc)
2018-09-24 18:49:32 -             |_ -> List.rev acc
2018-09-24 18:49:32 -         computeCells n [points |> List.map f]
2018-09-24 18:49:32 -     
2018-09-24 18:49:32 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-24 18:49:32 -         match nki, finiteDifference with
2018-09-24 18:49:32 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length - k - 2])
2018-09-24 18:49:32 -         | _ -> acc
2018-09-24 18:49:32 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-09-24 18:50:01 - let plotSecondCaseError () =
2018-09-24 18:50:01 -     let trace1 =
2018-09-24 18:50:01 -         let y = points |> List.map f
2018-09-24 18:50:01 -         Scatter(
2018-09-24 18:50:01 -             x = points,
2018-09-24 18:50:01 -             y = y,
2018-09-24 18:50:01 -             name = "Исходная функция"
2018-09-24 18:50:01 -         )
2018-09-24 18:50:01 -     let trace2 =
2018-09-24 18:50:01 -         let y = points |> List.map (polynom2 1)
2018-09-24 18:50:01 -         Scatter(
2018-09-24 18:50:01 -             x = points,
2018-09-24 18:50:01 -             y = y,
2018-09-24 18:50:01 -             name = "Интерполяционный полином"
2018-09-24 18:50:01 -         )
2018-09-24 18:50:01 -     [trace1; trace2]
2018-09-24 18:50:01 -     |> Chart.Plot
2018-09-24 18:50:01 -     |> Chart.WithWidth 1000
2018-09-24 18:50:01 -     |> Chart.WithHeight 700
2018-09-24 18:50:01 - plotFirstCaseError()
2018-09-24 18:50:49 - let plotSecondCaseError () =
2018-09-24 18:50:49 -     let trace1 =
2018-09-24 18:50:49 -         let y = points |> List.map f
2018-09-24 18:50:49 -         Scatter(
2018-09-24 18:50:49 -             x = points,
2018-09-24 18:50:49 -             y = y,
2018-09-24 18:50:49 -             name = "Исходная функция"
2018-09-24 18:50:49 -         )
2018-09-24 18:50:49 -     let trace2 =
2018-09-24 18:50:49 -         let y = points |> List.map (polynom2 100)
2018-09-24 18:50:49 -         Scatter(
2018-09-24 18:50:49 -             x = points,
2018-09-24 18:50:49 -             y = y,
2018-09-24 18:50:49 -             name = "Интерполяционный полином"
2018-09-24 18:50:49 -         )
2018-09-24 18:50:49 -     [trace1; trace2]
2018-09-24 18:50:49 -     |> Chart.Plot
2018-09-24 18:50:49 -     |> Chart.WithWidth 1000
2018-09-24 18:50:49 -     |> Chart.WithHeight 700
2018-09-24 18:50:49 - plotFirstCaseError()
2018-09-24 18:51:07 - let plotSecondCaseError () =
2018-09-24 18:51:07 -     let trace1 =
2018-09-24 18:51:07 -         let y = points |> List.map f
2018-09-24 18:51:07 -         Scatter(
2018-09-24 18:51:07 -             x = points,
2018-09-24 18:51:07 -             y = y,
2018-09-24 18:51:07 -             name = "Исходная функция"
2018-09-24 18:51:07 -         )
2018-09-24 18:51:07 -     let trace2 =
2018-09-24 18:51:07 -         let y = points |> List.map (polynom2 1)
2018-09-24 18:51:07 -         Scatter(
2018-09-24 18:51:07 -             x = points,
2018-09-24 18:51:07 -             y = y,
2018-09-24 18:51:07 -             name = "Интерполяционный полином"
2018-09-24 18:51:07 -         )
2018-09-24 18:51:07 -     [trace1; trace2]
2018-09-24 18:51:07 -     |> Chart.Plot
2018-09-24 18:51:07 -     |> Chart.WithWidth 1000
2018-09-24 18:51:07 -     |> Chart.WithHeight 700
2018-09-24 18:51:07 - plotSecondCaseError()
2018-09-24 18:51:07 - Expression evaluation failed: The input must be non-negative.
2018-09-24 18:51:07 - Parameter name: n
2018-09-24 18:51:07 - ArgumentExceptionThe input must be non-negative.
2018-09-24 18:51:07 - Parameter name: n
2018-09-24 18:51:07 -   at Microsoft.FSharp.Collections.PrivateListHelpers.nth[a] (Microsoft.FSharp.Collections.FSharpList`1[T] l, System.Int32 n) [0x00031] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:51:07 -   at Microsoft.FSharp.Collections.FSharpList`1[T].get_Item (System.Int32 index) [0x00001] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:51:07 -   at FSI_0018.polynom2Internal@28 (Microsoft.FSharp.Collections.FSharpList`1[T] nki, Microsoft.FSharp.Collections.FSharpList`1[T] finiteDifference, System.Int32 k, System.Double acc) [0x00088] in <61b4ee170aa9459eb2f9d22e25dde606>:0 
2018-09-24 18:51:07 -   at FSI_0018.polynom2 (System.Int32 n, System.Double x) [0x0009f] in <61b4ee170aa9459eb2f9d22e25dde606>:0 
2018-09-24 18:51:07 -   at FSI_0023+y@10-9.Invoke (System.Double x) [0x00001] in <61b4ee170aa9459eb2f9d22e25dde606>:0 
2018-09-24 18:51:07 -   at Microsoft.FSharp.Primitives.Basics.List.map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] x) [0x0003f] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:51:07 -   at Microsoft.FSharp.Collections.ListModule.Map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x00001] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:51:07 -   at FSI_0023.plotSecondCaseError () [0x0005b] in <61b4ee170aa9459eb2f9d22e25dde606>:0 
2018-09-24 18:51:07 -   at <StartupCode$FSI_0023>.$FSI_0023.main@ () [0x00001] in <61b4ee170aa9459eb2f9d22e25dde606>:0 
2018-09-24 18:51:07 -   at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-09-24 18:51:07 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <77c9551943624fd18301ba6f78a841e5>:0 
2018-09-24 18:58:26 - //second case
2018-09-24 18:58:26 - let polynom2 n x =
2018-09-24 18:58:26 -     let t = (x - xm) / h
2018-09-24 18:58:26 -     let Nk =
2018-09-24 18:58:26 -         let rec NkInternal prev i = seq{
2018-09-24 18:58:26 -             match i with
2018-09-24 18:58:26 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-09-24 18:58:26 -             | 0. -> yield t
2018-09-24 18:58:26 -                     yield! NkInternal t (i + 1.)
2018-09-24 18:58:26 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-09-24 18:58:26 -                     yield cur
2018-09-24 18:58:26 -                     yield! NkInternal cur (i + 1.)
2018-09-24 18:58:26 -         }
2018-09-24 18:58:26 -         NkInternal 1. 0. |> Seq.toList
2018-09-24 18:58:26 -     let finiteDifferencesTable = 
2018-09-24 18:58:26 -         let rec computeCells y acc = 
2018-09-24 18:58:26 -             let computeCol height (prevCol : float list) =
2018-09-24 18:58:26 -                 let rec computeColInternal x acc =
2018-09-24 18:58:26 -                     match x with
2018-09-24 18:58:26 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-24 18:58:26 -                     | _ -> acc
2018-09-24 18:58:26 -                 computeColInternal (n + 1 - height) [] 
2018-09-24 18:58:26 -             match y with
2018-09-24 18:58:26 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (n + 1 - y) acc.[0]) :: acc)
2018-09-24 18:58:26 -             |_ -> List.rev acc
2018-09-24 18:58:26 -         computeCells n [points |> List.map f]
2018-09-24 18:58:26 -     
2018-09-24 18:58:26 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-24 18:58:26 -         match nki, finiteDifference with
2018-09-24 18:58:26 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n - 1 -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length - k - 2])
2018-09-24 18:58:26 -         | _ -> acc
2018-09-24 18:58:26 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-09-24 18:58:27 - let plotSecondCaseError () =
2018-09-24 18:58:27 -     let trace1 =
2018-09-24 18:58:27 -         let y = points |> List.map f
2018-09-24 18:58:27 -         Scatter(
2018-09-24 18:58:27 -             x = points,
2018-09-24 18:58:27 -             y = y,
2018-09-24 18:58:27 -             name = "Исходная функция"
2018-09-24 18:58:27 -         )
2018-09-24 18:58:27 -     let trace2 =
2018-09-24 18:58:27 -         let y = points |> List.map (polynom2 1)
2018-09-24 18:58:27 -         Scatter(
2018-09-24 18:58:27 -             x = points,
2018-09-24 18:58:27 -             y = y,
2018-09-24 18:58:27 -             name = "Интерполяционный полином"
2018-09-24 18:58:27 -         )
2018-09-24 18:58:27 -     [trace1; trace2]
2018-09-24 18:58:27 -     |> Chart.Plot
2018-09-24 18:58:27 -     |> Chart.WithWidth 1000
2018-09-24 18:58:27 -     |> Chart.WithHeight 700
2018-09-24 18:58:27 - plotSecondCaseError()
2018-09-24 18:58:40 - let plotSecondCaseError () =
2018-09-24 18:58:40 -     let trace1 =
2018-09-24 18:58:40 -         let y = points |> List.map f
2018-09-24 18:58:40 -         Scatter(
2018-09-24 18:58:40 -             x = points,
2018-09-24 18:58:40 -             y = y,
2018-09-24 18:58:40 -             name = "Исходная функция"
2018-09-24 18:58:40 -         )
2018-09-24 18:58:40 -     let trace2 =
2018-09-24 18:58:40 -         let y = points |> List.map (polynom2 2)
2018-09-24 18:58:40 -         Scatter(
2018-09-24 18:58:40 -             x = points,
2018-09-24 18:58:40 -             y = y,
2018-09-24 18:58:40 -             name = "Интерполяционный полином"
2018-09-24 18:58:40 -         )
2018-09-24 18:58:40 -     [trace1; trace2]
2018-09-24 18:58:40 -     |> Chart.Plot
2018-09-24 18:58:40 -     |> Chart.WithWidth 1000
2018-09-24 18:58:40 -     |> Chart.WithHeight 700
2018-09-24 18:58:40 - plotSecondCaseError()
2018-09-24 18:58:58 - let plotSecondCaseError () =
2018-09-24 18:58:58 -     let trace1 =
2018-09-24 18:58:58 -         let y = points |> List.map f
2018-09-24 18:58:58 -         Scatter(
2018-09-24 18:58:58 -             x = points,
2018-09-24 18:58:58 -             y = y,
2018-09-24 18:58:58 -             name = "Исходная функция"
2018-09-24 18:58:58 -         )
2018-09-24 18:58:58 -     let trace2 =
2018-09-24 18:58:58 -         let y = points |> List.map (polynom2 3)
2018-09-24 18:58:58 -         Scatter(
2018-09-24 18:58:58 -             x = points,
2018-09-24 18:58:58 -             y = y,
2018-09-24 18:58:58 -             name = "Интерполяционный полином"
2018-09-24 18:58:58 -         )
2018-09-24 18:58:58 -     [trace1; trace2]
2018-09-24 18:58:58 -     |> Chart.Plot
2018-09-24 18:58:58 -     |> Chart.WithWidth 1000
2018-09-24 18:58:58 -     |> Chart.WithHeight 700
2018-09-24 18:58:58 - plotSecondCaseError()
2018-09-24 18:58:58 - Expression evaluation failed: The input must be non-negative.
2018-09-24 18:58:58 - Parameter name: n
2018-09-24 18:58:58 - ArgumentExceptionThe input must be non-negative.
2018-09-24 18:58:58 - Parameter name: n
2018-09-24 18:58:58 -   at Microsoft.FSharp.Collections.PrivateListHelpers.nth[a] (Microsoft.FSharp.Collections.FSharpList`1[T] l, System.Int32 n) [0x00031] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:58:58 -   at Microsoft.FSharp.Collections.FSharpList`1[T].get_Item (System.Int32 index) [0x00001] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:58:58 -   at FSI_0024.polynom2Internal@28-1 (System.Int32 n, Microsoft.FSharp.Collections.FSharpList`1[T] nki, Microsoft.FSharp.Collections.FSharpList`1[T] finiteDifference, System.Int32 k, System.Double acc) [0x0009f] in <61b4ee170aa9459eb2f9d22e25dde606>:0 
2018-09-24 18:58:58 -   at FSI_0024.polynom2 (System.Int32 n, System.Double x) [0x000ab] in <61b4ee170aa9459eb2f9d22e25dde606>:0 
2018-09-24 18:58:58 -   at FSI_0029+y@10-15.Invoke (System.Double x) [0x00001] in <61b4ee170aa9459eb2f9d22e25dde606>:0 
2018-09-24 18:58:58 -   at Microsoft.FSharp.Primitives.Basics.List.map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] x) [0x0003f] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:58:58 -   at Microsoft.FSharp.Collections.ListModule.Map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x00001] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 18:58:58 -   at FSI_0029.plotSecondCaseError () [0x0005b] in <61b4ee170aa9459eb2f9d22e25dde606>:0 
2018-09-24 18:58:58 -   at <StartupCode$FSI_0029>.$FSI_0029.main@ () [0x00001] in <61b4ee170aa9459eb2f9d22e25dde606>:0 
2018-09-24 18:58:58 -   at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-09-24 18:58:58 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <77c9551943624fd18301ba6f78a841e5>:0 
2018-09-24 19:06:47 - //second case
2018-09-24 19:06:47 - let polynom2 n x =
2018-09-24 19:06:47 -     let t = (x - xm) / h
2018-09-24 19:06:47 -     let Nk =
2018-09-24 19:06:47 -         let rec NkInternal prev i = seq{
2018-09-24 19:06:47 -             match i with
2018-09-24 19:06:47 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-09-24 19:06:47 -             | 0. -> yield t
2018-09-24 19:06:47 -                     yield! NkInternal t (i + 1.)
2018-09-24 19:06:47 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-09-24 19:06:47 -                     yield cur
2018-09-24 19:06:47 -                     yield! NkInternal cur (i + 1.)
2018-09-24 19:06:47 -         }
2018-09-24 19:06:47 -         NkInternal 1. 0. |> Seq.toList
2018-09-24 19:06:47 -     let finiteDifferencesTable = 
2018-09-24 19:06:47 -         let rec computeCells y acc = 
2018-09-24 19:06:47 -             let computeCol height (prevCol : float list) =
2018-09-24 19:06:47 -                 let rec computeColInternal x acc =
2018-09-24 19:06:47 -                     match x with
2018-09-24 19:06:47 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-24 19:06:47 -                     | _ -> acc
2018-09-24 19:06:47 -                 computeColInternal (n + 1 - height) [] 
2018-09-24 19:06:47 -             match y with
2018-09-24 19:06:47 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (n + 1 - y) acc.[0]) :: acc)
2018-09-24 19:06:47 -             |_ -> List.rev acc
2018-09-24 19:06:47 -         computeCells n [points |> List.map f]
2018-09-24 19:06:47 -     
2018-09-24 19:06:47 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-24 19:06:47 -         match nki, finiteDifference with
2018-09-24 19:06:47 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n - 1 -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length - k - 1])
2018-09-24 19:06:47 -         | _ -> acc
2018-09-24 19:06:47 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-09-24 19:06:48 - let plotSecondCaseError () =
2018-09-24 19:06:48 -     let trace1 =
2018-09-24 19:06:48 -         let y = points |> List.map f
2018-09-24 19:06:48 -         Scatter(
2018-09-24 19:06:48 -             x = points,
2018-09-24 19:06:48 -             y = y,
2018-09-24 19:06:48 -             name = "Исходная функция"
2018-09-24 19:06:48 -         )
2018-09-24 19:06:48 -     let trace2 =
2018-09-24 19:06:48 -         let y = points |> List.map (polynom2 3)
2018-09-24 19:06:48 -         Scatter(
2018-09-24 19:06:48 -             x = points,
2018-09-24 19:06:48 -             y = y,
2018-09-24 19:06:48 -             name = "Интерполяционный полином"
2018-09-24 19:06:48 -         )
2018-09-24 19:06:48 -     [trace1; trace2]
2018-09-24 19:06:48 -     |> Chart.Plot
2018-09-24 19:06:48 -     |> Chart.WithWidth 1000
2018-09-24 19:06:48 -     |> Chart.WithHeight 700
2018-09-24 19:06:48 - plotSecondCaseError()
2018-09-24 19:06:59 - let plotSecondCaseError () =
2018-09-24 19:06:59 -     let trace1 =
2018-09-24 19:06:59 -         let y = points |> List.map f
2018-09-24 19:06:59 -         Scatter(
2018-09-24 19:06:59 -             x = points,
2018-09-24 19:06:59 -             y = y,
2018-09-24 19:06:59 -             name = "Исходная функция"
2018-09-24 19:06:59 -         )
2018-09-24 19:06:59 -     let trace2 =
2018-09-24 19:06:59 -         let y = points |> List.map (polynom2 10)
2018-09-24 19:06:59 -         Scatter(
2018-09-24 19:06:59 -             x = points,
2018-09-24 19:06:59 -             y = y,
2018-09-24 19:06:59 -             name = "Интерполяционный полином"
2018-09-24 19:06:59 -         )
2018-09-24 19:06:59 -     [trace1; trace2]
2018-09-24 19:06:59 -     |> Chart.Plot
2018-09-24 19:06:59 -     |> Chart.WithWidth 1000
2018-09-24 19:06:59 -     |> Chart.WithHeight 700
2018-09-24 19:06:59 - plotSecondCaseError()
2018-09-24 19:06:59 - Expression evaluation failed: The input must be non-negative.
2018-09-24 19:06:59 - Parameter name: n
2018-09-24 19:06:59 - ArgumentExceptionThe input must be non-negative.
2018-09-24 19:06:59 - Parameter name: n
2018-09-24 19:06:59 -   at Microsoft.FSharp.Collections.PrivateListHelpers.nth[a] (Microsoft.FSharp.Collections.FSharpList`1[T] l, System.Int32 n) [0x00031] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 19:06:59 -   at Microsoft.FSharp.Collections.FSharpList`1[T].get_Item (System.Int32 index) [0x00001] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 19:06:59 -   at FSI_0030.polynom2Internal@28-2 (System.Int32 n, Microsoft.FSharp.Collections.FSharpList`1[T] nki, Microsoft.FSharp.Collections.FSharpList`1[T] finiteDifference, System.Int32 k, System.Double acc) [0x0009f] in <61b4ee170aa9459eb2f9d22e25dde606>:0 
2018-09-24 19:06:59 -   at FSI_0030.polynom2 (System.Int32 n, System.Double x) [0x000ab] in <61b4ee170aa9459eb2f9d22e25dde606>:0 
2018-09-24 19:06:59 -   at FSI_0033+y@10-19.Invoke (System.Double x) [0x00001] in <61b4ee170aa9459eb2f9d22e25dde606>:0 
2018-09-24 19:06:59 -   at Microsoft.FSharp.Primitives.Basics.List.map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] x) [0x0003f] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 19:06:59 -   at Microsoft.FSharp.Collections.ListModule.Map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x00001] in <5939249c904cf4daa74503839c243959>:0 
2018-09-24 19:06:59 -   at FSI_0033.plotSecondCaseError () [0x0005b] in <61b4ee170aa9459eb2f9d22e25dde606>:0 
2018-09-24 19:06:59 -   at <StartupCode$FSI_0033>.$FSI_0033.main@ () [0x00001] in <61b4ee170aa9459eb2f9d22e25dde606>:0 
2018-09-24 19:06:59 -   at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-09-24 19:06:59 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <77c9551943624fd18301ba6f78a841e5>:0 
2018-09-24 19:17:09 - //second case
2018-09-24 19:17:09 - let polynom2 n x =
2018-09-24 19:17:09 -     let t = (x - xm) / h
2018-09-24 19:17:09 -     let Nk =
2018-09-24 19:17:09 -         let rec NkInternal prev i = seq{
2018-09-24 19:17:09 -             match i with
2018-09-24 19:17:09 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-09-24 19:17:09 -             | 0. -> yield t
2018-09-24 19:17:09 -                     yield! NkInternal t (i + 1.)
2018-09-24 19:17:09 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-09-24 19:17:09 -                     yield cur
2018-09-24 19:17:09 -                     yield! NkInternal cur (i + 1.)
2018-09-24 19:17:09 -         }
2018-09-24 19:17:09 -         NkInternal 1. 0. |> Seq.toList
2018-09-24 19:17:09 -     let finiteDifferencesTable = 
2018-09-24 19:17:09 -         let rec computeCells y acc = 
2018-09-24 19:17:09 -             let computeCol height (prevCol : float list) =
2018-09-24 19:17:09 -                 let rec computeColInternal x acc =
2018-09-24 19:17:09 -                     match x with
2018-09-24 19:17:09 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-24 19:17:09 -                     | _ -> acc
2018-09-24 19:17:09 -                 computeColInternal (points.Length - height) [] 
2018-09-24 19:17:09 -             match y with
2018-09-24 19:17:09 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-24 19:17:09 -             |_ -> List.rev acc
2018-09-24 19:17:09 -         computeCells (points.Length - 1) [points |> List.map f]
2018-09-24 19:17:09 -     
2018-09-24 19:17:09 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-24 19:17:09 -         match nki, finiteDifference with
2018-09-24 19:17:09 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n - 1 -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length - 1])
2018-09-24 19:17:09 -         | _ -> acc
2018-09-24 19:17:09 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-09-24 19:17:10 - let plotSecondCaseError () =
2018-09-24 19:17:10 -     let trace1 =
2018-09-24 19:17:10 -         let y = points |> List.map f
2018-09-24 19:17:10 -         Scatter(
2018-09-24 19:17:10 -             x = points,
2018-09-24 19:17:10 -             y = y,
2018-09-24 19:17:10 -             name = "Исходная функция"
2018-09-24 19:17:10 -         )
2018-09-24 19:17:10 -     let trace2 =
2018-09-24 19:17:10 -         let y = points |> List.map (polynom2 10)
2018-09-24 19:17:10 -         Scatter(
2018-09-24 19:17:10 -             x = points,
2018-09-24 19:17:10 -             y = y,
2018-09-24 19:17:10 -             name = "Интерполяционный полином"
2018-09-24 19:17:10 -         )
2018-09-24 19:17:10 -     [trace1; trace2]
2018-09-24 19:17:10 -     |> Chart.Plot
2018-09-24 19:17:10 -     |> Chart.WithWidth 1000
2018-09-24 19:17:10 -     |> Chart.WithHeight 700
2018-09-24 19:17:10 - plotSecondCaseError()
2018-09-24 19:17:18 - let plotSecondCaseError () =
2018-09-24 19:17:18 -     let trace1 =
2018-09-24 19:17:18 -         let y = points |> List.map f
2018-09-24 19:17:18 -         Scatter(
2018-09-24 19:17:18 -             x = points,
2018-09-24 19:17:18 -             y = y,
2018-09-24 19:17:18 -             name = "Исходная функция"
2018-09-24 19:17:18 -         )
2018-09-24 19:17:18 -     let trace2 =
2018-09-24 19:17:18 -         let y = points |> List.map (polynom2 100)
2018-09-24 19:17:18 -         Scatter(
2018-09-24 19:17:18 -             x = points,
2018-09-24 19:17:18 -             y = y,
2018-09-24 19:17:18 -             name = "Интерполяционный полином"
2018-09-24 19:17:18 -         )
2018-09-24 19:17:18 -     [trace1; trace2]
2018-09-24 19:17:18 -     |> Chart.Plot
2018-09-24 19:17:18 -     |> Chart.WithWidth 1000
2018-09-24 19:17:18 -     |> Chart.WithHeight 700
2018-09-24 19:17:18 - plotSecondCaseError()
2018-09-24 19:17:24 - let plotSecondCaseError () =
2018-09-24 19:17:24 -     let trace1 =
2018-09-24 19:17:24 -         let y = points |> List.map f
2018-09-24 19:17:24 -         Scatter(
2018-09-24 19:17:24 -             x = points,
2018-09-24 19:17:24 -             y = y,
2018-09-24 19:17:24 -             name = "Исходная функция"
2018-09-24 19:17:24 -         )
2018-09-24 19:17:24 -     let trace2 =
2018-09-24 19:17:24 -         let y = points |> List.map (polynom2 1)
2018-09-24 19:17:24 -         Scatter(
2018-09-24 19:17:24 -             x = points,
2018-09-24 19:17:24 -             y = y,
2018-09-24 19:17:24 -             name = "Интерполяционный полином"
2018-09-24 19:17:24 -         )
2018-09-24 19:17:24 -     [trace1; trace2]
2018-09-24 19:17:24 -     |> Chart.Plot
2018-09-24 19:17:24 -     |> Chart.WithWidth 1000
2018-09-24 19:17:24 -     |> Chart.WithHeight 700
2018-09-24 19:17:24 - plotSecondCaseError()
2018-09-24 19:17:30 - let plotSecondCaseError () =
2018-09-24 19:17:30 -     let trace1 =
2018-09-24 19:17:30 -         let y = points |> List.map f
2018-09-24 19:17:30 -         Scatter(
2018-09-24 19:17:30 -             x = points,
2018-09-24 19:17:30 -             y = y,
2018-09-24 19:17:30 -             name = "Исходная функция"
2018-09-24 19:17:30 -         )
2018-09-24 19:17:30 -     let trace2 =
2018-09-24 19:17:30 -         let y = points |> List.map (polynom2 2)
2018-09-24 19:17:30 -         Scatter(
2018-09-24 19:17:30 -             x = points,
2018-09-24 19:17:30 -             y = y,
2018-09-24 19:17:30 -             name = "Интерполяционный полином"
2018-09-24 19:17:30 -         )
2018-09-24 19:17:30 -     [trace1; trace2]
2018-09-24 19:17:30 -     |> Chart.Plot
2018-09-24 19:17:30 -     |> Chart.WithWidth 1000
2018-09-24 19:17:30 -     |> Chart.WithHeight 700
2018-09-24 19:17:30 - plotSecondCaseError()
2018-09-24 19:17:44 - let plotSecondCaseError () =
2018-09-24 19:17:44 -     let trace1 =
2018-09-24 19:17:44 -         let y = points |> List.map f
2018-09-24 19:17:44 -         Scatter(
2018-09-24 19:17:44 -             x = points,
2018-09-24 19:17:44 -             y = y,
2018-09-24 19:17:44 -             name = "Исходная функция"
2018-09-24 19:17:44 -         )
2018-09-24 19:17:44 -     let trace2 =
2018-09-24 19:17:44 -         let y = points |> List.map (polynom2 3)
2018-09-24 19:17:44 -         Scatter(
2018-09-24 19:17:44 -             x = points,
2018-09-24 19:17:44 -             y = y,
2018-09-24 19:17:44 -             name = "Интерполяционный полином"
2018-09-24 19:17:44 -         )
2018-09-24 19:17:44 -     [trace1; trace2]
2018-09-24 19:17:44 -     |> Chart.Plot
2018-09-24 19:17:44 -     |> Chart.WithWidth 1000
2018-09-24 19:17:44 -     |> Chart.WithHeight 700
2018-09-24 19:17:44 - plotSecondCaseError()
2018-09-24 19:17:52 - let plotSecondCaseError () =
2018-09-24 19:17:52 -     let trace1 =
2018-09-24 19:17:52 -         let y = points |> List.map f
2018-09-24 19:17:52 -         Scatter(
2018-09-24 19:17:52 -             x = points,
2018-09-24 19:17:52 -             y = y,
2018-09-24 19:17:52 -             name = "Исходная функция"
2018-09-24 19:17:52 -         )
2018-09-24 19:17:52 -     let trace2 =
2018-09-24 19:17:52 -         let y = points |> List.map (polynom2 4)
2018-09-24 19:17:52 -         Scatter(
2018-09-24 19:17:52 -             x = points,
2018-09-24 19:17:52 -             y = y,
2018-09-24 19:17:52 -             name = "Интерполяционный полином"
2018-09-24 19:17:52 -         )
2018-09-24 19:17:52 -     [trace1; trace2]
2018-09-24 19:17:52 -     |> Chart.Plot
2018-09-24 19:17:52 -     |> Chart.WithWidth 1000
2018-09-24 19:17:52 -     |> Chart.WithHeight 700
2018-09-24 19:17:52 - plotSecondCaseError()
2018-09-28 10:02:41 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-09-28 10:02:41 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-09-28 10:02:41 - For help type #help;;
2018-09-28 10:02:41 - > val it :
2018-09-28 10:02:41 -   ResizeArray<System.Type *
2018-09-28 10:02:41 -               (obj ->
2018-09-28 10:02:41 -                  seq<string *
2018-09-28 10:02:41 -                      string> *
2018-09-28 10:02:41 -                  string)>
2018-09-28 10:02:41 - = seq []
2018-09-28 10:02:41 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-09-28 10:02:41 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-09-28 10:02:41 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-09-28 10:02:42 - Reporting 0 opened comms
2018-09-28 10:03:00 - //third case
2018-09-28 10:03:00 - let polynom3 n x =
2018-09-28 10:03:00 -     let x0 = points |> List.filter (fun i -> i >= x - float ((n + 1) / 2) && i <= x + float ((n + 1) / 2)) |> List.head
2018-09-28 10:03:00 -     let t = (x - x0) / h
2018-09-28 10:03:00 -     let Nk =
2018-09-28 10:03:00 -         let rec NkInternal prev i = seq{
2018-09-28 10:03:00 -             match i with
2018-09-28 10:03:00 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-09-28 10:03:00 -             | 0. -> yield t
2018-09-28 10:03:00 -                     yield! NkInternal t (i + 1.)
2018-09-28 10:03:00 -             | _ ->  let cur = prev * (t + (-1.) ** i * Math.Truncate((i + 1.) / 2.)) /  (i + 1.)
2018-09-28 10:03:00 -                     yield cur
2018-09-28 10:03:00 -                     yield! NkInternal cur (i + 1.)
2018-09-28 10:03:00 -         }
2018-09-28 10:03:00 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 10:03:00 -     let finiteDifferencesTable = 
2018-09-28 10:03:00 -         let rec computeCells y acc = 
2018-09-28 10:03:00 -             let computeCol height (prevCol : float list) =
2018-09-28 10:03:00 -                 let rec computeColInternal x acc =
2018-09-28 10:03:00 -                     match x with
2018-09-28 10:03:00 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-28 10:03:00 -                     | _ -> acc
2018-09-28 10:03:00 -                 computeColInternal (points.Length - height) [] 
2018-09-28 10:03:00 -             match y with
2018-09-28 10:03:00 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-28 10:03:00 -             |_ -> List.rev acc
2018-09-28 10:03:00 -         computeCells (points.Length - 1) [points |> List.map f]
2018-09-28 10:03:00 -     
2018-09-28 10:03:00 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-28 10:03:00 -         match nki, finiteDifference with
2018-09-28 10:03:00 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n - 1 -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length / 2])
2018-09-28 10:03:00 -         | _ -> acc
2018-09-28 10:03:00 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-09-28 10:03:01 - The value or constructor 'points' is not defined. Maybe you want one of the following:
2018-09-28 10:03:01 -    printf
2018-09-28 10:03:01 -    Printf
2018-09-28 10:03:01 - The value or constructor 'h' is not defined. Maybe you want one of the following:
2018-09-28 10:03:01 -    n
2018-09-28 10:03:01 -    x
2018-09-28 10:03:01 - The value, constructor, namespace or type 'Truncate' is not defined.
2018-09-28 10:03:01 - The value, namespace, type or module 'points' is not defined. Maybe you want one of the following:
2018-09-28 10:03:01 -    Printf
2018-09-28 10:03:01 -    printf
2018-09-28 10:03:01 - The value, namespace, type or module 'points' is not defined. Maybe you want one of the following:
2018-09-28 10:03:01 -    Printf
2018-09-28 10:03:01 -    printf
2018-09-28 10:03:01 - The value, namespace, type or module 'points' is not defined. Maybe you want one of the following:
2018-09-28 10:03:01 -    Printf
2018-09-28 10:03:01 -    printf
2018-09-28 10:03:01 - The value or constructor 'points' is not defined. Maybe you want one of the following:
2018-09-28 10:03:01 -    printf
2018-09-28 10:03:01 -    Printf
2018-09-28 10:03:01 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-09-28 10:03:01 -    n
2018-09-28 10:03:01 -    t
2018-09-28 10:03:01 -    x
2018-09-28 10:03:01 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-09-28 10:03:01 -    n
2018-09-28 10:03:01 -    t
2018-09-28 10:03:01 -    x
2018-09-28 10:03:16 - #load "XPlot.Plotly.Paket.fsx"
2018-09-28 10:03:16 - #load "XPlot.Plotly.fsx"
2018-09-28 10:03:16 - open XPlot.Plotly
2018-09-28 10:03:16 - open System
2018-09-28 10:03:32 - let N = 5.
2018-09-28 10:03:32 - let x0 = -(N % 3.)
2018-09-28 10:03:32 - let xm = x0 + 1.
2018-09-28 10:03:32 - let h = 0.01
2018-09-28 10:03:32 - let points = [x0 .. h .. xm]
2018-09-28 10:03:32 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-09-28 10:03:32 - //first case
2018-09-28 10:03:32 - let polynom n x =
2018-09-28 10:03:32 -     let t = (x - x0) / h
2018-09-28 10:03:32 -     let Nk =
2018-09-28 10:03:32 -         let rec NkInternal prev i = seq{
2018-09-28 10:03:32 -             match i with
2018-09-28 10:03:32 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-09-28 10:03:32 -             | 0. -> yield t
2018-09-28 10:03:32 -                     yield! NkInternal t (i + 1.)
2018-09-28 10:03:32 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-09-28 10:03:32 -                     yield cur
2018-09-28 10:03:32 -                     yield! NkInternal cur (i + 1.)
2018-09-28 10:03:32 -         }
2018-09-28 10:03:32 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 10:03:32 -     let finiteDifferencesTable = 
2018-09-28 10:03:32 -         let rec computeCells y acc = 
2018-09-28 10:03:32 -             let computeCol height (prevCol : float list) =
2018-09-28 10:03:32 -                 let rec computeColInternal x acc =
2018-09-28 10:03:32 -                     match x with
2018-09-28 10:03:32 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-28 10:03:32 -                     | _ -> acc
2018-09-28 10:03:32 -                 computeColInternal (n + 1 - height) [] 
2018-09-28 10:03:32 -             match y with
2018-09-28 10:03:32 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (n + 1 - y) acc.[0]) :: acc)
2018-09-28 10:03:32 -             |_ -> List.rev acc
2018-09-28 10:03:32 -         computeCells n [points |> List.map f]
2018-09-28 10:03:32 -     List.fold2 (fun acc nk fd -> acc + nk * fd) (f x0) Nk (finiteDifferencesTable |> List.tail |> List.map (fun x -> x.[0]))
2018-09-28 10:03:32 - let plotFirstCaseError () =
2018-09-28 10:03:32 -     let trace1 =
2018-09-28 10:03:32 -         let y = points |> List.map f
2018-09-28 10:03:32 -         Scatter(
2018-09-28 10:03:32 -             x = points,
2018-09-28 10:03:32 -             y = y,
2018-09-28 10:03:32 -             name = "Исходная функция"
2018-09-28 10:03:32 -         )
2018-09-28 10:03:32 -     let trace2 =
2018-09-28 10:03:32 -         let y = points |> List.map (polynom 1)
2018-09-28 10:03:32 -         Scatter(
2018-09-28 10:03:32 -             x = points,
2018-09-28 10:03:32 -             y = y,
2018-09-28 10:03:32 -             name = "Интерполяционный полином"
2018-09-28 10:03:32 -         )
2018-09-28 10:03:32 -     [trace1; trace2]
2018-09-28 10:03:32 -     |> Chart.Plot
2018-09-28 10:03:32 -     |> Chart.WithWidth 1000
2018-09-28 10:03:32 -     |> Chart.WithHeight 700
2018-09-28 10:03:32 - plotFirstCaseError()
2018-09-28 10:03:32 - //second case
2018-09-28 10:03:32 - let polynom2 n x =
2018-09-28 10:03:32 -     let t = (x - xm) / h
2018-09-28 10:03:32 -     let Nk =
2018-09-28 10:03:32 -         let rec NkInternal prev i = seq{
2018-09-28 10:03:32 -             match i with
2018-09-28 10:03:32 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-09-28 10:03:32 -             | 0. -> yield t
2018-09-28 10:03:32 -                     yield! NkInternal t (i + 1.)
2018-09-28 10:03:32 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-09-28 10:03:32 -                     yield cur
2018-09-28 10:03:32 -                     yield! NkInternal cur (i + 1.)
2018-09-28 10:03:32 -         }
2018-09-28 10:03:32 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 10:03:32 -     let finiteDifferencesTable = 
2018-09-28 10:03:32 -         let rec computeCells y acc = 
2018-09-28 10:03:32 -             let computeCol height (prevCol : float list) =
2018-09-28 10:03:32 -                 let rec computeColInternal x acc =
2018-09-28 10:03:32 -                     match x with
2018-09-28 10:03:32 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-28 10:03:32 -                     | _ -> acc
2018-09-28 10:03:32 -                 computeColInternal (points.Length - height) [] 
2018-09-28 10:03:32 -             match y with
2018-09-28 10:03:32 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-28 10:03:32 -             |_ -> List.rev acc
2018-09-28 10:03:32 -         computeCells (points.Length - 1) [points |> List.map f]
2018-09-28 10:03:32 -     
2018-09-28 10:03:32 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-28 10:03:32 -         match nki, finiteDifference with
2018-09-28 10:03:32 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n - 1 -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length - 1])
2018-09-28 10:03:32 -         | _ -> acc
2018-09-28 10:03:32 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-09-28 10:03:33 - let plotSecondCaseError () =
2018-09-28 10:03:33 -     let trace1 =
2018-09-28 10:03:33 -         let y = points |> List.map f
2018-09-28 10:03:33 -         Scatter(
2018-09-28 10:03:33 -             x = points,
2018-09-28 10:03:33 -             y = y,
2018-09-28 10:03:33 -             name = "Исходная функция"
2018-09-28 10:03:33 -         )
2018-09-28 10:03:33 -     let trace2 =
2018-09-28 10:03:33 -         let y = points |> List.map (polynom2 4)
2018-09-28 10:03:33 -         Scatter(
2018-09-28 10:03:33 -             x = points,
2018-09-28 10:03:33 -             y = y,
2018-09-28 10:03:33 -             name = "Интерполяционный полином"
2018-09-28 10:03:33 -         )
2018-09-28 10:03:33 -     [trace1; trace2]
2018-09-28 10:03:33 -     |> Chart.Plot
2018-09-28 10:03:33 -     |> Chart.WithWidth 1000
2018-09-28 10:03:33 -     |> Chart.WithHeight 700
2018-09-28 10:03:33 - plotSecondCaseError()
2018-09-28 10:03:33 - //third case
2018-09-28 10:03:33 - let polynom3 n x =
2018-09-28 10:03:33 -     let x0 = points |> List.filter (fun i -> i >= x - float ((n + 1) / 2) && i <= x + float ((n + 1) / 2)) |> List.head
2018-09-28 10:03:33 -     let t = (x - x0) / h
2018-09-28 10:03:33 -     let Nk =
2018-09-28 10:03:33 -         let rec NkInternal prev i = seq{
2018-09-28 10:03:33 -             match i with
2018-09-28 10:03:33 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-09-28 10:03:33 -             | 0. -> yield t
2018-09-28 10:03:33 -                     yield! NkInternal t (i + 1.)
2018-09-28 10:03:33 -             | _ ->  let cur = prev * (t + (-1.) ** i * Math.Truncate((i + 1.) / 2.)) /  (i + 1.)
2018-09-28 10:03:33 -                     yield cur
2018-09-28 10:03:33 -                     yield! NkInternal cur (i + 1.)
2018-09-28 10:03:33 -         }
2018-09-28 10:03:33 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 10:03:33 -     let finiteDifferencesTable = 
2018-09-28 10:03:33 -         let rec computeCells y acc = 
2018-09-28 10:03:33 -             let computeCol height (prevCol : float list) =
2018-09-28 10:03:33 -                 let rec computeColInternal x acc =
2018-09-28 10:03:33 -                     match x with
2018-09-28 10:03:33 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-28 10:03:33 -                     | _ -> acc
2018-09-28 10:03:33 -                 computeColInternal (points.Length - height) [] 
2018-09-28 10:03:33 -             match y with
2018-09-28 10:03:33 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-28 10:03:33 -             |_ -> List.rev acc
2018-09-28 10:03:33 -         computeCells (points.Length - 1) [points |> List.map f]
2018-09-28 10:03:33 -     
2018-09-28 10:03:33 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-28 10:03:33 -         match nki, finiteDifference with
2018-09-28 10:03:33 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n - 1 -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length / 2])
2018-09-28 10:03:33 -         | _ -> acc
2018-09-28 10:03:33 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-09-28 10:04:18 - let plotThirdCaseError () =
2018-09-28 10:04:18 -     let trace1 =
2018-09-28 10:04:18 -         let y = points |> List.map f
2018-09-28 10:04:18 -         Scatter(
2018-09-28 10:04:18 -             x = points,
2018-09-28 10:04:18 -             y = y,
2018-09-28 10:04:18 -             name = "Исходная функция"
2018-09-28 10:04:18 -         )
2018-09-28 10:04:18 -     let trace2 =
2018-09-28 10:04:18 -         let y = points |> List.map (polynom3 4)
2018-09-28 10:04:18 -         Scatter(
2018-09-28 10:04:18 -             x = points,
2018-09-28 10:04:18 -             y = y,
2018-09-28 10:04:18 -             name = "Интерполяционный полином"
2018-09-28 10:04:18 -         )
2018-09-28 10:04:18 -     [trace1; trace2]
2018-09-28 10:04:18 -     |> Chart.Plot
2018-09-28 10:04:18 -     |> Chart.WithWidth 1000
2018-09-28 10:04:18 -     |> Chart.WithHeight 700
2018-09-28 10:04:18 - plotThirdCaseError()
2018-09-28 10:07:34 - //third case
2018-09-28 10:07:34 - let polynom3 n x =
2018-09-28 10:07:34 -     let x0 = points |> List.filter (fun i -> i >= x - float ((n + 1) / 2) && i <= x + float ((n + 1) / 2)) |> List.head
2018-09-28 10:07:34 -     let t = (x - x0) / h
2018-09-28 10:07:34 -     let Nk =
2018-09-28 10:07:34 -         let rec NkInternal prev i = seq{
2018-09-28 10:07:34 -             match i with
2018-09-28 10:07:34 -             | _ when int i = n - 1 -> yield prev * (t + (-1.) ** i * Math.Truncate((i + 1.) / 2.)) /  (i + 1.)
2018-09-28 10:07:34 -             | 0. -> yield t
2018-09-28 10:07:34 -                     yield! NkInternal t (i + 1.)
2018-09-28 10:07:34 -             | _ ->  let cur = prev * (t + (-1.) ** i * Math.Truncate((i + 1.) / 2.)) /  (i + 1.)
2018-09-28 10:07:34 -                     yield cur
2018-09-28 10:07:34 -                     yield! NkInternal cur (i + 1.)
2018-09-28 10:07:34 -         }
2018-09-28 10:07:34 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 10:07:34 -     let finiteDifferencesTable = 
2018-09-28 10:07:34 -         let rec computeCells y acc = 
2018-09-28 10:07:34 -             let computeCol height (prevCol : float list) =
2018-09-28 10:07:34 -                 let rec computeColInternal x acc =
2018-09-28 10:07:34 -                     match x with
2018-09-28 10:07:34 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-28 10:07:34 -                     | _ -> acc
2018-09-28 10:07:34 -                 computeColInternal (points.Length - height) [] 
2018-09-28 10:07:34 -             match y with
2018-09-28 10:07:34 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-28 10:07:34 -             |_ -> List.rev acc
2018-09-28 10:07:34 -         computeCells (points.Length - 1) [points |> List.map f]
2018-09-28 10:07:34 -     
2018-09-28 10:07:34 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-28 10:07:34 -         match nki, finiteDifference with
2018-09-28 10:07:34 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n - 1 -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length / 2])
2018-09-28 10:07:34 -         | _ -> acc
2018-09-28 10:07:34 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-09-28 10:07:35 - let plotThirdCaseError () =
2018-09-28 10:07:35 -     let trace1 =
2018-09-28 10:07:35 -         let y = points |> List.map f
2018-09-28 10:07:35 -         Scatter(
2018-09-28 10:07:35 -             x = points,
2018-09-28 10:07:35 -             y = y,
2018-09-28 10:07:35 -             name = "Исходная функция"
2018-09-28 10:07:35 -         )
2018-09-28 10:07:35 -     let trace2 =
2018-09-28 10:07:35 -         let y = points |> List.map (polynom3 4)
2018-09-28 10:07:35 -         Scatter(
2018-09-28 10:07:35 -             x = points,
2018-09-28 10:07:35 -             y = y,
2018-09-28 10:07:35 -             name = "Интерполяционный полином"
2018-09-28 10:07:35 -         )
2018-09-28 10:07:35 -     [trace1; trace2]
2018-09-28 10:07:35 -     |> Chart.Plot
2018-09-28 10:07:35 -     |> Chart.WithWidth 1000
2018-09-28 10:07:35 -     |> Chart.WithHeight 700
2018-09-28 10:07:35 - plotThirdCaseError()
2018-09-28 10:10:05 - let plotThirdCaseError () =
2018-09-28 10:10:05 -     let trace1 =
2018-09-28 10:10:05 -         let y = points |> List.map f
2018-09-28 10:10:05 -         Scatter(
2018-09-28 10:10:05 -             x = points,
2018-09-28 10:10:05 -             y = y,
2018-09-28 10:10:05 -             name = "Исходная функция"
2018-09-28 10:10:05 -         )
2018-09-28 10:10:05 -     let trace2 =
2018-09-28 10:10:05 -         let y = points |> List.map (polynom3 10)
2018-09-28 10:10:05 -         Scatter(
2018-09-28 10:10:05 -             x = points,
2018-09-28 10:10:05 -             y = y,
2018-09-28 10:10:05 -             name = "Интерполяционный полином"
2018-09-28 10:10:05 -         )
2018-09-28 10:10:05 -     [trace1; trace2]
2018-09-28 10:10:05 -     |> Chart.Plot
2018-09-28 10:10:05 -     |> Chart.WithWidth 1000
2018-09-28 10:10:05 -     |> Chart.WithHeight 700
2018-09-28 10:10:05 - plotThirdCaseError()
2018-09-28 10:12:42 - //second case
2018-09-28 10:12:42 - let polynom2 n x =
2018-09-28 10:12:42 -     let t = (x - xm) / h
2018-09-28 10:12:42 -     let Nk =
2018-09-28 10:12:42 -         let rec NkInternal prev i = seq{
2018-09-28 10:12:42 -             match i with
2018-09-28 10:12:42 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-09-28 10:12:42 -             | 0. -> yield t
2018-09-28 10:12:42 -                     yield! NkInternal t (i + 1.)
2018-09-28 10:12:42 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-09-28 10:12:42 -                     yield cur
2018-09-28 10:12:42 -                     yield! NkInternal cur (i + 1.)
2018-09-28 10:12:42 -         }
2018-09-28 10:12:42 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 10:12:42 -     let finiteDifferencesTable = 
2018-09-28 10:12:42 -         let rec computeCells y acc = 
2018-09-28 10:12:42 -             let computeCol height (prevCol : float list) =
2018-09-28 10:12:42 -                 let rec computeColInternal x acc =
2018-09-28 10:12:42 -                     match x with
2018-09-28 10:12:42 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-28 10:12:42 -                     | _ -> acc
2018-09-28 10:12:42 -                 computeColInternal (points.Length - height) [] 
2018-09-28 10:12:42 -             match y with
2018-09-28 10:12:42 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-28 10:12:42 -             |_ -> List.rev acc
2018-09-28 10:12:42 -         computeCells (points.Length - 1) [points |> List.map f]
2018-09-28 10:12:42 -     
2018-09-28 10:12:42 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-28 10:12:42 -         match nki, finiteDifference with
2018-09-28 10:12:42 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.last)) 
2018-09-28 10:12:42 -         | _ -> acc
2018-09-28 10:12:42 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-09-28 10:12:46 - let plotSecondCaseError () =
2018-09-28 10:12:46 -     let trace1 =
2018-09-28 10:12:46 -         let y = points |> List.map f
2018-09-28 10:12:46 -         Scatter(
2018-09-28 10:12:46 -             x = points,
2018-09-28 10:12:46 -             y = y,
2018-09-28 10:12:46 -             name = "Исходная функция"
2018-09-28 10:12:46 -         )
2018-09-28 10:12:46 -     let trace2 =
2018-09-28 10:12:46 -         let y = points |> List.map (polynom2 4)
2018-09-28 10:12:46 -         Scatter(
2018-09-28 10:12:46 -             x = points,
2018-09-28 10:12:46 -             y = y,
2018-09-28 10:12:46 -             name = "Интерполяционный полином"
2018-09-28 10:12:46 -         )
2018-09-28 10:12:46 -     [trace1; trace2]
2018-09-28 10:12:46 -     |> Chart.Plot
2018-09-28 10:12:46 -     |> Chart.WithWidth 1000
2018-09-28 10:12:46 -     |> Chart.WithHeight 700
2018-09-28 10:12:46 - plotSecondCaseError()
2018-09-28 10:13:05 - //third case
2018-09-28 10:13:05 - let polynom3 n x =
2018-09-28 10:13:05 -     let x0 = points |> List.filter (fun i -> i >= x - float ((n + 1) / 2) && i <= x + float ((n + 1) / 2)) |> List.head
2018-09-28 10:13:05 -     let t = (x - x0) / h
2018-09-28 10:13:05 -     let Nk =
2018-09-28 10:13:05 -         let rec NkInternal prev i = seq{
2018-09-28 10:13:05 -             match i with
2018-09-28 10:13:05 -             | _ when int i = n - 1 -> yield prev * (t + (-1.) ** i * Math.Truncate((i + 1.) / 2.)) /  (i + 1.)
2018-09-28 10:13:05 -             | 0. -> yield t
2018-09-28 10:13:05 -                     yield! NkInternal t (i + 1.)
2018-09-28 10:13:05 -             | _ ->  let cur = prev * (t + (-1.) ** i * Math.Truncate((i + 1.) / 2.)) /  (i + 1.)
2018-09-28 10:13:05 -                     yield cur
2018-09-28 10:13:05 -                     yield! NkInternal cur (i + 1.)
2018-09-28 10:13:05 -         }
2018-09-28 10:13:05 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 10:13:05 -     let finiteDifferencesTable = 
2018-09-28 10:13:05 -         let rec computeCells y acc = 
2018-09-28 10:13:05 -             let computeCol height (prevCol : float list) =
2018-09-28 10:13:05 -                 let rec computeColInternal x acc =
2018-09-28 10:13:05 -                     match x with
2018-09-28 10:13:05 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-28 10:13:05 -                     | _ -> acc
2018-09-28 10:13:05 -                 computeColInternal (points.Length - height) [] 
2018-09-28 10:13:05 -             match y with
2018-09-28 10:13:05 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-28 10:13:05 -             |_ -> List.rev acc
2018-09-28 10:13:05 -         computeCells (points.Length - 1) [points |> List.map f]
2018-09-28 10:13:05 -     
2018-09-28 10:13:05 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-28 10:13:05 -         match nki, finiteDifference with
2018-09-28 10:13:05 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length / 2])
2018-09-28 10:13:05 -         | _ -> acc
2018-09-28 10:13:05 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-09-28 10:13:07 - let plotThirdCaseError () =
2018-09-28 10:13:07 -     let trace1 =
2018-09-28 10:13:07 -         let y = points |> List.map f
2018-09-28 10:13:07 -         Scatter(
2018-09-28 10:13:07 -             x = points,
2018-09-28 10:13:07 -             y = y,
2018-09-28 10:13:07 -             name = "Исходная функция"
2018-09-28 10:13:07 -         )
2018-09-28 10:13:07 -     let trace2 =
2018-09-28 10:13:07 -         let y = points |> List.map (polynom3 10)
2018-09-28 10:13:07 -         Scatter(
2018-09-28 10:13:07 -             x = points,
2018-09-28 10:13:07 -             y = y,
2018-09-28 10:13:07 -             name = "Интерполяционный полином"
2018-09-28 10:13:07 -         )
2018-09-28 10:13:07 -     [trace1; trace2]
2018-09-28 10:13:07 -     |> Chart.Plot
2018-09-28 10:13:07 -     |> Chart.WithWidth 1000
2018-09-28 10:13:07 -     |> Chart.WithHeight 700
2018-09-28 10:13:07 - plotThirdCaseError()
2018-09-28 10:13:21 - let plotThirdCaseError () =
2018-09-28 10:13:21 -     let trace1 =
2018-09-28 10:13:21 -         let y = points |> List.map f
2018-09-28 10:13:21 -         Scatter(
2018-09-28 10:13:21 -             x = points,
2018-09-28 10:13:21 -             y = y,
2018-09-28 10:13:21 -             name = "Исходная функция"
2018-09-28 10:13:21 -         )
2018-09-28 10:13:21 -     let trace2 =
2018-09-28 10:13:21 -         let y = points |> List.map (polynom3 4)
2018-09-28 10:13:21 -         Scatter(
2018-09-28 10:13:21 -             x = points,
2018-09-28 10:13:21 -             y = y,
2018-09-28 10:13:21 -             name = "Интерполяционный полином"
2018-09-28 10:13:21 -         )
2018-09-28 10:13:21 -     [trace1; trace2]
2018-09-28 10:13:21 -     |> Chart.Plot
2018-09-28 10:13:21 -     |> Chart.WithWidth 1000
2018-09-28 10:13:21 -     |> Chart.WithHeight 700
2018-09-28 10:13:21 - plotThirdCaseError()
2018-09-28 10:57:59 - Reporting 0 opened comms
2018-09-28 10:58:15 - #load "XPlot.Plotly.Paket.fsx"
2018-09-28 10:58:15 - #load "XPlot.Plotly.fsx"
2018-09-28 10:58:15 - open XPlot.Plotly
2018-09-28 10:58:15 - open System
2018-09-28 10:58:20 - let N = 5.
2018-09-28 10:58:20 - let x0 = -(N % 3.)
2018-09-28 10:58:20 - let xm = x0 + 1.
2018-09-28 10:58:20 - let h = 0.01
2018-09-28 10:58:20 - let points = [x0 .. h .. xm]
2018-09-28 10:58:20 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-09-28 10:58:20 - //first case
2018-09-28 10:58:20 - let polynom n x =
2018-09-28 10:58:20 -     let t = (x - x0) / h
2018-09-28 10:58:20 -     let Nk =
2018-09-28 10:58:20 -         let rec NkInternal prev i = seq{
2018-09-28 10:58:20 -             match i with
2018-09-28 10:58:20 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-09-28 10:58:20 -             | 0. -> yield t
2018-09-28 10:58:20 -                     yield! NkInternal t (i + 1.)
2018-09-28 10:58:20 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-09-28 10:58:20 -                     yield cur
2018-09-28 10:58:20 -                     yield! NkInternal cur (i + 1.)
2018-09-28 10:58:20 -         }
2018-09-28 10:58:20 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 10:58:20 -     let finiteDifferencesTable = 
2018-09-28 10:58:20 -         let rec computeCells y acc = 
2018-09-28 10:58:20 -             let computeCol height (prevCol : float list) =
2018-09-28 10:58:20 -                 let rec computeColInternal x acc =
2018-09-28 10:58:20 -                     match x with
2018-09-28 10:58:20 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-28 10:58:20 -                     | _ -> acc
2018-09-28 10:58:20 -                 computeColInternal (n + 1 - height) [] 
2018-09-28 10:58:20 -             match y with
2018-09-28 10:58:20 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (n + 1 - y) acc.[0]) :: acc)
2018-09-28 10:58:20 -             |_ -> List.rev acc
2018-09-28 10:58:20 -         computeCells n [points |> List.map f]
2018-09-28 10:58:20 -     List.fold2 (fun acc nk fd -> acc + nk * fd) (f x0) Nk (finiteDifferencesTable |> List.tail |> List.map (fun x -> x.[0]))
2018-09-28 10:58:21 - let plotFirstCaseError () =
2018-09-28 10:58:21 -     let trace1 =
2018-09-28 10:58:21 -         let y = points |> List.map f
2018-09-28 10:58:21 -         Scatter(
2018-09-28 10:58:21 -             x = points,
2018-09-28 10:58:21 -             y = y,
2018-09-28 10:58:21 -             name = "Исходная функция"
2018-09-28 10:58:21 -         )
2018-09-28 10:58:21 -     let trace2 =
2018-09-28 10:58:21 -         let y = points |> List.map (polynom 1)
2018-09-28 10:58:21 -         Scatter(
2018-09-28 10:58:21 -             x = points,
2018-09-28 10:58:21 -             y = y,
2018-09-28 10:58:21 -             name = "Интерполяционный полином"
2018-09-28 10:58:21 -         )
2018-09-28 10:58:21 -     [trace1; trace2]
2018-09-28 10:58:21 -     |> Chart.Plot
2018-09-28 10:58:21 -     |> Chart.WithWidth 1000
2018-09-28 10:58:21 -     |> Chart.WithHeight 700
2018-09-28 10:58:21 - plotFirstCaseError()
2018-09-28 10:58:21 - //second case
2018-09-28 10:58:21 - let polynom2 n x =
2018-09-28 10:58:21 -     let t = (x - xm) / h
2018-09-28 10:58:21 -     let Nk =
2018-09-28 10:58:21 -         let rec NkInternal prev i = seq{
2018-09-28 10:58:21 -             match i with
2018-09-28 10:58:21 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-09-28 10:58:21 -             | 0. -> yield t
2018-09-28 10:58:21 -                     yield! NkInternal t (i + 1.)
2018-09-28 10:58:21 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-09-28 10:58:21 -                     yield cur
2018-09-28 10:58:21 -                     yield! NkInternal cur (i + 1.)
2018-09-28 10:58:21 -         }
2018-09-28 10:58:21 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 10:58:21 -     let finiteDifferencesTable = 
2018-09-28 10:58:21 -         let rec computeCells y acc = 
2018-09-28 10:58:21 -             let computeCol height (prevCol : float list) =
2018-09-28 10:58:21 -                 let rec computeColInternal x acc =
2018-09-28 10:58:21 -                     match x with
2018-09-28 10:58:21 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-28 10:58:21 -                     | _ -> acc
2018-09-28 10:58:21 -                 computeColInternal (points.Length - height) [] 
2018-09-28 10:58:21 -             match y with
2018-09-28 10:58:21 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-28 10:58:21 -             |_ -> List.rev acc
2018-09-28 10:58:21 -         computeCells (points.Length - 1) [points |> List.map f]
2018-09-28 10:58:21 -     
2018-09-28 10:58:21 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-28 10:58:21 -         match nki, finiteDifference with
2018-09-28 10:58:21 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.last)) 
2018-09-28 10:58:21 -         | _ -> acc
2018-09-28 10:58:21 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-09-28 10:58:21 - let plotSecondCaseError () =
2018-09-28 10:58:21 -     let trace1 =
2018-09-28 10:58:21 -         let y = points |> List.map f
2018-09-28 10:58:21 -         Scatter(
2018-09-28 10:58:21 -             x = points,
2018-09-28 10:58:21 -             y = y,
2018-09-28 10:58:21 -             name = "Исходная функция"
2018-09-28 10:58:21 -         )
2018-09-28 10:58:21 -     let trace2 =
2018-09-28 10:58:21 -         let y = points |> List.map (polynom2 4)
2018-09-28 10:58:21 -         Scatter(
2018-09-28 10:58:21 -             x = points,
2018-09-28 10:58:21 -             y = y,
2018-09-28 10:58:21 -             name = "Интерполяционный полином"
2018-09-28 10:58:21 -         )
2018-09-28 10:58:21 -     [trace1; trace2]
2018-09-28 10:58:21 -     |> Chart.Plot
2018-09-28 10:58:21 -     |> Chart.WithWidth 1000
2018-09-28 10:58:21 -     |> Chart.WithHeight 700
2018-09-28 10:58:21 - plotSecondCaseError()
2018-09-28 10:58:21 - //third case
2018-09-28 10:58:21 - let polynom3 n x =
2018-09-28 10:58:21 -     let x0 = points |> List.filter (fun i -> x >= i && x <= i + h / 2.) |> List.head
2018-09-28 10:58:21 -     let t = (x - x0) / h
2018-09-28 10:58:21 -     let Nk =
2018-09-28 10:58:21 -         let rec NkInternal prev i = seq{
2018-09-28 10:58:21 -             match i with
2018-09-28 10:58:21 -             | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** i) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-09-28 10:58:21 -             | 0. -> yield t
2018-09-28 10:58:21 -                     yield! NkInternal t (i + 1.)
2018-09-28 10:58:21 -             | _ ->  let cur = prev * (t + ((-1.) ** i) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-09-28 10:58:21 -                     yield cur
2018-09-28 10:58:21 -                     yield! NkInternal cur (i + 1.)
2018-09-28 10:58:21 -         }
2018-09-28 10:58:21 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 10:58:21 -     let finiteDifferencesTable = 
2018-09-28 10:58:21 -         let rec computeCells y acc = 
2018-09-28 10:58:21 -             let computeCol height (prevCol : float list) =
2018-09-28 10:58:21 -                 let rec computeColInternal x acc =
2018-09-28 10:58:21 -                     match x with
2018-09-28 10:58:21 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-28 10:58:21 -                     | _ -> acc
2018-09-28 10:58:21 -                 computeColInternal (points.Length - height) [] 
2018-09-28 10:58:21 -             match y with
2018-09-28 10:58:21 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-28 10:58:21 -             |_ -> List.rev acc
2018-09-28 10:58:21 -         computeCells (points.Length - 1) [points |> List.map f]
2018-09-28 10:58:21 -     
2018-09-28 10:58:21 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-28 10:58:21 -         match nki, finiteDifference with
2018-09-28 10:58:21 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length / 2])
2018-09-28 10:58:21 -         | _ -> acc
2018-09-28 10:58:21 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-09-28 10:58:21 - let plotThirdCaseError () =
2018-09-28 10:58:21 -     let trace1 =
2018-09-28 10:58:21 -         let y = points |> List.map f
2018-09-28 10:58:21 -         Scatter(
2018-09-28 10:58:21 -             x = points,
2018-09-28 10:58:21 -             y = y,
2018-09-28 10:58:21 -             name = "Исходная функция"
2018-09-28 10:58:21 -         )
2018-09-28 10:58:21 -     let trace2 =
2018-09-28 10:58:21 -         let y = points |> List.map (polynom3 4)
2018-09-28 10:58:21 -         Scatter(
2018-09-28 10:58:21 -             x = points,
2018-09-28 10:58:21 -             y = y,
2018-09-28 10:58:21 -             name = "Интерполяционный полином"
2018-09-28 10:58:21 -         )
2018-09-28 10:58:21 -     [trace1; trace2]
2018-09-28 10:58:21 -     |> Chart.Plot
2018-09-28 10:58:21 -     |> Chart.WithWidth 1000
2018-09-28 10:58:21 -     |> Chart.WithHeight 700
2018-09-28 10:58:21 - plotThirdCaseError()
2018-09-28 12:09:48 - //third case
2018-09-28 12:09:48 - let polynom3 n x =
2018-09-28 12:09:48 -     let x0 = points |> List.filter (fun i -> x > i && x <= i + h) |> List.exactlyOne
2018-09-28 12:09:48 -     let t = (x - x0) / h
2018-09-28 12:09:48 -     let Nk =
2018-09-28 12:09:48 -         let rec NkInternal prev i = seq{
2018-09-28 12:09:48 -             match i with
2018-09-28 12:09:48 -             | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** i) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-09-28 12:09:48 -             | 0. -> yield t
2018-09-28 12:09:48 -                     yield! NkInternal t (i + 1.)
2018-09-28 12:09:48 -             | _ ->  let cur = prev * (t + ((-1.) ** i) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-09-28 12:09:48 -                     yield cur
2018-09-28 12:09:48 -                     yield! NkInternal cur (i + 1.)
2018-09-28 12:09:48 -         }
2018-09-28 12:09:48 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 12:09:48 -     let finiteDifferencesTable = 
2018-09-28 12:09:48 -         let rec computeCells y acc = 
2018-09-28 12:09:48 -             let computeCol height (prevCol : float list) =
2018-09-28 12:09:48 -                 let rec computeColInternal x acc =
2018-09-28 12:09:48 -                     match x with
2018-09-28 12:09:48 -                     | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-28 12:09:48 -                     | _ -> acc
2018-09-28 12:09:48 -                 computeColInternal (points.Length - height) [] 
2018-09-28 12:09:48 -             match y with
2018-09-28 12:09:48 -             |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-28 12:09:48 -             |_ -> List.rev acc
2018-09-28 12:09:48 -         computeCells (points.Length - 1) [points |> List.map f]
2018-09-28 12:09:48 -     
2018-09-28 12:09:48 -     let middle =
2018-09-28 12:09:48 -         let middlePoint = points |> List.findIndex (fun i -> i = x0)
2018-09-28 12:09:48 -         let startIndex = middlePoint - (n + 1) / 2
2018-09-28 12:09:48 -         let endIndex = middlePoint + n / 2
2018-09-28 12:09:48 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-09-28 12:09:48 -             match finiteDifference with
2018-09-28 12:09:48 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-09-28 12:09:48 -             | _ -> acc |> List.rev
2018-09-28 12:09:48 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-09-28 12:09:48 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-28 12:09:48 -         match nki, finiteDifference with
2018-09-28 12:09:48 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length / 2])
2018-09-28 12:09:48 -         | _ -> acc
2018-09-28 12:09:48 -     polynom2Internal Nk middle.Tail 0 (f x0)
2018-09-28 12:09:50 - let plotThirdCaseError () =
2018-09-28 12:09:50 -     let trace1 =
2018-09-28 12:09:50 -         let y = points |> List.map f
2018-09-28 12:09:50 -         Scatter(
2018-09-28 12:09:50 -             x = points,
2018-09-28 12:09:50 -             y = y,
2018-09-28 12:09:50 -             name = "Исходная функция"
2018-09-28 12:09:50 -         )
2018-09-28 12:09:50 -     let trace2 =
2018-09-28 12:09:50 -         let y = points |> List.map (polynom3 4)
2018-09-28 12:09:50 -         Scatter(
2018-09-28 12:09:50 -             x = points,
2018-09-28 12:09:50 -             y = y,
2018-09-28 12:09:50 -             name = "Интерполяционный полином"
2018-09-28 12:09:50 -         )
2018-09-28 12:09:50 -     [trace1; trace2]
2018-09-28 12:09:50 -     |> Chart.Plot
2018-09-28 12:09:50 -     |> Chart.WithWidth 1000
2018-09-28 12:09:50 -     |> Chart.WithHeight 700
2018-09-28 12:09:50 - plotThirdCaseError()
2018-09-28 12:09:51 - Expression evaluation failed: The input sequence was empty.
2018-09-28 12:09:51 - Parameter name: source
2018-09-28 12:09:51 - ArgumentExceptionThe input sequence was empty.
2018-09-28 12:09:51 - Parameter name: source
2018-09-28 12:09:51 -   at Microsoft.FSharp.Collections.ListModule.ExactlyOne[T] (Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x0000d] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:09:51 -   at FSI_0044.polynom3 (System.Int32 n, System.Double x) [0x00013] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:09:51 -   at FSI_0045+y@10-23.Invoke (System.Double x) [0x00000] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:09:51 -   at Microsoft.FSharp.Primitives.Basics.List.map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] x) [0x0003e] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:09:51 -   at Microsoft.FSharp.Collections.ListModule.Map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x00000] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:09:51 -   at FSI_0045.plotThirdCaseError () [0x0005a] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:09:51 -   at <StartupCode$FSI_0045>.$FSI_0045.main@ () [0x00000] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:09:51 -   at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-09-28 12:09:51 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x0003b] in <2943701620b54f86b436d3ffad010412>:0 
2018-09-28 12:11:56 - let plotThirdCaseError () =
2018-09-28 12:11:56 -     let trace1 =
2018-09-28 12:11:56 -         let y = points  |> List.rev |> List.tail |> List.map f
2018-09-28 12:11:56 -         Scatter(
2018-09-28 12:11:56 -             x = points,
2018-09-28 12:11:56 -             y = y,
2018-09-28 12:11:56 -             name = "Исходная функция"
2018-09-28 12:11:56 -         )
2018-09-28 12:11:56 -     let trace2 =
2018-09-28 12:11:56 -         let y = points  |> List.rev |> List.tail (polynom3 4)
2018-09-28 12:11:56 -         Scatter(
2018-09-28 12:11:56 -             x = points,
2018-09-28 12:11:56 -             y = y,
2018-09-28 12:11:56 -             name = "Интерполяционный полином"
2018-09-28 12:11:56 -         )
2018-09-28 12:11:56 -     [trace1; trace2]
2018-09-28 12:11:56 -     |> Chart.Plot
2018-09-28 12:11:56 -     |> Chart.WithWidth 1000
2018-09-28 12:11:56 -     |> Chart.WithHeight 700
2018-09-28 12:11:56 - plotThirdCaseError()
2018-09-28 12:11:56 - This expression was expected to have type
2018-09-28 12:11:56 -     'float list -> obj'    
2018-09-28 12:11:56 - but here has type
2018-09-28 12:11:56 -     'obj list'    
2018-09-28 12:11:56 - This expression was expected to have type
2018-09-28 12:11:56 -     'obj list'    
2018-09-28 12:11:56 - but here has type
2018-09-28 12:11:56 -     'float -> float'    
2018-09-28 12:11:56 - This expression was expected to have type
2018-09-28 12:11:56 -     'obj list'    
2018-09-28 12:11:56 - but here has type
2018-09-28 12:11:56 -     'float -> float'    
2018-09-28 12:11:56 - This expression was expected to have type
2018-09-28 12:11:56 -     'float list -> obj'    
2018-09-28 12:11:56 - but here has type
2018-09-28 12:11:56 -     'obj list'    
2018-09-28 12:12:08 - let plotThirdCaseError () =
2018-09-28 12:12:08 -     let trace1 =
2018-09-28 12:12:08 -         let y = points  |> List.rev |> List.tail |> List.map f
2018-09-28 12:12:08 -         Scatter(
2018-09-28 12:12:08 -             x = points,
2018-09-28 12:12:08 -             y = y,
2018-09-28 12:12:08 -             name = "Исходная функция"
2018-09-28 12:12:08 -         )
2018-09-28 12:12:08 -     let trace2 =
2018-09-28 12:12:08 -         let y = points  |> List.rev |> List.tail |> (polynom3 4)
2018-09-28 12:12:08 -         Scatter(
2018-09-28 12:12:08 -             x = points,
2018-09-28 12:12:08 -             y = y,
2018-09-28 12:12:08 -             name = "Интерполяционный полином"
2018-09-28 12:12:08 -         )
2018-09-28 12:12:08 -     [trace1; trace2]
2018-09-28 12:12:08 -     |> Chart.Plot
2018-09-28 12:12:08 -     |> Chart.WithWidth 1000
2018-09-28 12:12:08 -     |> Chart.WithHeight 700
2018-09-28 12:12:08 - plotThirdCaseError()
2018-09-28 12:12:08 - Type mismatch. Expecting a
2018-09-28 12:12:08 -     'float list -> obj'    
2018-09-28 12:12:08 - but given a
2018-09-28 12:12:08 -     'float -> float'    
2018-09-28 12:12:08 - The type 'float list' does not match the type 'float'
2018-09-28 12:12:08 - Type mismatch. Expecting a
2018-09-28 12:12:08 -     'float list -> obj'    
2018-09-28 12:12:08 - but given a
2018-09-28 12:12:08 -     'float -> float'    
2018-09-28 12:12:08 - The type 'float list' does not match the type 'float'
2018-09-28 12:13:11 - let plotThirdCaseError () =
2018-09-28 12:13:11 -     let mainX = points  |> List.rev |> List.tail
2018-09-28 12:13:11 -     let trace1 =
2018-09-28 12:13:11 -         let y = mainX |> List.map f
2018-09-28 12:13:11 -         Scatter(
2018-09-28 12:13:11 -             x = mainX,
2018-09-28 12:13:11 -             y = y,
2018-09-28 12:13:11 -             name = "Исходная функция"
2018-09-28 12:13:11 -         )
2018-09-28 12:13:11 -     let trace2 =
2018-09-28 12:13:11 -         let y = mainX |> (polynom3 4)
2018-09-28 12:13:11 -         Scatter(
2018-09-28 12:13:11 -             x = mainX,
2018-09-28 12:13:11 -             y = y,
2018-09-28 12:13:11 -             name = "Интерполяционный полином"
2018-09-28 12:13:11 -         )
2018-09-28 12:13:11 -     [trace1; trace2]
2018-09-28 12:13:11 -     |> Chart.Plot
2018-09-28 12:13:11 -     |> Chart.WithWidth 1000
2018-09-28 12:13:11 -     |> Chart.WithHeight 700
2018-09-28 12:13:11 - plotThirdCaseError()
2018-09-28 12:13:11 - Type mismatch. Expecting a
2018-09-28 12:13:11 -     'float list -> obj'    
2018-09-28 12:13:11 - but given a
2018-09-28 12:13:11 -     'float -> float'    
2018-09-28 12:13:11 - The type 'float list' does not match the type 'float'
2018-09-28 12:13:11 - Type mismatch. Expecting a
2018-09-28 12:13:11 -     'float list -> obj'    
2018-09-28 12:13:11 - but given a
2018-09-28 12:13:11 -     'float -> float'    
2018-09-28 12:13:11 - The type 'float list' does not match the type 'float'
2018-09-28 12:13:33 - let plotThirdCaseError () =
2018-09-28 12:13:33 -     let mainX = points  |> List.rev |> List.tail |> List.rev
2018-09-28 12:13:33 -     let trace1 =
2018-09-28 12:13:33 -         let y = mainX |> List.map f
2018-09-28 12:13:33 -         Scatter(
2018-09-28 12:13:33 -             x = mainX,
2018-09-28 12:13:33 -             y = y,
2018-09-28 12:13:33 -             name = "Исходная функция"
2018-09-28 12:13:33 -         )
2018-09-28 12:13:33 -     let trace2 =
2018-09-28 12:13:33 -         let y = mainX |> (polynom3 4)
2018-09-28 12:13:33 -         Scatter(
2018-09-28 12:13:33 -             x = mainX,
2018-09-28 12:13:33 -             y = y,
2018-09-28 12:13:33 -             name = "Интерполяционный полином"
2018-09-28 12:13:33 -         )
2018-09-28 12:13:33 -     [trace1; trace2]
2018-09-28 12:13:33 -     |> Chart.Plot
2018-09-28 12:13:33 -     |> Chart.WithWidth 1000
2018-09-28 12:13:33 -     |> Chart.WithHeight 700
2018-09-28 12:13:33 - plotThirdCaseError()
2018-09-28 12:13:33 - Type mismatch. Expecting a
2018-09-28 12:13:33 -     'float list -> obj'    
2018-09-28 12:13:33 - but given a
2018-09-28 12:13:33 -     'float -> float'    
2018-09-28 12:13:33 - The type 'float list' does not match the type 'float'
2018-09-28 12:13:33 - Type mismatch. Expecting a
2018-09-28 12:13:33 -     'float list -> obj'    
2018-09-28 12:13:33 - but given a
2018-09-28 12:13:33 -     'float -> float'    
2018-09-28 12:13:33 - The type 'float list' does not match the type 'float'
2018-09-28 12:13:51 - let plotThirdCaseError () =
2018-09-28 12:13:51 -     let mainX = points  |> List.rev |> List.tail |> List.rev
2018-09-28 12:13:51 -     let trace1 =
2018-09-28 12:13:51 -         let y = mainX |> List.map f
2018-09-28 12:13:51 -         Scatter(
2018-09-28 12:13:51 -             x = mainX,
2018-09-28 12:13:51 -             y = y,
2018-09-28 12:13:51 -             name = "Исходная функция"
2018-09-28 12:13:51 -         )
2018-09-28 12:13:51 -     let trace2 =
2018-09-28 12:13:51 -         let y = mainX |> List.map (polynom3 4)
2018-09-28 12:13:51 -         Scatter(
2018-09-28 12:13:51 -             x = mainX,
2018-09-28 12:13:51 -             y = y,
2018-09-28 12:13:51 -             name = "Интерполяционный полином"
2018-09-28 12:13:51 -         )
2018-09-28 12:13:51 -     [trace1; trace2]
2018-09-28 12:13:51 -     |> Chart.Plot
2018-09-28 12:13:51 -     |> Chart.WithWidth 1000
2018-09-28 12:13:51 -     |> Chart.WithHeight 700
2018-09-28 12:13:51 - plotThirdCaseError()
2018-09-28 12:13:51 - Expression evaluation failed: The input sequence was empty.
2018-09-28 12:13:51 - Parameter name: source
2018-09-28 12:13:51 - ArgumentExceptionThe input sequence was empty.
2018-09-28 12:13:51 - Parameter name: source
2018-09-28 12:13:51 -   at Microsoft.FSharp.Collections.ListModule.ExactlyOne[T] (Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x0000d] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:13:51 -   at FSI_0044.polynom3 (System.Int32 n, System.Double x) [0x00013] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:13:51 -   at FSI_0050+y@11-25.Invoke (System.Double x) [0x00000] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:13:51 -   at Microsoft.FSharp.Primitives.Basics.List.map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] x) [0x0003e] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:13:51 -   at Microsoft.FSharp.Collections.ListModule.Map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x00000] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:13:51 -   at FSI_0050.plotThirdCaseError () [0x0006b] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:13:51 -   at <StartupCode$FSI_0050>.$FSI_0050.main@ () [0x00000] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:13:51 -   at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-09-28 12:13:51 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x0003b] in <2943701620b54f86b436d3ffad010412>:0 
2018-09-28 12:14:42 - let plotThirdCaseError () =
2018-09-28 12:14:42 -     let mainX = points |> List.tail
2018-09-28 12:14:42 -     let trace1 =
2018-09-28 12:14:42 -         let y = mainX |> List.map f
2018-09-28 12:14:42 -         Scatter(
2018-09-28 12:14:42 -             x = mainX,
2018-09-28 12:14:42 -             y = y,
2018-09-28 12:14:42 -             name = "Исходная функция"
2018-09-28 12:14:42 -         )
2018-09-28 12:14:42 -     let trace2 =
2018-09-28 12:14:42 -         let y = mainX |> List.map (polynom3 4)
2018-09-28 12:14:42 -         Scatter(
2018-09-28 12:14:42 -             x = mainX,
2018-09-28 12:14:42 -             y = y,
2018-09-28 12:14:42 -             name = "Интерполяционный полином"
2018-09-28 12:14:42 -         )
2018-09-28 12:14:42 -     [trace1; trace2]
2018-09-28 12:14:42 -     |> Chart.Plot
2018-09-28 12:14:42 -     |> Chart.WithWidth 1000
2018-09-28 12:14:42 -     |> Chart.WithHeight 700
2018-09-28 12:14:42 - plotThirdCaseError()
2018-09-28 12:14:42 - Expression evaluation failed: The index was outside the range of elements in the list.
2018-09-28 12:14:42 - Parameter name: n
2018-09-28 12:14:42 - ArgumentExceptionThe index was outside the range of elements in the list.
2018-09-28 12:14:42 - Parameter name: n
2018-09-28 12:14:42 -   at Microsoft.FSharp.Collections.PrivateListHelpers.nth[a] (Microsoft.FSharp.Collections.FSharpList`1[T] l, System.Int32 n) [0x0005e] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:14:42 -   at Microsoft.FSharp.Collections.FSharpList`1[T].get_Item (System.Int32 index) [0x00000] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:14:42 -   at FSI_0044.polynom2Internal@39-7 (System.Int32 n, Microsoft.FSharp.Collections.FSharpList`1[T] nki, Microsoft.FSharp.Collections.FSharpList`1[T] finiteDifference, System.Int32 k, System.Double acc) [0x00098] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:14:42 -   at FSI_0044.polynom3 (System.Int32 n, System.Double x) [0x00143] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:14:42 -   at FSI_0051+y@11-27.Invoke (System.Double x) [0x00000] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:14:42 -   at Microsoft.FSharp.Primitives.Basics.List.map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] x) [0x0003e] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:14:42 -   at Microsoft.FSharp.Collections.ListModule.Map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x00000] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:14:42 -   at FSI_0051.plotThirdCaseError () [0x00061] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:14:42 -   at <StartupCode$FSI_0051>.$FSI_0051.main@ () [0x00000] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:14:42 -   at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-09-28 12:14:42 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x0003b] in <2943701620b54f86b436d3ffad010412>:0 
2018-09-28 12:38:17 - #load "XPlot.Plotly.Paket.fsx"
2018-09-28 12:38:17 - #load "XPlot.Plotly.fsx"
2018-09-28 12:38:17 - open XPlot.Plotly
2018-09-28 12:38:17 - open System
2018-09-28 12:38:18 - let N = 5.
2018-09-28 12:38:18 - let x0 = -(N % 3.)
2018-09-28 12:38:18 - let xm = x0 + 1.
2018-09-28 12:38:18 - let h = 0.01
2018-09-28 12:38:18 - let points = [x0 .. h .. xm]
2018-09-28 12:38:18 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-09-28 12:38:18 - let finiteDifferencesTable = 
2018-09-28 12:38:18 -     let rec computeCells y acc = 
2018-09-28 12:38:18 -         let computeCol height (prevCol : float list) =
2018-09-28 12:38:18 -             let rec computeColInternal x acc =
2018-09-28 12:38:18 -                 match x with
2018-09-28 12:38:18 -                 | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-28 12:38:18 -                 | _ -> acc
2018-09-28 12:38:18 -             computeColInternal (points.Length - height) [] 
2018-09-28 12:38:18 -         match y with
2018-09-28 12:38:18 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-28 12:38:18 -         |_ -> List.rev acc
2018-09-28 12:38:18 -     computeCells (points.Length - 1) [points |> List.map f]
2018-09-28 12:38:19 - //first case
2018-09-28 12:38:19 - let polynom n x =
2018-09-28 12:38:19 -     let t = (x - x0) / h
2018-09-28 12:38:19 -     let Nk =
2018-09-28 12:38:19 -         let rec NkInternal prev i = seq{
2018-09-28 12:38:19 -             match i with
2018-09-28 12:38:19 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-09-28 12:38:19 -             | 0. -> yield t
2018-09-28 12:38:19 -                     yield! NkInternal t (i + 1.)
2018-09-28 12:38:19 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-09-28 12:38:19 -                     yield cur
2018-09-28 12:38:19 -                     yield! NkInternal cur (i + 1.)
2018-09-28 12:38:19 -         }
2018-09-28 12:38:19 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 12:38:19 -     List.fold2 (fun acc nk fd -> acc + nk * fd) (f x0) Nk (finiteDifferencesTable |> List.tail |> List.map (fun x -> x.[0]))
2018-09-28 12:38:19 - let plotFirstCaseError () =
2018-09-28 12:38:19 -     let trace1 =
2018-09-28 12:38:19 -         let y = points |> List.map f
2018-09-28 12:38:19 -         Scatter(
2018-09-28 12:38:19 -             x = points,
2018-09-28 12:38:19 -             y = y,
2018-09-28 12:38:19 -             name = "Исходная функция"
2018-09-28 12:38:19 -         )
2018-09-28 12:38:19 -     let trace2 =
2018-09-28 12:38:19 -         let y = points |> List.map (polynom 1)
2018-09-28 12:38:19 -         Scatter(
2018-09-28 12:38:19 -             x = points,
2018-09-28 12:38:19 -             y = y,
2018-09-28 12:38:19 -             name = "Интерполяционный полином"
2018-09-28 12:38:19 -         )
2018-09-28 12:38:19 -     [trace1; trace2]
2018-09-28 12:38:19 -     |> Chart.Plot
2018-09-28 12:38:19 -     |> Chart.WithWidth 1000
2018-09-28 12:38:19 -     |> Chart.WithHeight 700
2018-09-28 12:38:19 - plotFirstCaseError()
2018-09-28 12:38:19 - Expression evaluation failed: The lists had different lengths.
2018-09-28 12:38:19 - list1 is 99 elements shorter than list2
2018-09-28 12:38:19 - Parameter name: list1
2018-09-28 12:38:19 - ArgumentExceptionThe lists had different lengths.
2018-09-28 12:38:19 - list1 is 99 elements shorter than list2
2018-09-28 12:38:19 - Parameter name: list1
2018-09-28 12:38:19 -   at Microsoft.FSharp.Core.DetailedExceptions.invalidArgDifferentListLength[?] (System.String arg1, System.String arg2, System.Int32 diff) [0x00064] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:38:19 -   at Microsoft.FSharp.Collections.ListModule.loop@249-29[T1,T2,TState] (Microsoft.FSharp.Core.OptimizedClosures+FSharpFunc`4[T1,T2,T3,TResult] f, TState acc, Microsoft.FSharp.Collections.FSharpList`1[T] list1, Microsoft.FSharp.Collections.FSharpList`1[T] list2) [0x0007e] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:38:19 -   at Microsoft.FSharp.Collections.ListModule.Fold2[T1,T2,TState] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] folder, TState state, Microsoft.FSharp.Collections.FSharpList`1[T] list1, Microsoft.FSharp.Collections.FSharpList`1[T] list2) [0x00009] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:38:19 -   at FSI_0058+y@10-29.Invoke (System.Double x) [0x00000] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:38:19 -   at Microsoft.FSharp.Primitives.Basics.List.map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] x) [0x0003e] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:38:19 -   at Microsoft.FSharp.Collections.ListModule.Map[T,TResult] (Microsoft.FSharp.Core.FSharpFunc`2[T,TResult] mapping, Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x00000] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:38:19 -   at FSI_0058.plotFirstCaseError () [0x0005a] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:38:19 -   at <StartupCode$FSI_0058>.$FSI_0058.main@ () [0x00000] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:38:19 -   at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-09-28 12:38:19 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x0003b] in <2943701620b54f86b436d3ffad010412>:0 
2018-09-28 12:38:19 - //second case
2018-09-28 12:38:19 - let polynom2 n x =
2018-09-28 12:38:19 -     let t = (x - xm) / h
2018-09-28 12:38:19 -     let Nk =
2018-09-28 12:38:19 -         let rec NkInternal prev i = seq{
2018-09-28 12:38:19 -             match i with
2018-09-28 12:38:19 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-09-28 12:38:19 -             | 0. -> yield t
2018-09-28 12:38:19 -                     yield! NkInternal t (i + 1.)
2018-09-28 12:38:19 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-09-28 12:38:19 -                     yield cur
2018-09-28 12:38:19 -                     yield! NkInternal cur (i + 1.)
2018-09-28 12:38:19 -         }
2018-09-28 12:38:19 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 12:38:19 -     
2018-09-28 12:38:19 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-28 12:38:19 -         match nki, finiteDifference with
2018-09-28 12:38:19 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.last)) 
2018-09-28 12:38:19 -         | _ -> acc
2018-09-28 12:38:19 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-09-28 12:38:19 - let plotSecondCaseError () =
2018-09-28 12:38:19 -     let trace1 =
2018-09-28 12:38:19 -         let y = points |> List.map f
2018-09-28 12:38:19 -         Scatter(
2018-09-28 12:38:19 -             x = points,
2018-09-28 12:38:19 -             y = y,
2018-09-28 12:38:19 -             name = "Исходная функция"
2018-09-28 12:38:19 -         )
2018-09-28 12:38:19 -     let trace2 =
2018-09-28 12:38:19 -         let y = points |> List.map (polynom2 4)
2018-09-28 12:38:19 -         Scatter(
2018-09-28 12:38:19 -             x = points,
2018-09-28 12:38:19 -             y = y,
2018-09-28 12:38:19 -             name = "Интерполяционный полином"
2018-09-28 12:38:19 -         )
2018-09-28 12:38:19 -     [trace1; trace2]
2018-09-28 12:38:19 -     |> Chart.Plot
2018-09-28 12:38:19 -     |> Chart.WithWidth 1000
2018-09-28 12:38:19 -     |> Chart.WithHeight 700
2018-09-28 12:38:19 - plotSecondCaseError()
2018-09-28 12:38:19 - //third case
2018-09-28 12:38:19 - let polynom3 n x =
2018-09-28 12:38:19 -     let x0 = points |> List.filter (fun i -> i >= x - h / 2. && i < x + h / 2.) |> List.exactlyOne
2018-09-28 12:38:19 -     let middlePoint = points |> List.findIndex (fun i -> i = x0)
2018-09-28 12:38:19 -     let startIndex = middlePoint - (n + 1) / 2
2018-09-28 12:38:19 -     let endIndex = middlePoint + n / 2
2018-09-28 12:38:19 -     let t = (x - x0) / h
2018-09-28 12:38:19 -     let Nk =
2018-09-28 12:38:19 -         let rec NkInternal prev i = seq{
2018-09-28 12:38:19 -             match i with
2018-09-28 12:38:19 -             | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** i) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-09-28 12:38:19 -             | 0. -> yield t
2018-09-28 12:38:19 -                     yield! NkInternal t (i + 1.)
2018-09-28 12:38:19 -             | _ ->  let cur = prev * (t + ((-1.) ** i) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-09-28 12:38:19 -                     yield cur
2018-09-28 12:38:19 -                     yield! NkInternal cur (i + 1.)
2018-09-28 12:38:19 -         }
2018-09-28 12:38:19 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 12:38:19 -     
2018-09-28 12:38:19 -     let middle =
2018-09-28 12:38:19 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-09-28 12:38:19 -             match finiteDifference with
2018-09-28 12:38:19 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-09-28 12:38:19 -             | _ -> acc |> List.rev
2018-09-28 12:38:19 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-09-28 12:38:19 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-28 12:38:19 -         match nki, finiteDifference with
2018-09-28 12:38:19 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length / 2])
2018-09-28 12:38:19 -         | _ -> acc
2018-09-28 12:38:19 -     
2018-09-28 12:38:19 -     match startIndex, endIndex with
2018-09-28 12:38:19 -     | (s, e) when s >= 0 && e < points.Length -> polynom2Internal Nk middle.Tail 0 (f x0)
2018-09-28 12:38:19 -     | (s, e) when s >= 0 -> polynom2 n x
2018-09-28 12:38:19 -     | (s, e) when e < points.Length -> polynom n x
2018-09-28 12:38:19 -     | _ -> failwith "Incorrect arguments"
2018-09-28 12:40:25 - #load "XPlot.Plotly.Paket.fsx"
2018-09-28 12:40:25 - #load "XPlot.Plotly.fsx"
2018-09-28 12:40:25 - open XPlot.Plotly
2018-09-28 12:40:25 - open System
2018-09-28 12:40:26 - let N = 5.
2018-09-28 12:40:26 - let x0 = -(N % 3.)
2018-09-28 12:40:26 - let xm = x0 + 1.
2018-09-28 12:40:26 - let h = 0.01
2018-09-28 12:40:26 - let points = [x0 .. h .. xm]
2018-09-28 12:40:26 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-09-28 12:40:26 - let finiteDifferencesTable = 
2018-09-28 12:40:26 -     let rec computeCells y acc = 
2018-09-28 12:40:26 -         let computeCol height (prevCol : float list) =
2018-09-28 12:40:26 -             let rec computeColInternal x acc =
2018-09-28 12:40:26 -                 match x with
2018-09-28 12:40:26 -                 | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-09-28 12:40:26 -                 | _ -> acc
2018-09-28 12:40:26 -             computeColInternal (points.Length - height) [] 
2018-09-28 12:40:26 -         match y with
2018-09-28 12:40:26 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-09-28 12:40:26 -         |_ -> List.rev acc
2018-09-28 12:40:26 -     computeCells (points.Length - 1) [points |> List.map f]
2018-09-28 12:40:26 - //first case
2018-09-28 12:40:26 - let polynom n x =
2018-09-28 12:40:26 -     let t = (x - x0) / h
2018-09-28 12:40:26 -     let Nk =
2018-09-28 12:40:26 -         let rec NkInternal prev i = seq{
2018-09-28 12:40:26 -             match i with
2018-09-28 12:40:26 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-09-28 12:40:26 -             | 0. -> yield t
2018-09-28 12:40:26 -                     yield! NkInternal t (i + 1.)
2018-09-28 12:40:26 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-09-28 12:40:26 -                     yield cur
2018-09-28 12:40:26 -                     yield! NkInternal cur (i + 1.)
2018-09-28 12:40:26 -         }
2018-09-28 12:40:26 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 12:40:26 -     let rec polynomInternal nki (finiteDifference : float list list) k acc =
2018-09-28 12:40:26 -         match nki, finiteDifference with
2018-09-28 12:40:26 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynomInternal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.head)) 
2018-09-28 12:40:26 -         | _ -> acc
2018-09-28 12:40:26 -     polynomInternal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-09-28 12:40:26 - let plotFirstCaseError () =
2018-09-28 12:40:26 -     let trace1 =
2018-09-28 12:40:26 -         let y = points |> List.map f
2018-09-28 12:40:26 -         Scatter(
2018-09-28 12:40:26 -             x = points,
2018-09-28 12:40:26 -             y = y,
2018-09-28 12:40:26 -             name = "Исходная функция"
2018-09-28 12:40:26 -         )
2018-09-28 12:40:26 -     let trace2 =
2018-09-28 12:40:26 -         let y = points |> List.map (polynom 1)
2018-09-28 12:40:26 -         Scatter(
2018-09-28 12:40:26 -             x = points,
2018-09-28 12:40:26 -             y = y,
2018-09-28 12:40:26 -             name = "Интерполяционный полином"
2018-09-28 12:40:26 -         )
2018-09-28 12:40:26 -     [trace1; trace2]
2018-09-28 12:40:26 -     |> Chart.Plot
2018-09-28 12:40:26 -     |> Chart.WithWidth 1000
2018-09-28 12:40:26 -     |> Chart.WithHeight 700
2018-09-28 12:40:26 - plotFirstCaseError()
2018-09-28 12:40:26 - //second case
2018-09-28 12:40:26 - let polynom2 n x =
2018-09-28 12:40:26 -     let t = (x - xm) / h
2018-09-28 12:40:26 -     let Nk =
2018-09-28 12:40:26 -         let rec NkInternal prev i = seq{
2018-09-28 12:40:26 -             match i with
2018-09-28 12:40:26 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-09-28 12:40:26 -             | 0. -> yield t
2018-09-28 12:40:26 -                     yield! NkInternal t (i + 1.)
2018-09-28 12:40:26 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-09-28 12:40:26 -                     yield cur
2018-09-28 12:40:26 -                     yield! NkInternal cur (i + 1.)
2018-09-28 12:40:26 -         }
2018-09-28 12:40:26 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 12:40:26 -     
2018-09-28 12:40:26 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-09-28 12:40:26 -         match nki, finiteDifference with
2018-09-28 12:40:26 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.last)) 
2018-09-28 12:40:26 -         | _ -> acc
2018-09-28 12:40:26 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-09-28 12:40:26 - let plotSecondCaseError () =
2018-09-28 12:40:26 -     let trace1 =
2018-09-28 12:40:26 -         let y = points |> List.map f
2018-09-28 12:40:26 -         Scatter(
2018-09-28 12:40:26 -             x = points,
2018-09-28 12:40:26 -             y = y,
2018-09-28 12:40:26 -             name = "Исходная функция"
2018-09-28 12:40:26 -         )
2018-09-28 12:40:26 -     let trace2 =
2018-09-28 12:40:26 -         let y = points |> List.map (polynom2 4)
2018-09-28 12:40:26 -         Scatter(
2018-09-28 12:40:26 -             x = points,
2018-09-28 12:40:26 -             y = y,
2018-09-28 12:40:26 -             name = "Интерполяционный полином"
2018-09-28 12:40:26 -         )
2018-09-28 12:40:26 -     [trace1; trace2]
2018-09-28 12:40:26 -     |> Chart.Plot
2018-09-28 12:40:26 -     |> Chart.WithWidth 1000
2018-09-28 12:40:26 -     |> Chart.WithHeight 700
2018-09-28 12:40:26 - plotSecondCaseError()
2018-09-28 12:40:27 - //third case
2018-09-28 12:40:27 - let polynom3 n x =
2018-09-28 12:40:27 -     let x0 = points |> List.filter (fun i -> i >= x - h / 2. && i < x + h / 2.) |> List.exactlyOne
2018-09-28 12:40:27 -     let middlePoint = points |> List.findIndex (fun i -> i = x0)
2018-09-28 12:40:27 -     let startIndex = middlePoint - (n + 1) / 2
2018-09-28 12:40:27 -     let endIndex = middlePoint + n / 2
2018-09-28 12:40:27 -     let t = (x - x0) / h
2018-09-28 12:40:27 -     let Nk =
2018-09-28 12:40:27 -         let rec NkInternal prev i = seq{
2018-09-28 12:40:27 -             match i with
2018-09-28 12:40:27 -             | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** i) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-09-28 12:40:27 -             | 0. -> yield t
2018-09-28 12:40:27 -                     yield! NkInternal t (i + 1.)
2018-09-28 12:40:27 -             | _ ->  let cur = prev * (t + ((-1.) ** i) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-09-28 12:40:27 -                     yield cur
2018-09-28 12:40:27 -                     yield! NkInternal cur (i + 1.)
2018-09-28 12:40:27 -         }
2018-09-28 12:40:27 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 12:40:27 -     
2018-09-28 12:40:27 -     let middle =
2018-09-28 12:40:27 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-09-28 12:40:27 -             match finiteDifference with
2018-09-28 12:40:27 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-09-28 12:40:27 -             | _ -> acc |> List.rev
2018-09-28 12:40:27 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-09-28 12:40:27 -     let rec polynom3Internal nki (finiteDifference : float list list) k acc =
2018-09-28 12:40:27 -         match nki, finiteDifference with
2018-09-28 12:40:27 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom3Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length / 2])
2018-09-28 12:40:27 -         | _ -> acc
2018-09-28 12:40:27 -     
2018-09-28 12:40:27 -     match startIndex, endIndex with
2018-09-28 12:40:27 -     | (s, e) when s >= 0 && e < points.Length -> polynom3Internal Nk middle.Tail 0 (f x0)
2018-09-28 12:40:27 -     | (s, e) when s >= 0 -> polynom2 n x
2018-09-28 12:40:27 -     | (s, e) when e < points.Length -> polynom n x
2018-09-28 12:40:27 -     | _ -> failwith "Incorrect arguments"
2018-09-28 12:41:08 - let plotThirdCaseError () =
2018-09-28 12:41:08 -     let trace1 =
2018-09-28 12:41:08 -         let y = points |> List.map f
2018-09-28 12:41:08 -         Scatter(
2018-09-28 12:41:08 -             x = points,
2018-09-28 12:41:08 -             y = y,
2018-09-28 12:41:08 -             name = "Исходная функция"
2018-09-28 12:41:08 -         )
2018-09-28 12:41:08 -     let trace2 =
2018-09-28 12:41:08 -         let y = points |> List.map (polynom3 4)
2018-09-28 12:41:08 -         Scatter(
2018-09-28 12:41:08 -             x = points,
2018-09-28 12:41:08 -             y = y,
2018-09-28 12:41:08 -             name = "Интерполяционный полином"
2018-09-28 12:41:08 -         )
2018-09-28 12:41:08 -     [trace1; trace2]
2018-09-28 12:41:08 -     |> Chart.Plot
2018-09-28 12:41:08 -     |> Chart.WithWidth 1000
2018-09-28 12:41:08 -     |> Chart.WithHeight 700
2018-09-28 12:41:08 - plotThirdCaseError()
2018-09-28 12:43:44 - let plotThirdCaseError () =
2018-09-28 12:43:44 -     let trace1 =
2018-09-28 12:43:44 -         let y = points |> List.map f
2018-09-28 12:43:44 -         Scatter(
2018-09-28 12:43:44 -             x = points,
2018-09-28 12:43:44 -             y = y,
2018-09-28 12:43:44 -             name = "Исходная функция"
2018-09-28 12:43:44 -         )
2018-09-28 12:43:44 -     let trace2 =
2018-09-28 12:43:44 -         let y = points |> List.map (polynom3 1)
2018-09-28 12:43:44 -         Scatter(
2018-09-28 12:43:44 -             x = points,
2018-09-28 12:43:44 -             y = y,
2018-09-28 12:43:44 -             name = "Интерполяционный полином"
2018-09-28 12:43:44 -         )
2018-09-28 12:43:44 -     [trace1; trace2]
2018-09-28 12:43:44 -     |> Chart.Plot
2018-09-28 12:43:44 -     |> Chart.WithWidth 1000
2018-09-28 12:43:44 -     |> Chart.WithHeight 700
2018-09-28 12:43:44 - plotThirdCaseError()
2018-09-28 12:47:48 - let x = -1.505 //значение из отрезка [-2; -1]
2018-09-28 12:47:48 - let n = 5 //степень полинома
2018-09-28 12:47:48 - polynom n x - f x |> abs;;
2018-09-28 12:48:05 - let x = -1.505 //значение из отрезка [-2; -1]
2018-09-28 12:48:05 - let n = 5 //степень полинома
2018-09-28 12:48:05 - polynom n x - f x |> abs;;
2018-09-28 12:48:05 - polynom2 n x - f x |> abs;;
2018-09-28 12:48:05 - polynom3 n x - f x |> abs;;
2018-09-28 12:48:22 - polynom n x - f x |> abs;;
2018-09-28 12:48:30 - polynom2 n x - f x |> abs;;
2018-09-28 12:48:40 - polynom3 n x - f x |> abs;;
2018-09-28 12:48:40 - Expression evaluation failed: The input sequence was empty.
2018-09-28 12:48:40 - Parameter name: source
2018-09-28 12:48:40 - ArgumentExceptionThe input sequence was empty.
2018-09-28 12:48:40 - Parameter name: source
2018-09-28 12:48:40 -   at Microsoft.FSharp.Collections.ListModule.ExactlyOne[T] (Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x0000d] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:48:40 -   at FSI_0074.polynom3 (System.Int32 n, System.Double x) [0x00013] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:48:40 -   at <StartupCode$FSI_0087>.$FSI_0087.main@ () [0x00000] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:48:40 -   at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-09-28 12:48:40 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x0003b] in <2943701620b54f86b436d3ffad010412>:0 
2018-09-28 12:48:52 - let x = -1.505 //значение из отрезка [-2; -1]
2018-09-28 12:48:52 - let n = 5 //степень полинома
2018-09-28 12:49:11 - polynom n x - f x |> abs;;
2018-09-28 12:49:11 - polynom2 n x - f x |> abs;;
2018-09-28 12:49:11 - polynom3 n x - f x |> abs;;
2018-09-28 12:49:11 - Expression evaluation failed: The input sequence was empty.
2018-09-28 12:49:11 - Parameter name: source
2018-09-28 12:49:11 - ArgumentExceptionThe input sequence was empty.
2018-09-28 12:49:11 - Parameter name: source
2018-09-28 12:49:11 -   at Microsoft.FSharp.Collections.ListModule.ExactlyOne[T] (Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x0000d] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-09-28 12:49:11 -   at FSI_0074.polynom3 (System.Int32 n, System.Double x) [0x00013] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:49:11 -   at <StartupCode$FSI_0093>.$FSI_0093.main@ () [0x00000] in <8bea6d3444724d7981f9bbbb1b41ae93>:0 
2018-09-28 12:49:11 -   at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-09-28 12:49:11 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x0003b] in <2943701620b54f86b436d3ffad010412>:0 
2018-09-28 12:53:48 - //third case
2018-09-28 12:53:48 - let polynom3 n x =
2018-09-28 12:53:48 -     let x0 = points |> List.filter (fun i -> x >= i - h / 2. && x < i + h / 2.) |> List.exactlyOne
2018-09-28 12:53:48 -     let middlePoint = points |> List.findIndex (fun i -> i = x0)
2018-09-28 12:53:48 -     let startIndex = middlePoint - (n + 1) / 2
2018-09-28 12:53:48 -     let endIndex = middlePoint + n / 2
2018-09-28 12:53:48 -     let t = (x - x0) / h
2018-09-28 12:53:48 -     let Nk =
2018-09-28 12:53:48 -         let rec NkInternal prev i = seq{
2018-09-28 12:53:48 -             match i with
2018-09-28 12:53:48 -             | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** i) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-09-28 12:53:48 -             | 0. -> yield t
2018-09-28 12:53:48 -                     yield! NkInternal t (i + 1.)
2018-09-28 12:53:48 -             | _ ->  let cur = prev * (t + ((-1.) ** i) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-09-28 12:53:48 -                     yield cur
2018-09-28 12:53:48 -                     yield! NkInternal cur (i + 1.)
2018-09-28 12:53:48 -         }
2018-09-28 12:53:48 -         NkInternal 1. 0. |> Seq.toList
2018-09-28 12:53:48 -     
2018-09-28 12:53:48 -     let middle =
2018-09-28 12:53:48 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-09-28 12:53:48 -             match finiteDifference with
2018-09-28 12:53:48 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-09-28 12:53:48 -             | _ -> acc |> List.rev
2018-09-28 12:53:48 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-09-28 12:53:48 -     let rec polynom3Internal nki (finiteDifference : float list list) k acc =
2018-09-28 12:53:48 -         match nki, finiteDifference with
2018-09-28 12:53:48 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom3Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length / 2])
2018-09-28 12:53:48 -         | _ -> acc
2018-09-28 12:53:48 -     
2018-09-28 12:53:48 -     match startIndex, endIndex with
2018-09-28 12:53:48 -     | (s, e) when s >= 0 && e < points.Length -> polynom3Internal Nk middle.Tail 0 (f x0)
2018-09-28 12:53:48 -     | (s, e) when s >= 0 -> polynom2 n x
2018-09-28 12:53:48 -     | (s, e) when e < points.Length -> polynom n x
2018-09-28 12:53:48 -     | _ -> failwith "Incorrect arguments"
2018-09-28 12:53:49 - let plotThirdCaseError () =
2018-09-28 12:53:49 -     let trace1 =
2018-09-28 12:53:49 -         let y = points |> List.map f
2018-09-28 12:53:49 -         Scatter(
2018-09-28 12:53:49 -             x = points,
2018-09-28 12:53:49 -             y = y,
2018-09-28 12:53:49 -             name = "Исходная функция"
2018-09-28 12:53:49 -         )
2018-09-28 12:53:49 -     let trace2 =
2018-09-28 12:53:49 -         let y = points |> List.map (polynom3 1)
2018-09-28 12:53:49 -         Scatter(
2018-09-28 12:53:49 -             x = points,
2018-09-28 12:53:49 -             y = y,
2018-09-28 12:53:49 -             name = "Интерполяционный полином"
2018-09-28 12:53:49 -         )
2018-09-28 12:53:49 -     [trace1; trace2]
2018-09-28 12:53:49 -     |> Chart.Plot
2018-09-28 12:53:49 -     |> Chart.WithWidth 1000
2018-09-28 12:53:49 -     |> Chart.WithHeight 700
2018-09-28 12:53:49 - plotThirdCaseError()
2018-09-28 12:53:50 - let x = -1.505 //значение из отрезка [-2; -1]
2018-09-28 12:53:50 - let n = 5 //степень полинома
2018-09-28 12:53:51 - polynom n x - f x |> abs;;
2018-09-28 12:53:52 - polynom2 n x - f x |> abs;;
2018-09-28 12:53:53 - polynom3 n x - f x |> abs;;
2018-10-01 12:20:14 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-10-01 12:20:14 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-10-01 12:20:14 - For help type #help;;
2018-10-01 12:20:14 - > val it :
2018-10-01 12:20:14 -   ResizeArray<System.Type *
2018-10-01 12:20:14 -               (obj ->
2018-10-01 12:20:14 -                  seq<string *
2018-10-01 12:20:14 -                      string> *
2018-10-01 12:20:14 -                  string)>
2018-10-01 12:20:14 - = seq []
2018-10-01 12:20:14 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-10-01 12:20:14 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-10-01 12:20:14 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-10-01 12:20:14 - Reporting 0 opened comms
2018-10-02 12:29:52 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-10-02 12:29:52 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-10-02 12:29:52 - For help type #help;;
2018-10-02 12:29:52 - > val it :
2018-10-02 12:29:52 -   ResizeArray<System.Type *
2018-10-02 12:29:52 -               (obj ->
2018-10-02 12:29:52 -                  seq<string *
2018-10-02 12:29:52 -                      string> *
2018-10-02 12:29:52 -                  string)>
2018-10-02 12:29:52 - = seq []
2018-10-02 12:29:52 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-10-02 12:29:52 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-10-02 12:29:52 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-10-02 12:29:52 - Reporting 0 opened comms
2018-10-02 12:52:09 - Reporting 0 opened comms
2018-10-02 12:52:35 - #load "XPlot.Plotly.Paket.fsx"
2018-10-02 12:52:35 - #load "XPlot.Plotly.fsx"
2018-10-02 12:52:35 - open XPlot.Plotly
2018-10-02 12:52:35 - open System
2018-10-02 12:52:53 - let N = 5.
2018-10-02 12:52:53 - let x0 = -(N % 3.)
2018-10-02 12:52:53 - let xm = x0 + 1.
2018-10-02 12:52:53 - let h = 0.01
2018-10-02 12:52:53 - let points = [x0 .. h .. xm]
2018-10-02 12:52:53 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-10-02 12:52:53 - let finiteDifferencesTable = 
2018-10-02 12:52:53 -     let rec computeCells y acc = 
2018-10-02 12:52:53 -         let computeCol height (prevCol : float list) =
2018-10-02 12:52:53 -             let rec computeColInternal x acc =
2018-10-02 12:52:53 -                 match x with
2018-10-02 12:52:53 -                 | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-10-02 12:52:53 -                 | _ -> acc
2018-10-02 12:52:53 -             computeColInternal (points.Length - height) [] 
2018-10-02 12:52:53 -         match y with
2018-10-02 12:52:53 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-10-02 12:52:53 -         |_ -> List.rev acc
2018-10-02 12:52:53 -     computeCells (points.Length - 1) [points |> List.map f]
2018-10-02 12:52:54 - //first case
2018-10-02 12:52:54 - let polynom n x =
2018-10-02 12:52:54 -     let t = (x - x0) / h
2018-10-02 12:52:54 -     let Nk =
2018-10-02 12:52:54 -         let rec NkInternal prev i = seq{
2018-10-02 12:52:54 -             match i with
2018-10-02 12:52:54 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-10-02 12:52:54 -             | 0. -> yield t
2018-10-02 12:52:54 -                     yield! NkInternal t (i + 1.)
2018-10-02 12:52:54 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-10-02 12:52:54 -                     yield cur
2018-10-02 12:52:54 -                     yield! NkInternal cur (i + 1.)
2018-10-02 12:52:54 -         }
2018-10-02 12:52:54 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 12:52:54 -     let rec polynomInternal nki (finiteDifference : float list list) k acc =
2018-10-02 12:52:54 -         match nki, finiteDifference with
2018-10-02 12:52:54 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynomInternal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.head)) 
2018-10-02 12:52:54 -         | _ -> acc
2018-10-02 12:52:54 -     polynomInternal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-10-02 12:52:54 - let plotFirstCaseError () =
2018-10-02 12:52:54 -     let trace1 =
2018-10-02 12:52:54 -         let y = points |> List.map f
2018-10-02 12:52:54 -         Scatter(
2018-10-02 12:52:54 -             x = points,
2018-10-02 12:52:54 -             y = y,
2018-10-02 12:52:54 -             name = "Исходная функция"
2018-10-02 12:52:54 -         )
2018-10-02 12:52:54 -     let trace2 =
2018-10-02 12:52:54 -         let y = points |> List.map (polynom 1)
2018-10-02 12:52:54 -         Scatter(
2018-10-02 12:52:54 -             x = points,
2018-10-02 12:52:54 -             y = y,
2018-10-02 12:52:54 -             name = "Интерполяционный полином"
2018-10-02 12:52:54 -         )
2018-10-02 12:52:54 -     [trace1; trace2]
2018-10-02 12:52:54 -     |> Chart.Plot
2018-10-02 12:52:54 -     |> Chart.WithWidth 1000
2018-10-02 12:52:54 -     |> Chart.WithHeight 700
2018-10-02 12:52:54 - plotFirstCaseError()
2018-10-02 12:52:54 - //second case
2018-10-02 12:52:54 - let polynom2 n x =
2018-10-02 12:52:54 -     let t = (x - xm) / h
2018-10-02 12:52:54 -     let Nk =
2018-10-02 12:52:54 -         let rec NkInternal prev i = seq{
2018-10-02 12:52:54 -             match i with
2018-10-02 12:52:54 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-10-02 12:52:54 -             | 0. -> yield t
2018-10-02 12:52:54 -                     yield! NkInternal t (i + 1.)
2018-10-02 12:52:54 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-10-02 12:52:54 -                     yield cur
2018-10-02 12:52:54 -                     yield! NkInternal cur (i + 1.)
2018-10-02 12:52:54 -         }
2018-10-02 12:52:54 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 12:52:54 -     
2018-10-02 12:52:54 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-10-02 12:52:54 -         match nki, finiteDifference with
2018-10-02 12:52:54 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.last)) 
2018-10-02 12:52:54 -         | _ -> acc
2018-10-02 12:52:54 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-10-02 12:52:55 - let plotSecondCaseError () =
2018-10-02 12:52:55 -     let trace1 =
2018-10-02 12:52:55 -         let y = points |> List.map f
2018-10-02 12:52:55 -         Scatter(
2018-10-02 12:52:55 -             x = points,
2018-10-02 12:52:55 -             y = y,
2018-10-02 12:52:55 -             name = "Исходная функция"
2018-10-02 12:52:55 -         )
2018-10-02 12:52:55 -     let trace2 =
2018-10-02 12:52:55 -         let y = points |> List.map (polynom2 4)
2018-10-02 12:52:55 -         Scatter(
2018-10-02 12:52:55 -             x = points,
2018-10-02 12:52:55 -             y = y,
2018-10-02 12:52:55 -             name = "Интерполяционный полином"
2018-10-02 12:52:55 -         )
2018-10-02 12:52:55 -     [trace1; trace2]
2018-10-02 12:52:55 -     |> Chart.Plot
2018-10-02 12:52:55 -     |> Chart.WithWidth 1000
2018-10-02 12:52:55 -     |> Chart.WithHeight 700
2018-10-02 12:52:55 - plotSecondCaseError()
2018-10-02 12:52:55 - //third case
2018-10-02 12:52:55 - let polynom3 n x =
2018-10-02 12:52:55 -     let x0 = points |> List.filter (fun i -> x > i - h / 2. && x <= i + h / 2.) |> List.exactlyOne
2018-10-02 12:52:55 -     let isRightSide = x <= x0 + h / 2. && x > x0
2018-10-02 12:52:55 -     let middlePoint = points |> List.findIndex (fun i -> i = x0)
2018-10-02 12:52:55 -     let dependenceOfSide rightSide = 
2018-10-02 12:52:55 -         match rightSide with
2018-10-02 12:52:55 -         | true -> (n + 1) / 2
2018-10-02 12:52:55 -         | false -> n / 2
2018-10-02 12:52:55 -     let startIndex = middlePoint - (dependenceOfSide isRightSide)
2018-10-02 12:52:55 -     let endIndex = middlePoint + (dependenceOfSide <| not isRightSide)
2018-10-02 12:52:55 -     let t = (x - x0) / h
2018-10-02 12:52:55 -     let Nk =
2018-10-02 12:52:55 -         let rec NkInternal prev i =
2018-10-02 12:52:55 -             let deg = 
2018-10-02 12:52:55 -                 match isRightSide with
2018-10-02 12:52:55 -                 | true -> i
2018-10-02 12:52:55 -                 | false -> i + 1.
2018-10-02 12:52:55 -             seq{
2018-10-02 12:52:55 -                 match i with
2018-10-02 12:52:55 -                 | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 12:52:55 -                 | 0. -> yield t
2018-10-02 12:52:55 -                         yield! NkInternal t (i + 1.)
2018-10-02 12:52:55 -                 | _ ->  let cur = prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 12:52:55 -                         yield cur
2018-10-02 12:52:55 -                         yield! NkInternal cur (i + 1.)
2018-10-02 12:52:55 -             }
2018-10-02 12:52:55 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 12:52:55 -     
2018-10-02 12:52:55 -     let middle =
2018-10-02 12:52:55 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-10-02 12:52:55 -             match finiteDifference with
2018-10-02 12:52:55 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-10-02 12:52:55 -             | _ -> acc |> List.rev
2018-10-02 12:52:55 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-10-02 12:52:55 -     let rec polynom3Internal nki (finiteDifference : float list list) k acc =
2018-10-02 12:52:55 -         match nki, finiteDifference with
2018-10-02 12:52:55 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom3Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length / 2])
2018-10-02 12:52:55 -         | _ -> acc
2018-10-02 12:52:55 -     
2018-10-02 12:52:55 -     match startIndex, endIndex with
2018-10-02 12:52:55 -     | (s, e) when s >= 0 && e < points.Length -> polynom3Internal Nk middle.Tail 0 (f x0)
2018-10-02 12:52:55 -     | (s, e) when s >= 0 -> polynom2 n x
2018-10-02 12:52:55 -     | (s, e) when e < points.Length -> polynom n x
2018-10-02 12:52:55 -     | _ -> failwith "Incorrect arguments"
2018-10-02 12:52:55 - let plotThirdCaseError () =
2018-10-02 12:52:55 -     let trace1 =
2018-10-02 12:52:55 -         let y = points |> List.map f
2018-10-02 12:52:55 -         Scatter(
2018-10-02 12:52:55 -             x = points,
2018-10-02 12:52:55 -             y = y,
2018-10-02 12:52:55 -             name = "Исходная функция"
2018-10-02 12:52:55 -         )
2018-10-02 12:52:55 -     let trace2 =
2018-10-02 12:52:55 -         let y = points |> List.map (polynom3 1)
2018-10-02 12:52:55 -         Scatter(
2018-10-02 12:52:55 -             x = points,
2018-10-02 12:52:55 -             y = y,
2018-10-02 12:52:55 -             name = "Интерполяционный полином"
2018-10-02 12:52:55 -         )
2018-10-02 12:52:55 -     [trace1; trace2]
2018-10-02 12:52:55 -     |> Chart.Plot
2018-10-02 12:52:55 -     |> Chart.WithWidth 1000
2018-10-02 12:52:55 -     |> Chart.WithHeight 700
2018-10-02 12:52:55 - plotThirdCaseError()
2018-10-02 12:52:55 - let x = -1.505 //значение из отрезка [-2; -1]
2018-10-02 12:52:55 - let n = 5 //степень полинома
2018-10-02 12:52:55 - polynom n x - f x |> abs;;
2018-10-02 12:52:56 - polynom2 n x - f x |> abs;;
2018-10-02 12:52:56 - polynom3 n x - f x |> abs;;
2018-10-02 12:52:56 - Expression evaluation failed: The input sequence was empty.
2018-10-02 12:52:56 - Parameter name: source
2018-10-02 12:52:56 - ArgumentExceptionThe input sequence was empty.
2018-10-02 12:52:56 - Parameter name: source
2018-10-02 12:52:56 -   at Microsoft.FSharp.Collections.ListModule.ExactlyOne[T] (Microsoft.FSharp.Collections.FSharpList`1[T] list) [0x0000d] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-10-02 12:52:56 -   at FSI_0015.polynom3 (System.Int32 n, System.Double x) [0x00013] in <1daf6fa646db4d719aa67449e5a88cb8>:0 
2018-10-02 12:52:56 -   at <StartupCode$FSI_0023>.$FSI_0023.main@ () [0x00000] in <1daf6fa646db4d719aa67449e5a88cb8>:0 
2018-10-02 12:52:56 -   at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-10-02 12:52:56 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x0003b] in <2943701620b54f86b436d3ffad010412>:0 
2018-10-02 12:59:52 - //third case
2018-10-02 12:59:52 - let polynom3 n x =
2018-10-02 12:59:52 -     let x0 = points |> List.filter (fun i -> x >= i - h / 2. && x <= i + h / 2.) |> List.exactlyOne
2018-10-02 12:59:52 -     let isRightSide = x <= x0 + h / 2. && x > x0
2018-10-02 12:59:52 -     let middlePoint = points |> List.findIndex (fun i -> i = x0)
2018-10-02 12:59:52 -     let dependenceOfSide rightSide = 
2018-10-02 12:59:52 -         match rightSide with
2018-10-02 12:59:52 -         | true -> (n + 1) / 2
2018-10-02 12:59:52 -         | false -> n / 2
2018-10-02 12:59:52 -     let startIndex = middlePoint - (dependenceOfSide isRightSide)
2018-10-02 12:59:52 -     let endIndex = middlePoint + (dependenceOfSide <| not isRightSide)
2018-10-02 12:59:52 -     let t = (x - x0) / h
2018-10-02 12:59:52 -     let Nk =
2018-10-02 12:59:52 -         let rec NkInternal prev i =
2018-10-02 12:59:52 -             let deg = 
2018-10-02 12:59:52 -                 match isRightSide with
2018-10-02 12:59:52 -                 | true -> i
2018-10-02 12:59:52 -                 | false -> i + 1.
2018-10-02 12:59:52 -             seq{
2018-10-02 12:59:52 -                 match i with
2018-10-02 12:59:52 -                 | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 12:59:52 -                 | 0. -> yield t
2018-10-02 12:59:52 -                         yield! NkInternal t (i + 1.)
2018-10-02 12:59:52 -                 | _ ->  let cur = prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 12:59:52 -                         yield cur
2018-10-02 12:59:52 -                         yield! NkInternal cur (i + 1.)
2018-10-02 12:59:52 -             }
2018-10-02 12:59:52 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 12:59:52 -     
2018-10-02 12:59:52 -     let middle =
2018-10-02 12:59:52 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-10-02 12:59:52 -             match finiteDifference with
2018-10-02 12:59:52 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-10-02 12:59:52 -             | _ -> acc |> List.rev
2018-10-02 12:59:52 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-10-02 12:59:52 -     let rec polynom3Internal nki (finiteDifference : float list list) k acc =
2018-10-02 12:59:52 -         match nki, finiteDifference with
2018-10-02 12:59:52 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom3Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length / 2])
2018-10-02 12:59:52 -         | _ -> acc
2018-10-02 12:59:52 -     
2018-10-02 12:59:52 -     match startIndex, endIndex with
2018-10-02 12:59:52 -     | (s, e) when s >= 0 && e < points.Length -> polynom3Internal Nk middle.Tail 0 (f x0)
2018-10-02 12:59:52 -     | (s, e) when s >= 0 -> polynom2 n x
2018-10-02 12:59:52 -     | (s, e) when e < points.Length -> polynom n x
2018-10-02 12:59:52 -     | _ -> failwith "Incorrect arguments"
2018-10-02 12:59:54 - let plotThirdCaseError () =
2018-10-02 12:59:54 -     let trace1 =
2018-10-02 12:59:54 -         let y = points |> List.map f
2018-10-02 12:59:54 -         Scatter(
2018-10-02 12:59:54 -             x = points,
2018-10-02 12:59:54 -             y = y,
2018-10-02 12:59:54 -             name = "Исходная функция"
2018-10-02 12:59:54 -         )
2018-10-02 12:59:54 -     let trace2 =
2018-10-02 12:59:54 -         let y = points |> List.map (polynom3 1)
2018-10-02 12:59:54 -         Scatter(
2018-10-02 12:59:54 -             x = points,
2018-10-02 12:59:54 -             y = y,
2018-10-02 12:59:54 -             name = "Интерполяционный полином"
2018-10-02 12:59:54 -         )
2018-10-02 12:59:54 -     [trace1; trace2]
2018-10-02 12:59:54 -     |> Chart.Plot
2018-10-02 12:59:54 -     |> Chart.WithWidth 1000
2018-10-02 12:59:54 -     |> Chart.WithHeight 700
2018-10-02 12:59:54 - plotThirdCaseError()
2018-10-02 12:59:54 - let x = -1.505 //значение из отрезка [-2; -1]
2018-10-02 12:59:54 - let n = 5 //степень полинома
2018-10-02 12:59:55 - polynom n x - f x |> abs;;
2018-10-02 12:59:56 - polynom2 n x - f x |> abs;;
2018-10-02 12:59:59 - polynom3 n x - f x |> abs;;
2018-10-02 13:00:57 - let x = -1.997 //значение из отрезка [-2; -1]
2018-10-02 13:00:57 - let n = 3 //степень полинома
2018-10-02 13:00:57 - polynom n x - f x |> abs;;
2018-10-02 13:01:11 - let x = -1.997 //значение из отрезка [-2; -1]
2018-10-02 13:01:11 - let n = 7 //степень полинома
2018-10-02 13:01:12 - polynom n x - f x |> abs;;
2018-10-02 13:01:27 - let x = -1.977 //значение из отрезка [-2; -1]
2018-10-02 13:01:27 - let n = 3 //степень полинома
2018-10-02 13:01:29 - polynom n x - f x |> abs;;
2018-10-02 13:01:34 - let x = -1.977 //значение из отрезка [-2; -1]
2018-10-02 13:01:34 - let n = 7 //степень полинома
2018-10-02 13:01:35 - polynom n x - f x |> abs;;
2018-10-02 13:01:52 - let x = -1.557 //значение из отрезка [-2; -1]
2018-10-02 13:01:52 - let n = 3 //степень полинома
2018-10-02 13:01:56 - polynom3 n x - f x |> abs;;
2018-10-02 13:02:13 - let x = -1.557 //значение из отрезка [-2; -1]
2018-10-02 13:02:13 - let n = 7 //степень полинома
2018-10-02 13:02:16 - polynom3 n x - f x |> abs;;
2018-10-02 13:03:32 - let x = -1.977 //значение из отрезка [-2; -1]
2018-10-02 13:03:32 - let n = 2 //степень полинома
2018-10-02 13:03:42 - polynom3 n x - f x |> abs;;
2018-10-02 13:05:11 - polynom n x - f x |> abs;;
2018-10-02 13:07:12 - let x = -1.777 //значение из отрезка [-2; -1]
2018-10-02 13:07:12 - let n = 3 //степень полинома
2018-10-02 13:07:15 - polynom3 n x - f x |> abs;;
2018-10-02 13:07:30 - let x = -1.777 //значение из отрезка [-2; -1]
2018-10-02 13:07:30 - let n = 7 //степень полинома
2018-10-02 13:07:32 - polynom3 n x - f x |> abs;;
2018-10-02 13:07:54 - let x = -1.007 //значение из отрезка [-2; -1]
2018-10-02 13:07:54 - let n = 3 //степень полинома
2018-10-02 13:07:56 - polynom3 n x - f x |> abs;;
2018-10-02 13:08:09 - let x = -1.007 //значение из отрезка [-2; -1]
2018-10-02 13:08:09 - let n = 7 //степень полинома
2018-10-02 13:08:13 - polynom3 n x - f x |> abs;;
2018-10-02 13:08:34 - let x = -1.037 //значение из отрезка [-2; -1]
2018-10-02 13:08:34 - let n = 3 //степень полинома
2018-10-02 13:08:37 - polynom3 n x - f x |> abs;;
2018-10-02 13:08:42 - let x = -1.037 //значение из отрезка [-2; -1]
2018-10-02 13:08:42 - let n = 8 //степень полинома
2018-10-02 13:08:47 - polynom3 n x - f x |> abs;;
2018-10-02 13:09:48 - let x = -1.537 //значение из отрезка [-2; -1]
2018-10-02 13:09:48 - let n = 3 //степень полинома
2018-10-02 13:09:50 - polynom3 n x - f x |> abs;;
2018-10-02 13:19:53 - #load "XPlot.Plotly.Paket.fsx"
2018-10-02 13:19:53 - #load "XPlot.Plotly.fsx"
2018-10-02 13:19:53 - open XPlot.Plotly
2018-10-02 13:19:53 - open System
2018-10-02 13:19:57 - let N = 5.
2018-10-02 13:19:57 - let x0 = -(N % 3.)
2018-10-02 13:19:57 - let xm = x0 + 1.
2018-10-02 13:19:57 - let h = 0.01
2018-10-02 13:19:57 - let points = [x0 .. h .. xm]
2018-10-02 13:19:57 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-10-02 13:19:57 - let finiteDifferencesTable = 
2018-10-02 13:19:57 -     let rec computeCells y acc = 
2018-10-02 13:19:57 -         let computeCol height (prevCol : float list) =
2018-10-02 13:19:57 -             let rec computeColInternal x acc =
2018-10-02 13:19:57 -                 match x with
2018-10-02 13:19:57 -                 | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-10-02 13:19:57 -                 | _ -> acc
2018-10-02 13:19:57 -             computeColInternal (points.Length - height) [] 
2018-10-02 13:19:57 -         match y with
2018-10-02 13:19:57 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-10-02 13:19:57 -         |_ -> List.rev acc
2018-10-02 13:19:57 -     computeCells (points.Length - 1) [points |> List.map f]
2018-10-02 13:19:58 - //first case
2018-10-02 13:19:58 - let polynom n x =
2018-10-02 13:19:58 -     let t = (x - x0) / h
2018-10-02 13:19:58 -     let Nk =
2018-10-02 13:19:58 -         let rec NkInternal prev i = seq{
2018-10-02 13:19:58 -             match i with
2018-10-02 13:19:58 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-10-02 13:19:58 -             | 0. -> yield t
2018-10-02 13:19:58 -                     yield! NkInternal t (i + 1.)
2018-10-02 13:19:58 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-10-02 13:19:58 -                     yield cur
2018-10-02 13:19:58 -                     yield! NkInternal cur (i + 1.)
2018-10-02 13:19:58 -         }
2018-10-02 13:19:58 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 13:19:58 -     let rec polynomInternal nki (finiteDifference : float list list) k acc =
2018-10-02 13:19:58 -         match nki, finiteDifference with
2018-10-02 13:19:58 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynomInternal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.head)) 
2018-10-02 13:19:58 -         | _ -> acc
2018-10-02 13:19:58 -     polynomInternal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-10-02 13:19:58 - let plotFirstCaseError () =
2018-10-02 13:19:58 -     let trace1 =
2018-10-02 13:19:58 -         let y = points |> List.map f
2018-10-02 13:19:58 -         Scatter(
2018-10-02 13:19:58 -             x = points,
2018-10-02 13:19:58 -             y = y,
2018-10-02 13:19:58 -             name = "Исходная функция"
2018-10-02 13:19:58 -         )
2018-10-02 13:19:58 -     let trace2 =
2018-10-02 13:19:58 -         let y = points |> List.map (polynom 1)
2018-10-02 13:19:58 -         Scatter(
2018-10-02 13:19:58 -             x = points,
2018-10-02 13:19:58 -             y = y,
2018-10-02 13:19:58 -             name = "Интерполяционный полином"
2018-10-02 13:19:58 -         )
2018-10-02 13:19:58 -     [trace1; trace2]
2018-10-02 13:19:58 -     |> Chart.Plot
2018-10-02 13:19:58 -     |> Chart.WithWidth 1000
2018-10-02 13:19:58 -     |> Chart.WithHeight 700
2018-10-02 13:19:58 - plotFirstCaseError()
2018-10-02 13:19:58 - //second case
2018-10-02 13:19:58 - let polynom2 n x =
2018-10-02 13:19:58 -     let t = (x - xm) / h
2018-10-02 13:19:58 -     let Nk =
2018-10-02 13:19:58 -         let rec NkInternal prev i = seq{
2018-10-02 13:19:58 -             match i with
2018-10-02 13:19:58 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-10-02 13:19:58 -             | 0. -> yield t
2018-10-02 13:19:58 -                     yield! NkInternal t (i + 1.)
2018-10-02 13:19:58 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-10-02 13:19:58 -                     yield cur
2018-10-02 13:19:58 -                     yield! NkInternal cur (i + 1.)
2018-10-02 13:19:58 -         }
2018-10-02 13:19:58 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 13:19:58 -     
2018-10-02 13:19:58 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-10-02 13:19:58 -         match nki, finiteDifference with
2018-10-02 13:19:58 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.last)) 
2018-10-02 13:19:58 -         | _ -> acc
2018-10-02 13:19:58 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-10-02 13:19:58 - let plotSecondCaseError () =
2018-10-02 13:19:58 -     let trace1 =
2018-10-02 13:19:58 -         let y = points |> List.map f
2018-10-02 13:19:58 -         Scatter(
2018-10-02 13:19:58 -             x = points,
2018-10-02 13:19:58 -             y = y,
2018-10-02 13:19:58 -             name = "Исходная функция"
2018-10-02 13:19:58 -         )
2018-10-02 13:19:58 -     let trace2 =
2018-10-02 13:19:58 -         let y = points |> List.map (polynom2 4)
2018-10-02 13:19:58 -         Scatter(
2018-10-02 13:19:58 -             x = points,
2018-10-02 13:19:58 -             y = y,
2018-10-02 13:19:58 -             name = "Интерполяционный полином"
2018-10-02 13:19:58 -         )
2018-10-02 13:19:58 -     [trace1; trace2]
2018-10-02 13:19:58 -     |> Chart.Plot
2018-10-02 13:19:58 -     |> Chart.WithWidth 1000
2018-10-02 13:19:58 -     |> Chart.WithHeight 700
2018-10-02 13:19:58 - plotSecondCaseError()
2018-10-02 13:19:58 - //third case
2018-10-02 13:19:58 - let polynom3 n x =
2018-10-02 13:19:58 -     let startX = points |> List.filter (fun i -> x > i - h / 2. && x <= i + h / 2.) |> List.exactlyOne
2018-10-02 13:19:58 -     let isRightSide = x <= startX + h / 2. && x > startX
2018-10-02 13:19:58 -     let middlePoint = points |> List.findIndex (fun i -> i = startX)
2018-10-02 13:19:58 -     let dependenceOfSide rightSide = 
2018-10-02 13:19:58 -         match rightSide with
2018-10-02 13:19:58 -         | true -> (n + 1) / 2
2018-10-02 13:19:58 -         | false -> n / 2
2018-10-02 13:19:58 -     let startIndex = middlePoint - (dependenceOfSide isRightSide)
2018-10-02 13:19:58 -     let endIndex = middlePoint + (dependenceOfSide <| not isRightSide)
2018-10-02 13:19:58 -     let t = (x - startX) / h
2018-10-02 13:19:58 -     let Nk =
2018-10-02 13:19:58 -         let rec NkInternal prev i =
2018-10-02 13:19:58 -             let deg = 
2018-10-02 13:19:58 -                 match isRightSide with
2018-10-02 13:19:58 -                 | true -> i
2018-10-02 13:19:58 -                 | false -> i + 1.
2018-10-02 13:19:58 -             seq{
2018-10-02 13:19:58 -                 match i with
2018-10-02 13:19:58 -                 | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 13:19:58 -                 | 0. -> yield t
2018-10-02 13:19:58 -                         yield! NkInternal t (i + 1.)
2018-10-02 13:19:58 -                 | _ ->  let cur = prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 13:19:58 -                         yield cur
2018-10-02 13:19:58 -                         yield! NkInternal cur (i + 1.)
2018-10-02 13:19:58 -             }
2018-10-02 13:19:58 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 13:19:58 -     
2018-10-02 13:19:58 -     let middle =
2018-10-02 13:19:58 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-10-02 13:19:58 -             match finiteDifference with
2018-10-02 13:19:58 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-10-02 13:19:58 -             | _ -> acc |> List.rev
2018-10-02 13:19:58 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-10-02 13:19:58 -     let rec polynom3Internal nki (finiteDifference : float list list) k acc =
2018-10-02 13:19:58 -         match nki, finiteDifference with
2018-10-02 13:19:58 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom3Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length / 2])
2018-10-02 13:19:58 -         | _ -> acc
2018-10-02 13:19:58 -     
2018-10-02 13:19:58 -     match startIndex, endIndex with
2018-10-02 13:19:58 -     | (s, e) when s >= 0 && e < points.Length -> polynom3Internal Nk middle.Tail 0 (f startX)
2018-10-02 13:19:58 -     | (s, e) when s >= 0 -> polynom2 n x
2018-10-02 13:19:58 -     | (s, e) when e < points.Length -> polynom n x
2018-10-02 13:19:58 -     | _ -> failwith "Incorrect arguments"
2018-10-02 13:19:59 - let plotThirdCaseError () =
2018-10-02 13:19:59 -     let trace1 =
2018-10-02 13:19:59 -         let y = points |> List.map f
2018-10-02 13:19:59 -         Scatter(
2018-10-02 13:19:59 -             x = points,
2018-10-02 13:19:59 -             y = y,
2018-10-02 13:19:59 -             name = "Исходная функция"
2018-10-02 13:19:59 -         )
2018-10-02 13:19:59 -     let trace2 =
2018-10-02 13:19:59 -         let y = points |> List.map (polynom3 1)
2018-10-02 13:19:59 -         Scatter(
2018-10-02 13:19:59 -             x = points,
2018-10-02 13:19:59 -             y = y,
2018-10-02 13:19:59 -             name = "Интерполяционный полином"
2018-10-02 13:19:59 -         )
2018-10-02 13:19:59 -     [trace1; trace2]
2018-10-02 13:19:59 -     |> Chart.Plot
2018-10-02 13:19:59 -     |> Chart.WithWidth 1000
2018-10-02 13:19:59 -     |> Chart.WithHeight 700
2018-10-02 13:19:59 - plotThirdCaseError()
2018-10-02 13:19:59 - let x = -1.537 //значение из отрезка [-2; -1]
2018-10-02 13:19:59 - let n = 3 //степень полинома
2018-10-02 13:19:59 - polynom n x - f x |> abs;;
2018-10-02 13:19:59 - polynom2 n x - f x |> abs;;
2018-10-02 13:19:59 - polynom3 n x - f x |> abs;;
2018-10-02 13:20:15 - let x = -1.537 //значение из отрезка [-2; -1]
2018-10-02 13:20:15 - let n = 7 //степень полинома
2018-10-02 13:20:17 - polynom3 n x - f x |> abs;;
2018-10-02 13:27:14 - let x = -1.541 //значение из отрезка [-2; -1]
2018-10-02 13:27:14 - let n = 7 //степень полинома
2018-10-02 13:27:21 - polynom3 n x - f x |> abs;;
2018-10-02 13:27:32 - let x = -1.541 //значение из отрезка [-2; -1]
2018-10-02 13:27:32 - let n = 3 //степень полинома
2018-10-02 13:27:35 - polynom3 n x - f x |> abs;;
2018-10-02 13:27:45 - let x = -1.541 //значение из отрезка [-2; -1]
2018-10-02 13:27:45 - let n = 1 //степень полинома
2018-10-02 13:27:47 - polynom3 n x - f x |> abs;;
2018-10-02 13:27:57 - let x = -1.541 //значение из отрезка [-2; -1]
2018-10-02 13:27:57 - let n = 50 //степень полинома
2018-10-02 13:28:00 - polynom3 n x - f x |> abs;;
2018-10-02 13:28:10 - let x = -1.537 //значение из отрезка [-2; -1]
2018-10-02 13:28:10 - let n = 50 //степень полинома
2018-10-02 13:28:14 - polynom3 n x - f x |> abs;;
2018-10-02 13:28:23 - let x = -1.537 //значение из отрезка [-2; -1]
2018-10-02 13:28:23 - let n = 3 //степень полинома
2018-10-02 13:28:26 - polynom3 n x - f x |> abs;;
2018-10-02 13:28:35 - let x = -1.537 //значение из отрезка [-2; -1]
2018-10-02 13:28:35 - let n = 9 //степень полинома
2018-10-02 13:28:37 - polynom3 n x - f x |> abs;;
2018-10-02 13:28:48 - let x = -1.537 //значение из отрезка [-2; -1]
2018-10-02 13:28:48 - let n = 20 //степень полинома
2018-10-02 13:28:50 - polynom3 n x - f x |> abs;;
2018-10-02 13:29:18 - let x = -1.537 //значение из отрезка [-2; -1]
2018-10-02 13:29:18 - let n = 3 //степень полинома
2018-10-02 13:29:20 - polynom3 n x - f x |> abs;;
2018-10-02 13:29:38 - let x = -1.537 //значение из отрезка [-2; -1]
2018-10-02 13:29:38 - let n = 10 //степень полинома
2018-10-02 13:29:41 - polynom3 n x - f x |> abs;;
2018-10-02 13:29:51 - let x = -1.537 //значение из отрезка [-2; -1]
2018-10-02 13:29:51 - let n = 6 //степень полинома
2018-10-02 13:29:54 - polynom3 n x - f x |> abs;;
2018-10-02 13:30:12 - let x = -1.541 //значение из отрезка [-2; -1]
2018-10-02 13:30:12 - let n = 3 //степень полинома
2018-10-02 13:30:15 - polynom3 n x - f x |> abs;;
2018-10-02 13:30:24 - let x = -1.541 //значение из отрезка [-2; -1]
2018-10-02 13:30:24 - let n = 6 //степень полинома
2018-10-02 13:30:27 - polynom3 n x - f x |> abs;;
2018-10-02 13:31:27 - let x = -1.541 //значение из отрезка [-2; -1]
2018-10-02 13:31:27 - let n = 3 //степень полинома
2018-10-02 13:31:31 - polynom3 n x - f x |> abs;;
2018-10-02 13:31:44 - let x = -1.541 //значение из отрезка [-2; -1]
2018-10-02 13:31:44 - let n = 7 //степень полинома
2018-10-02 13:31:47 - polynom3 n x - f x |> abs;;
2018-10-02 13:33:02 - let x = -1.547 //значение из отрезка [-2; -1]
2018-10-02 13:33:02 - let n = 7 //степень полинома
2018-10-02 13:33:06 - let x = -1.547 //значение из отрезка [-2; -1]
2018-10-02 13:33:06 - let n = 3 //степень полинома
2018-10-02 13:33:08 - polynom3 n x - f x |> abs;;
2018-10-02 13:33:19 - let x = -1.547 //значение из отрезка [-2; -1]
2018-10-02 13:33:19 - let n = 7 //степень полинома
2018-10-02 13:33:24 - polynom3 n x - f x |> abs;;
2018-10-02 13:33:37 - let x = -1.547 //значение из отрезка [-2; -1]
2018-10-02 13:33:37 - let n = 10 //степень полинома
2018-10-02 13:33:40 - polynom3 n x - f x |> abs;;
2018-10-02 13:33:46 - let x = -1.547 //значение из отрезка [-2; -1]
2018-10-02 13:33:46 - let n = 6 //степень полинома
2018-10-02 13:33:50 - polynom3 n x - f x |> abs;;
2018-10-02 13:34:00 - let x = -1.547 //значение из отрезка [-2; -1]
2018-10-02 13:34:00 - let n = 7 //степень полинома
2018-10-02 13:34:02 - polynom3 n x - f x |> abs;;
2018-10-02 13:34:17 - let x = -1.547 //значение из отрезка [-2; -1]
2018-10-02 13:34:17 - let n = 8 //степень полинома
2018-10-02 13:34:19 - polynom3 n x - f x |> abs;;
2018-10-02 13:34:54 - let x = -1.447 //значение из отрезка [-2; -1]
2018-10-02 13:34:54 - let n = 2 //степень полинома
2018-10-02 13:34:55 - polynom3 n x - f x |> abs;;
2018-10-02 13:35:00 - let x = -1.447 //значение из отрезка [-2; -1]
2018-10-02 13:35:00 - let n = 3 //степень полинома
2018-10-02 13:35:02 - polynom3 n x - f x |> abs;;
2018-10-02 13:35:13 - let x = -1.447 //значение из отрезка [-2; -1]
2018-10-02 13:35:13 - let n = 4 //степень полинома
2018-10-02 13:35:15 - polynom3 n x - f x |> abs;;
2018-10-02 13:35:20 - let x = -1.447 //значение из отрезка [-2; -1]
2018-10-02 13:35:20 - let n = 5 //степень полинома
2018-10-02 13:35:22 - polynom3 n x - f x |> abs;;
2018-10-02 13:39:47 - let x = -1.451 //значение из отрезка [-2; -1]
2018-10-02 13:39:47 - let n = 5 //степень полинома
2018-10-02 13:39:50 - polynom3 n x - f x |> abs;;
2018-10-02 13:39:57 - let x = -1.451 //значение из отрезка [-2; -1]
2018-10-02 13:39:57 - let n = 6 //степень полинома
2018-10-02 13:39:58 - polynom3 n x - f x |> abs;;
2018-10-02 13:40:03 - let x = -1.451 //значение из отрезка [-2; -1]
2018-10-02 13:40:03 - let n = 8 //степень полинома
2018-10-02 13:40:04 - polynom3 n x - f x |> abs;;
2018-10-02 13:40:09 - let x = -1.451 //значение из отрезка [-2; -1]
2018-10-02 13:40:09 - let n = 3 //степень полинома
2018-10-02 13:40:10 - polynom3 n x - f x |> abs;;
2018-10-02 13:40:19 - let x = -1.451 //значение из отрезка [-2; -1]
2018-10-02 13:40:19 - let n = 1 //степень полинома
2018-10-02 13:40:20 - polynom3 n x - f x |> abs;;
2018-10-02 13:40:35 - let x = -1.454 //значение из отрезка [-2; -1]
2018-10-02 13:40:35 - let n = 1 //степень полинома
2018-10-02 13:40:36 - polynom3 n x - f x |> abs;;
2018-10-02 13:40:40 - let x = -1.454 //значение из отрезка [-2; -1]
2018-10-02 13:40:40 - let n = 3 //степень полинома
2018-10-02 13:40:41 - polynom3 n x - f x |> abs;;
2018-10-02 13:40:46 - let x = -1.454 //значение из отрезка [-2; -1]
2018-10-02 13:40:46 - let n = 7 //степень полинома
2018-10-02 13:40:47 - polynom3 n x - f x |> abs;;
2018-10-02 13:51:11 - //third case
2018-10-02 13:51:11 - let polynom3 n x =
2018-10-02 13:51:11 -     let startX = points |> List.filter (fun i -> x > i - h / 2. && x <= i + h / 2.) |> List.exactlyOne
2018-10-02 13:51:11 -     let isRightSide = x <= startX + h / 2. && x > startX
2018-10-02 13:51:11 -     let middlePoint = points |> List.findIndex (fun i -> i = startX)
2018-10-02 13:51:11 -     let dependenceOfSide rightSide = 
2018-10-02 13:51:11 -         match rightSide with
2018-10-02 13:51:11 -         | false -> (n + 1) / 2
2018-10-02 13:51:11 -         | true -> n / 2
2018-10-02 13:51:11 -     let startIndex = middlePoint - (dependenceOfSide isRightSide)
2018-10-02 13:51:11 -     let endIndex = middlePoint + (dependenceOfSide <| not isRightSide)
2018-10-02 13:51:11 -     let t = (x - startX) / h
2018-10-02 13:51:11 -     let Nk =
2018-10-02 13:51:11 -         let rec NkInternal prev i =
2018-10-02 13:51:11 -             let deg = 
2018-10-02 13:51:11 -                 match isRightSide with
2018-10-02 13:51:11 -                 | false -> i
2018-10-02 13:51:11 -                 | true -> i + 1.
2018-10-02 13:51:11 -             seq{
2018-10-02 13:51:11 -                 match i with
2018-10-02 13:51:11 -                 | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 13:51:11 -                 | 0. -> yield t
2018-10-02 13:51:11 -                         yield! NkInternal t (i + 1.)
2018-10-02 13:51:11 -                 | _ ->  let cur = prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 13:51:11 -                         yield cur
2018-10-02 13:51:11 -                         yield! NkInternal cur (i + 1.)
2018-10-02 13:51:11 -             }
2018-10-02 13:51:11 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 13:51:11 -     
2018-10-02 13:51:11 -     let middle =
2018-10-02 13:51:11 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-10-02 13:51:11 -             match finiteDifference with
2018-10-02 13:51:11 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-10-02 13:51:11 -             | _ -> acc |> List.rev
2018-10-02 13:51:11 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-10-02 13:51:11 -     let rec polynom3Internal nki (finiteDifference : float list list) k acc =
2018-10-02 13:51:11 -         match nki, finiteDifference with
2018-10-02 13:51:11 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom3Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length / 2])
2018-10-02 13:51:11 -         | _ -> acc
2018-10-02 13:51:11 -     
2018-10-02 13:51:11 -     match startIndex, endIndex with
2018-10-02 13:51:11 -     | (s, e) when s >= 0 && e < points.Length -> polynom3Internal Nk middle.Tail 0 (f startX)
2018-10-02 13:51:11 -     | (s, e) when s >= 0 -> polynom2 n x
2018-10-02 13:51:11 -     | (s, e) when e < points.Length -> polynom n x
2018-10-02 13:51:11 -     | _ -> failwith "Incorrect arguments"
2018-10-02 13:51:15 - #load "XPlot.Plotly.Paket.fsx"
2018-10-02 13:51:15 - #load "XPlot.Plotly.fsx"
2018-10-02 13:51:15 - open XPlot.Plotly
2018-10-02 13:51:15 - open System
2018-10-02 13:51:17 - let N = 5.
2018-10-02 13:51:17 - let x0 = -(N % 3.)
2018-10-02 13:51:17 - let xm = x0 + 1.
2018-10-02 13:51:17 - let h = 0.01
2018-10-02 13:51:17 - let points = [x0 .. h .. xm]
2018-10-02 13:51:17 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-10-02 13:51:17 - let finiteDifferencesTable = 
2018-10-02 13:51:17 -     let rec computeCells y acc = 
2018-10-02 13:51:17 -         let computeCol height (prevCol : float list) =
2018-10-02 13:51:17 -             let rec computeColInternal x acc =
2018-10-02 13:51:17 -                 match x with
2018-10-02 13:51:17 -                 | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-10-02 13:51:17 -                 | _ -> acc
2018-10-02 13:51:17 -             computeColInternal (points.Length - height) [] 
2018-10-02 13:51:17 -         match y with
2018-10-02 13:51:17 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-10-02 13:51:17 -         |_ -> List.rev acc
2018-10-02 13:51:17 -     computeCells (points.Length - 1) [points |> List.map f]
2018-10-02 13:51:17 - //first case
2018-10-02 13:51:17 - let polynom n x =
2018-10-02 13:51:17 -     let t = (x - x0) / h
2018-10-02 13:51:17 -     let Nk =
2018-10-02 13:51:17 -         let rec NkInternal prev i = seq{
2018-10-02 13:51:17 -             match i with
2018-10-02 13:51:17 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-10-02 13:51:17 -             | 0. -> yield t
2018-10-02 13:51:17 -                     yield! NkInternal t (i + 1.)
2018-10-02 13:51:17 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-10-02 13:51:17 -                     yield cur
2018-10-02 13:51:17 -                     yield! NkInternal cur (i + 1.)
2018-10-02 13:51:17 -         }
2018-10-02 13:51:17 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 13:51:17 -     let rec polynomInternal nki (finiteDifference : float list list) k acc =
2018-10-02 13:51:17 -         match nki, finiteDifference with
2018-10-02 13:51:17 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynomInternal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.head)) 
2018-10-02 13:51:17 -         | _ -> acc
2018-10-02 13:51:17 -     polynomInternal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-10-02 13:51:17 - let plotFirstCaseError () =
2018-10-02 13:51:17 -     let trace1 =
2018-10-02 13:51:17 -         let y = points |> List.map f
2018-10-02 13:51:17 -         Scatter(
2018-10-02 13:51:17 -             x = points,
2018-10-02 13:51:17 -             y = y,
2018-10-02 13:51:17 -             name = "Исходная функция"
2018-10-02 13:51:17 -         )
2018-10-02 13:51:17 -     let trace2 =
2018-10-02 13:51:17 -         let y = points |> List.map (polynom 1)
2018-10-02 13:51:17 -         Scatter(
2018-10-02 13:51:17 -             x = points,
2018-10-02 13:51:17 -             y = y,
2018-10-02 13:51:17 -             name = "Интерполяционный полином"
2018-10-02 13:51:17 -         )
2018-10-02 13:51:17 -     [trace1; trace2]
2018-10-02 13:51:17 -     |> Chart.Plot
2018-10-02 13:51:17 -     |> Chart.WithWidth 1000
2018-10-02 13:51:17 -     |> Chart.WithHeight 700
2018-10-02 13:51:17 - plotFirstCaseError()
2018-10-02 13:51:18 - //second case
2018-10-02 13:51:18 - let polynom2 n x =
2018-10-02 13:51:18 -     let t = (x - xm) / h
2018-10-02 13:51:18 -     let Nk =
2018-10-02 13:51:18 -         let rec NkInternal prev i = seq{
2018-10-02 13:51:18 -             match i with
2018-10-02 13:51:18 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-10-02 13:51:18 -             | 0. -> yield t
2018-10-02 13:51:18 -                     yield! NkInternal t (i + 1.)
2018-10-02 13:51:18 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-10-02 13:51:18 -                     yield cur
2018-10-02 13:51:18 -                     yield! NkInternal cur (i + 1.)
2018-10-02 13:51:18 -         }
2018-10-02 13:51:18 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 13:51:18 -     
2018-10-02 13:51:18 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-10-02 13:51:18 -         match nki, finiteDifference with
2018-10-02 13:51:18 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.last)) 
2018-10-02 13:51:18 -         | _ -> acc
2018-10-02 13:51:18 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-10-02 13:51:18 - let plotSecondCaseError () =
2018-10-02 13:51:18 -     let trace1 =
2018-10-02 13:51:18 -         let y = points |> List.map f
2018-10-02 13:51:18 -         Scatter(
2018-10-02 13:51:18 -             x = points,
2018-10-02 13:51:18 -             y = y,
2018-10-02 13:51:18 -             name = "Исходная функция"
2018-10-02 13:51:18 -         )
2018-10-02 13:51:18 -     let trace2 =
2018-10-02 13:51:18 -         let y = points |> List.map (polynom2 4)
2018-10-02 13:51:18 -         Scatter(
2018-10-02 13:51:18 -             x = points,
2018-10-02 13:51:18 -             y = y,
2018-10-02 13:51:18 -             name = "Интерполяционный полином"
2018-10-02 13:51:18 -         )
2018-10-02 13:51:18 -     [trace1; trace2]
2018-10-02 13:51:18 -     |> Chart.Plot
2018-10-02 13:51:18 -     |> Chart.WithWidth 1000
2018-10-02 13:51:18 -     |> Chart.WithHeight 700
2018-10-02 13:51:18 - plotSecondCaseError()
2018-10-02 13:51:18 - //third case
2018-10-02 13:51:18 - let polynom3 n x =
2018-10-02 13:51:18 -     let startX = points |> List.filter (fun i -> x > i - h / 2. && x <= i + h / 2.) |> List.exactlyOne
2018-10-02 13:51:18 -     let isRightSide = x <= startX + h / 2. && x > startX
2018-10-02 13:51:18 -     let middlePoint = points |> List.findIndex (fun i -> i = startX)
2018-10-02 13:51:18 -     let dependenceOfSide rightSide = 
2018-10-02 13:51:18 -         match rightSide with
2018-10-02 13:51:18 -         | false -> (n + 1) / 2
2018-10-02 13:51:18 -         | true -> n / 2
2018-10-02 13:51:18 -     let startIndex = middlePoint - (dependenceOfSide isRightSide)
2018-10-02 13:51:18 -     let endIndex = middlePoint + (dependenceOfSide <| not isRightSide)
2018-10-02 13:51:18 -     let t = (x - startX) / h
2018-10-02 13:51:18 -     let Nk =
2018-10-02 13:51:18 -         let rec NkInternal prev i =
2018-10-02 13:51:18 -             let deg = 
2018-10-02 13:51:18 -                 match isRightSide with
2018-10-02 13:51:18 -                 | false -> i
2018-10-02 13:51:18 -                 | true -> i + 1.
2018-10-02 13:51:18 -             seq{
2018-10-02 13:51:18 -                 match i with
2018-10-02 13:51:18 -                 | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 13:51:18 -                 | 0. -> yield t
2018-10-02 13:51:18 -                         yield! NkInternal t (i + 1.)
2018-10-02 13:51:18 -                 | _ ->  let cur = prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 13:51:18 -                         yield cur
2018-10-02 13:51:18 -                         yield! NkInternal cur (i + 1.)
2018-10-02 13:51:18 -             }
2018-10-02 13:51:18 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 13:51:18 -     
2018-10-02 13:51:18 -     let middle =
2018-10-02 13:51:18 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-10-02 13:51:18 -             match finiteDifference with
2018-10-02 13:51:18 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-10-02 13:51:18 -             | _ -> acc |> List.rev
2018-10-02 13:51:18 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-10-02 13:51:18 -     let rec polynom3Internal nki (finiteDifference : float list list) k acc =
2018-10-02 13:51:18 -         match nki, finiteDifference with
2018-10-02 13:51:18 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom3Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length / 2])
2018-10-02 13:51:18 -         | _ -> acc
2018-10-02 13:51:18 -     
2018-10-02 13:51:18 -     match startIndex, endIndex with
2018-10-02 13:51:18 -     | (s, e) when s >= 0 && e < points.Length -> polynom3Internal Nk middle.Tail 0 (f startX)
2018-10-02 13:51:18 -     | (s, e) when s >= 0 -> polynom2 n x
2018-10-02 13:51:18 -     | (s, e) when e < points.Length -> polynom n x
2018-10-02 13:51:18 -     | _ -> failwith "Incorrect arguments"
2018-10-02 13:51:19 - let plotThirdCaseError () =
2018-10-02 13:51:19 -     let trace1 =
2018-10-02 13:51:19 -         let y = points |> List.map f
2018-10-02 13:51:19 -         Scatter(
2018-10-02 13:51:19 -             x = points,
2018-10-02 13:51:19 -             y = y,
2018-10-02 13:51:19 -             name = "Исходная функция"
2018-10-02 13:51:19 -         )
2018-10-02 13:51:19 -     let trace2 =
2018-10-02 13:51:19 -         let y = points |> List.map (polynom3 1)
2018-10-02 13:51:19 -         Scatter(
2018-10-02 13:51:19 -             x = points,
2018-10-02 13:51:19 -             y = y,
2018-10-02 13:51:19 -             name = "Интерполяционный полином"
2018-10-02 13:51:19 -         )
2018-10-02 13:51:19 -     [trace1; trace2]
2018-10-02 13:51:19 -     |> Chart.Plot
2018-10-02 13:51:19 -     |> Chart.WithWidth 1000
2018-10-02 13:51:19 -     |> Chart.WithHeight 700
2018-10-02 13:51:19 - plotThirdCaseError()
2018-10-02 13:51:19 - let x = -1.454 //значение из отрезка [-2; -1]
2018-10-02 13:51:19 - let n = 7 //степень полинома
2018-10-02 13:51:19 - polynom n x - f x |> abs;;
2018-10-02 13:51:19 - polynom2 n x - f x |> abs;;
2018-10-02 13:51:19 - polynom3 n x - f x |> abs;;
2018-10-02 13:51:35 - let x = -1.454 //значение из отрезка [-2; -1]
2018-10-02 13:51:35 - let n = 3 //степень полинома
2018-10-02 13:51:38 - polynom3 n x - f x |> abs;;
2018-10-02 13:53:01 - //third case
2018-10-02 13:53:01 - let polynom3 n x =
2018-10-02 13:53:01 -     let startX = points |> List.filter (fun i -> x > i - h / 2. && x <= i + h / 2.) |> List.exactlyOne
2018-10-02 13:53:01 -     let isRightSide = x <= startX + h / 2. && x > startX
2018-10-02 13:53:01 -     let middlePoint = points |> List.findIndex (fun i -> i = startX)
2018-10-02 13:53:01 -     let dependenceOfSide rightSide = 
2018-10-02 13:53:01 -         match rightSide with
2018-10-02 13:53:01 -         | false -> (n + 1) / 2
2018-10-02 13:53:01 -         | true -> n / 2
2018-10-02 13:53:01 -     let startIndex = middlePoint - (dependenceOfSide isRightSide)
2018-10-02 13:53:01 -     let endIndex = middlePoint + (dependenceOfSide <| not isRightSide)
2018-10-02 13:53:01 -     let t = (x - startX) / h
2018-10-02 13:53:01 -     let Nk =
2018-10-02 13:53:01 -         let rec NkInternal prev i =
2018-10-02 13:53:01 -             let deg = 
2018-10-02 13:53:01 -                 match isRightSide with
2018-10-02 13:53:01 -                 | false -> i
2018-10-02 13:53:01 -                 | true -> i + 1.
2018-10-02 13:53:01 -             seq{
2018-10-02 13:53:01 -                 match i with
2018-10-02 13:53:01 -                 | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 13:53:01 -                 | 0. -> yield t
2018-10-02 13:53:01 -                         yield! NkInternal t (i + 1.)
2018-10-02 13:53:01 -                 | _ ->  let cur = prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 13:53:01 -                         yield cur
2018-10-02 13:53:01 -                         yield! NkInternal cur (i + 1.)
2018-10-02 13:53:01 -             }
2018-10-02 13:53:01 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 13:53:01 -     
2018-10-02 13:53:01 -     let middle =
2018-10-02 13:53:01 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-10-02 13:53:01 -             match finiteDifference with
2018-10-02 13:53:01 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-10-02 13:53:01 -             | _ -> acc |> List.rev
2018-10-02 13:53:01 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-10-02 13:53:01 -     let rec polynom3Internal nki (finiteDifference : float list list) k acc =
2018-10-02 13:53:01 -         match nki, finiteDifference with
2018-10-02 13:53:01 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom3Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[hFiniteDifference.Length / 2 - 1])
2018-10-02 13:53:01 -         | _ -> acc
2018-10-02 13:53:01 -     
2018-10-02 13:53:01 -     match startIndex, endIndex with
2018-10-02 13:53:01 -     | (s, e) when s >= 0 && e < points.Length -> polynom3Internal Nk middle.Tail 0 (f startX)
2018-10-02 13:53:01 -     | (s, e) when s >= 0 -> polynom2 n x
2018-10-02 13:53:01 -     | (s, e) when e < points.Length -> polynom n x
2018-10-02 13:53:01 -     | _ -> failwith "Incorrect arguments"
2018-10-02 13:53:11 - let x = -1.454 //значение из отрезка [-2; -1]
2018-10-02 13:53:11 - let n = 3 //степень полинома
2018-10-02 13:53:13 - polynom3 n x - f x |> abs;;
2018-10-02 13:53:13 - Expression evaluation failed: The input must be non-negative.
2018-10-02 13:53:13 - Parameter name: n
2018-10-02 13:53:13 - ArgumentExceptionThe input must be non-negative.
2018-10-02 13:53:13 - Parameter name: n
2018-10-02 13:53:13 -   at Microsoft.FSharp.Collections.PrivateListHelpers.nth[a] (Microsoft.FSharp.Collections.FSharpList`1[T] l, System.Int32 n) [0x00030] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-10-02 13:53:13 -   at Microsoft.FSharp.Collections.FSharpList`1[T].get_Item (System.Int32 index) [0x00000] in <5a7d678a904cf4daa74503838a677d5a>:0 
2018-10-02 13:53:13 -   at FSI_0227.polynom3Internal@38-5 (System.Int32 n, Microsoft.FSharp.Collections.FSharpList`1[T] nki, Microsoft.FSharp.Collections.FSharpList`1[T] finiteDifference, System.Int32 k, System.Double acc) [0x00098] in <1daf6fa646db4d719aa67449e5a88cb8>:0 
2018-10-02 13:53:13 -   at FSI_0227.polynom3 (System.Int32 n, System.Double x) [0x0018e] in <1daf6fa646db4d719aa67449e5a88cb8>:0 
2018-10-02 13:53:13 -   at <StartupCode$FSI_0229>.$FSI_0229.main@ () [0x00000] in <1daf6fa646db4d719aa67449e5a88cb8>:0 
2018-10-02 13:53:13 -   at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)
2018-10-02 13:53:13 -   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x0003b] in <2943701620b54f86b436d3ffad010412>:0 
2018-10-02 13:54:29 - //third case
2018-10-02 13:54:29 - let polynom3 n x =
2018-10-02 13:54:29 -     let startX = points |> List.filter (fun i -> x > i - h / 2. && x <= i + h / 2.) |> List.exactlyOne
2018-10-02 13:54:29 -     let isRightSide = x <= startX + h / 2. && x > startX
2018-10-02 13:54:29 -     let middlePoint = points |> List.findIndex (fun i -> i = startX)
2018-10-02 13:54:29 -     let dependenceOfSide rightSide = 
2018-10-02 13:54:29 -         match rightSide with
2018-10-02 13:54:29 -         | false -> (n + 1) / 2
2018-10-02 13:54:29 -         | true -> n / 2
2018-10-02 13:54:29 -     let startIndex = middlePoint - (dependenceOfSide isRightSide)
2018-10-02 13:54:29 -     let endIndex = middlePoint + (dependenceOfSide <| not isRightSide)
2018-10-02 13:54:29 -     let t = (x - startX) / h
2018-10-02 13:54:29 -     let Nk =
2018-10-02 13:54:29 -         let rec NkInternal prev i =
2018-10-02 13:54:29 -             let deg = 
2018-10-02 13:54:29 -                 match isRightSide with
2018-10-02 13:54:29 -                 | false -> i
2018-10-02 13:54:29 -                 | true -> i + 1.
2018-10-02 13:54:29 -             seq{
2018-10-02 13:54:29 -                 match i with
2018-10-02 13:54:29 -                 | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 13:54:29 -                 | 0. -> yield t
2018-10-02 13:54:29 -                         yield! NkInternal t (i + 1.)
2018-10-02 13:54:29 -                 | _ ->  let cur = prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 13:54:29 -                         yield cur
2018-10-02 13:54:29 -                         yield! NkInternal cur (i + 1.)
2018-10-02 13:54:29 -             }
2018-10-02 13:54:29 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 13:54:29 -     
2018-10-02 13:54:29 -     let middle =
2018-10-02 13:54:29 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-10-02 13:54:29 -             match finiteDifference with
2018-10-02 13:54:29 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-10-02 13:54:29 -             | _ -> acc |> List.rev
2018-10-02 13:54:29 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-10-02 13:54:29 -     let rec polynom3Internal nki (finiteDifference : float list list) k acc =
2018-10-02 13:54:29 -         match nki, finiteDifference with
2018-10-02 13:54:29 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom3Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[(hFiniteDifference.Length - 1) / 2])
2018-10-02 13:54:29 -         | _ -> acc
2018-10-02 13:54:29 -     
2018-10-02 13:54:29 -     match startIndex, endIndex with
2018-10-02 13:54:29 -     | (s, e) when s >= 0 && e < points.Length -> polynom3Internal Nk middle.Tail 0 (f startX)
2018-10-02 13:54:29 -     | (s, e) when s >= 0 -> polynom2 n x
2018-10-02 13:54:29 -     | (s, e) when e < points.Length -> polynom n x
2018-10-02 13:54:29 -     | _ -> failwith "Incorrect arguments"
2018-10-02 13:54:33 - polynom3 n x - f x |> abs;;
2018-10-02 13:54:39 - let x = -1.454 //значение из отрезка [-2; -1]
2018-10-02 13:54:39 - let n = 7 //степень полинома
2018-10-02 13:54:41 - polynom3 n x - f x |> abs;;
2018-10-02 13:54:53 - #load "XPlot.Plotly.Paket.fsx"
2018-10-02 13:54:53 - #load "XPlot.Plotly.fsx"
2018-10-02 13:54:53 - open XPlot.Plotly
2018-10-02 13:54:53 - open System
2018-10-02 13:54:57 - let N = 5.
2018-10-02 13:54:57 - let x0 = -(N % 3.)
2018-10-02 13:54:57 - let xm = x0 + 1.
2018-10-02 13:54:57 - let h = 0.01
2018-10-02 13:54:57 - let points = [x0 .. h .. xm]
2018-10-02 13:54:57 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-10-02 13:54:57 - let finiteDifferencesTable = 
2018-10-02 13:54:57 -     let rec computeCells y acc = 
2018-10-02 13:54:57 -         let computeCol height (prevCol : float list) =
2018-10-02 13:54:57 -             let rec computeColInternal x acc =
2018-10-02 13:54:57 -                 match x with
2018-10-02 13:54:57 -                 | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-10-02 13:54:57 -                 | _ -> acc
2018-10-02 13:54:57 -             computeColInternal (points.Length - height) [] 
2018-10-02 13:54:57 -         match y with
2018-10-02 13:54:57 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol (points.Length - y) acc.[0]) :: acc)
2018-10-02 13:54:57 -         |_ -> List.rev acc
2018-10-02 13:54:57 -     computeCells (points.Length - 1) [points |> List.map f]
2018-10-02 13:54:58 - //first case
2018-10-02 13:54:58 - let polynom n x =
2018-10-02 13:54:58 -     let t = (x - x0) / h
2018-10-02 13:54:58 -     let Nk =
2018-10-02 13:54:58 -         let rec NkInternal prev i = seq{
2018-10-02 13:54:58 -             match i with
2018-10-02 13:54:58 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-10-02 13:54:58 -             | 0. -> yield t
2018-10-02 13:54:58 -                     yield! NkInternal t (i + 1.)
2018-10-02 13:54:58 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-10-02 13:54:58 -                     yield cur
2018-10-02 13:54:58 -                     yield! NkInternal cur (i + 1.)
2018-10-02 13:54:58 -         }
2018-10-02 13:54:58 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 13:54:58 -     let rec polynomInternal nki (finiteDifference : float list list) k acc =
2018-10-02 13:54:58 -         match nki, finiteDifference with
2018-10-02 13:54:58 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynomInternal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.head)) 
2018-10-02 13:54:58 -         | _ -> acc
2018-10-02 13:54:58 -     polynomInternal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-10-02 13:54:58 - let plotFirstCaseError () =
2018-10-02 13:54:58 -     let trace1 =
2018-10-02 13:54:58 -         let y = points |> List.map f
2018-10-02 13:54:58 -         Scatter(
2018-10-02 13:54:58 -             x = points,
2018-10-02 13:54:58 -             y = y,
2018-10-02 13:54:58 -             name = "Исходная функция"
2018-10-02 13:54:58 -         )
2018-10-02 13:54:58 -     let trace2 =
2018-10-02 13:54:58 -         let y = points |> List.map (polynom 1)
2018-10-02 13:54:58 -         Scatter(
2018-10-02 13:54:58 -             x = points,
2018-10-02 13:54:58 -             y = y,
2018-10-02 13:54:58 -             name = "Интерполяционный полином"
2018-10-02 13:54:58 -         )
2018-10-02 13:54:58 -     [trace1; trace2]
2018-10-02 13:54:58 -     |> Chart.Plot
2018-10-02 13:54:58 -     |> Chart.WithWidth 1000
2018-10-02 13:54:58 -     |> Chart.WithHeight 700
2018-10-02 13:54:58 - plotFirstCaseError()
2018-10-02 13:54:59 - //second case
2018-10-02 13:54:59 - let polynom2 n x =
2018-10-02 13:54:59 -     let t = (x - xm) / h
2018-10-02 13:54:59 -     let Nk =
2018-10-02 13:54:59 -         let rec NkInternal prev i = seq{
2018-10-02 13:54:59 -             match i with
2018-10-02 13:54:59 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-10-02 13:54:59 -             | 0. -> yield t
2018-10-02 13:54:59 -                     yield! NkInternal t (i + 1.)
2018-10-02 13:54:59 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-10-02 13:54:59 -                     yield cur
2018-10-02 13:54:59 -                     yield! NkInternal cur (i + 1.)
2018-10-02 13:54:59 -         }
2018-10-02 13:54:59 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 13:54:59 -     
2018-10-02 13:54:59 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-10-02 13:54:59 -         match nki, finiteDifference with
2018-10-02 13:54:59 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.last)) 
2018-10-02 13:54:59 -         | _ -> acc
2018-10-02 13:54:59 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-10-02 13:54:59 - let plotSecondCaseError () =
2018-10-02 13:54:59 -     let trace1 =
2018-10-02 13:54:59 -         let y = points |> List.map f
2018-10-02 13:54:59 -         Scatter(
2018-10-02 13:54:59 -             x = points,
2018-10-02 13:54:59 -             y = y,
2018-10-02 13:54:59 -             name = "Исходная функция"
2018-10-02 13:54:59 -         )
2018-10-02 13:54:59 -     let trace2 =
2018-10-02 13:54:59 -         let y = points |> List.map (polynom2 4)
2018-10-02 13:54:59 -         Scatter(
2018-10-02 13:54:59 -             x = points,
2018-10-02 13:54:59 -             y = y,
2018-10-02 13:54:59 -             name = "Интерполяционный полином"
2018-10-02 13:54:59 -         )
2018-10-02 13:54:59 -     [trace1; trace2]
2018-10-02 13:54:59 -     |> Chart.Plot
2018-10-02 13:54:59 -     |> Chart.WithWidth 1000
2018-10-02 13:54:59 -     |> Chart.WithHeight 700
2018-10-02 13:54:59 - plotSecondCaseError()
2018-10-02 13:54:59 - //third case
2018-10-02 13:54:59 - let polynom3 n x =
2018-10-02 13:54:59 -     let startX = points |> List.filter (fun i -> x > i - h / 2. && x <= i + h / 2.) |> List.exactlyOne
2018-10-02 13:54:59 -     let isRightSide = x <= startX + h / 2. && x > startX
2018-10-02 13:54:59 -     let middlePoint = points |> List.findIndex (fun i -> i = startX)
2018-10-02 13:54:59 -     let dependenceOfSide rightSide = 
2018-10-02 13:54:59 -         match rightSide with
2018-10-02 13:54:59 -         | false -> (n + 1) / 2
2018-10-02 13:54:59 -         | true -> n / 2
2018-10-02 13:54:59 -     let startIndex = middlePoint - (dependenceOfSide isRightSide)
2018-10-02 13:54:59 -     let endIndex = middlePoint + (dependenceOfSide <| not isRightSide)
2018-10-02 13:54:59 -     let t = (x - startX) / h
2018-10-02 13:54:59 -     let Nk =
2018-10-02 13:54:59 -         let rec NkInternal prev i =
2018-10-02 13:54:59 -             let deg = 
2018-10-02 13:54:59 -                 match isRightSide with
2018-10-02 13:54:59 -                 | false -> i
2018-10-02 13:54:59 -                 | true -> i + 1.
2018-10-02 13:54:59 -             seq{
2018-10-02 13:54:59 -                 match i with
2018-10-02 13:54:59 -                 | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 13:54:59 -                 | 0. -> yield t
2018-10-02 13:54:59 -                         yield! NkInternal t (i + 1.)
2018-10-02 13:54:59 -                 | _ ->  let cur = prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-10-02 13:54:59 -                         yield cur
2018-10-02 13:54:59 -                         yield! NkInternal cur (i + 1.)
2018-10-02 13:54:59 -             }
2018-10-02 13:54:59 -         NkInternal 1. 0. |> Seq.toList
2018-10-02 13:54:59 -     
2018-10-02 13:54:59 -     let middle =
2018-10-02 13:54:59 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-10-02 13:54:59 -             match finiteDifference with
2018-10-02 13:54:59 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-10-02 13:54:59 -             | _ -> acc |> List.rev
2018-10-02 13:54:59 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-10-02 13:54:59 -     let rec polynom3Internal nki (finiteDifference : float list list) k acc =
2018-10-02 13:54:59 -         match nki, finiteDifference with
2018-10-02 13:54:59 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom3Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[(hFiniteDifference.Length - 1) / 2])
2018-10-02 13:54:59 -         | _ -> acc
2018-10-02 13:54:59 -     
2018-10-02 13:54:59 -     match startIndex, endIndex with
2018-10-02 13:54:59 -     | (s, e) when s >= 0 && e < points.Length -> polynom3Internal Nk middle.Tail 0 (f startX)
2018-10-02 13:54:59 -     | (s, e) when s >= 0 -> polynom2 n x
2018-10-02 13:54:59 -     | (s, e) when e < points.Length -> polynom n x
2018-10-02 13:54:59 -     | _ -> failwith "Incorrect arguments"
2018-10-02 13:55:00 - let plotThirdCaseError () =
2018-10-02 13:55:00 -     let trace1 =
2018-10-02 13:55:00 -         let y = points |> List.map f
2018-10-02 13:55:00 -         Scatter(
2018-10-02 13:55:00 -             x = points,
2018-10-02 13:55:00 -             y = y,
2018-10-02 13:55:00 -             name = "Исходная функция"
2018-10-02 13:55:00 -         )
2018-10-02 13:55:00 -     let trace2 =
2018-10-02 13:55:00 -         let y = points |> List.map (polynom3 1)
2018-10-02 13:55:00 -         Scatter(
2018-10-02 13:55:00 -             x = points,
2018-10-02 13:55:00 -             y = y,
2018-10-02 13:55:00 -             name = "Интерполяционный полином"
2018-10-02 13:55:00 -         )
2018-10-02 13:55:00 -     [trace1; trace2]
2018-10-02 13:55:00 -     |> Chart.Plot
2018-10-02 13:55:00 -     |> Chart.WithWidth 1000
2018-10-02 13:55:00 -     |> Chart.WithHeight 700
2018-10-02 13:55:00 - plotThirdCaseError()
2018-10-02 13:55:00 - let x = -1.454 //значение из отрезка [-2; -1]
2018-10-02 13:55:00 - let n = 7 //степень полинома
2018-10-02 13:55:00 - polynom n x - f x |> abs;;
2018-10-02 13:55:01 - polynom2 n x - f x |> abs;;
2018-10-02 13:55:01 - polynom3 n x - f x |> abs;;
2018-10-02 13:55:15 - let x = -1.454 //значение из отрезка [-2; -1]
2018-10-02 13:55:15 - let n = 3 //степень полинома
2018-10-02 13:55:25 - let x = -1.455 //значение из отрезка [-2; -1]
2018-10-02 13:55:25 - let n = 3 //степень полинома
2018-10-02 13:55:27 - polynom3 n x - f x |> abs;;
2018-10-02 13:55:33 - let x = -1.455 //значение из отрезка [-2; -1]
2018-10-02 13:55:33 - let n = 7 //степень полинома
2018-10-02 13:55:36 - polynom3 n x - f x |> abs;;
2018-10-02 13:55:46 - let x = -1.455 //значение из отрезка [-2; -1]
2018-10-02 13:55:46 - let n = 9 //степень полинома
2018-10-02 13:55:48 - polynom3 n x - f x |> abs;;
2018-10-02 13:58:07 - let x = -1.455 //значение из отрезка [-2; -1]
2018-10-02 13:58:07 - let n = 6 //степень полинома
2018-10-02 13:58:09 - polynom3 n x - f x |> abs;;
2018-10-02 13:58:19 - let x = -1.455 //значение из отрезка [-2; -1]
2018-10-02 13:58:19 - let n = 5 //степень полинома
2018-10-02 13:58:21 - polynom3 n x - f x |> abs;;
2018-10-06 08:28:16 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-10-06 08:28:16 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-10-06 08:28:16 - For help type #help;;
2018-10-06 08:28:16 - > val it :
2018-10-06 08:28:16 -   ResizeArray<System.Type *
2018-10-06 08:28:16 -               (obj ->
2018-10-06 08:28:16 -                  seq<string *
2018-10-06 08:28:16 -                      string> *
2018-10-06 08:28:16 -                  string)>
2018-10-06 08:28:16 - = seq []
2018-10-06 08:28:16 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-10-06 08:28:16 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-10-06 08:28:16 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-10-06 08:28:17 - Reporting 0 opened comms
2018-10-16 12:34:09 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-10-16 12:34:09 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-10-16 12:34:09 - For help type #help;;
2018-10-16 12:34:09 - > val it :
2018-10-16 12:34:09 -   ResizeArray<System.Type *
2018-10-16 12:34:09 -               (obj ->
2018-10-16 12:34:09 -                  seq<string *
2018-10-16 12:34:09 -                      string> *
2018-10-16 12:34:09 -                  string)>
2018-10-16 12:34:09 - = seq []
2018-10-16 12:34:09 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-10-16 12:34:09 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-10-16 12:34:09 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-10-16 12:34:10 - Reporting 0 opened comms
2018-10-22 17:33:47 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-10-22 17:33:47 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-10-22 17:33:47 - For help type #help;;
2018-10-22 17:33:47 - > val it :
2018-10-22 17:33:47 -   ResizeArray<System.Type *
2018-10-22 17:33:47 -               (obj ->
2018-10-22 17:33:47 -                  seq<string *
2018-10-22 17:33:47 -                      string> *
2018-10-22 17:33:47 -                  string)>
2018-10-22 17:33:47 - = seq []
2018-10-22 17:33:47 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-10-22 17:33:47 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-10-22 17:33:47 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-10-22 17:33:48 - Reporting 0 opened comms
2018-11-05 15:03:04 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-11-05 15:03:04 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-11-05 15:03:04 - For help type #help;;
2018-11-05 15:03:04 - > val it :
2018-11-05 15:03:04 -   ResizeArray<System.Type *
2018-11-05 15:03:04 -               (obj ->
2018-11-05 15:03:04 -                  seq<string *
2018-11-05 15:03:04 -                      string> *
2018-11-05 15:03:04 -                  string)>
2018-11-05 15:03:04 - = seq []
2018-11-05 15:03:04 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-11-05 15:03:04 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-11-05 15:03:04 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-11-05 15:03:06 - Reporting 0 opened comms
2018-11-26 09:02:27 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-11-26 09:02:27 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-11-26 09:02:27 - For help type #help;;
2018-11-26 09:02:27 - > val it :
2018-11-26 09:02:27 -   ResizeArray<System.Type *
2018-11-26 09:02:27 -               (obj ->
2018-11-26 09:02:27 -                  seq<string *
2018-11-26 09:02:27 -                      string> *
2018-11-26 09:02:27 -                  string)>
2018-11-26 09:02:27 - = seq []
2018-11-26 09:02:27 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-11-26 09:02:27 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-11-26 09:02:27 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-11-26 09:02:28 - Reporting 0 opened comms
2018-11-26 09:11:22 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-11-26 09:11:23 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-11-26 09:11:23 - For help type #help;;
2018-11-26 09:11:23 - > val it :
2018-11-26 09:11:23 -   ResizeArray<System.Type *
2018-11-26 09:11:23 -               (obj ->
2018-11-26 09:11:23 -                  seq<string *
2018-11-26 09:11:23 -                      string> *
2018-11-26 09:11:23 -                  string)>
2018-11-26 09:11:23 - = seq []
2018-11-26 09:11:23 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-11-26 09:11:23 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-11-26 09:11:23 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-11-26 09:11:23 - Reporting 0 opened comms
2018-11-26 09:25:08 - let finiteDifferencesTable = 
2018-11-26 09:25:08 -     let rec computeCells y acc = 
2018-11-26 09:25:08 -         let computeCol (prevCol : float list) =
2018-11-26 09:25:08 -             let rec computeColInternal x acc =
2018-11-26 09:25:08 -                 match x with
2018-11-26 09:25:08 -                 | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-11-26 09:25:08 -                 | _ -> acc
2018-11-26 09:25:08 -             computeColInternal y [] 
2018-11-26 09:25:08 -         match y with
2018-11-26 09:25:08 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol acc.[0]) :: acc)
2018-11-26 09:25:08 -         |_ -> List.rev acc
2018-11-26 09:25:08 -     computeCells (points.Length - 1) [points |> List.map f]
2018-11-26 09:25:11 - The value, namespace, type or module 'points' is not defined. Maybe you want one of the following:
2018-11-26 09:25:11 -    Printf
2018-11-26 09:25:11 -    printf
2018-11-26 09:25:11 - The value or constructor 'points' is not defined. Maybe you want one of the following:
2018-11-26 09:25:11 -    printf
2018-11-26 09:25:11 -    Printf
2018-11-26 09:25:11 - The value or constructor 'f' is not defined.
2018-11-26 09:25:15 - #load "XPlot.Plotly.Paket.fsx"
2018-11-26 09:25:15 - #load "XPlot.Plotly.fsx"
2018-11-26 09:25:15 - open XPlot.Plotly
2018-11-26 09:25:15 - open System
2018-11-26 09:25:57 - let N = 5.
2018-11-26 09:25:57 - let x0 = -(N % 3.)
2018-11-26 09:25:57 - let xm = x0 + 1.
2018-11-26 09:25:57 - let h = 0.01
2018-11-26 09:25:57 - let points = [x0 .. h .. xm]
2018-11-26 09:25:57 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-11-26 09:25:58 - let finiteDifferencesTable = 
2018-11-26 09:25:58 -     let rec computeCells y acc = 
2018-11-26 09:25:58 -         let computeCol (prevCol : float list) =
2018-11-26 09:25:58 -             let rec computeColInternal x acc =
2018-11-26 09:25:58 -                 match x with
2018-11-26 09:25:58 -                 | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-11-26 09:25:58 -                 | _ -> acc
2018-11-26 09:25:58 -             computeColInternal y [] 
2018-11-26 09:25:58 -         match y with
2018-11-26 09:25:58 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol acc.[0]) :: acc)
2018-11-26 09:25:58 -         |_ -> List.rev acc
2018-11-26 09:25:58 -     computeCells (points.Length - 1) [points |> List.map f]
2018-11-26 09:36:37 - //first case
2018-11-26 09:36:37 - let polynom n x =
2018-11-26 09:36:37 -     let t = (x - x0) / h
2018-11-26 09:36:37 -     let Nk =
2018-11-26 09:36:37 -         let rec NkInternal prev i = seq{
2018-11-26 09:36:37 -             match i with
2018-11-26 09:36:37 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-11-26 09:36:37 -             | 0. -> yield t
2018-11-26 09:36:37 -                     yield! NkInternal t (i + 1.)
2018-11-26 09:36:37 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-11-26 09:36:37 -                     yield cur
2018-11-26 09:36:37 -                     yield! NkInternal cur (i + 1.)
2018-11-26 09:36:37 -         }
2018-11-26 09:36:37 -         NkInternal 1. 0. |> Seq.toList
2018-11-26 09:36:37 -     let rec polynomInternal nki (finiteDifference : float list list) k acc =
2018-11-26 09:36:37 -         match nki, finiteDifference with
2018-11-26 09:36:37 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynomInternal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.head)) 
2018-11-26 09:36:37 -         | _ -> acc
2018-11-26 09:36:37 -     polynomInternal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-11-26 09:36:39 - let plotFirstCaseError () =
2018-11-26 09:36:39 -     let trace1 =
2018-11-26 09:36:39 -         let y = points |> List.map f
2018-11-26 09:36:39 -         Scatter(
2018-11-26 09:36:39 -             x = points,
2018-11-26 09:36:39 -             y = y,
2018-11-26 09:36:39 -             name = "Исходная функция"
2018-11-26 09:36:39 -         )
2018-11-26 09:36:39 -     let trace2 =
2018-11-26 09:36:39 -         let y = points |> List.map (polynom 1)
2018-11-26 09:36:39 -         Scatter(
2018-11-26 09:36:39 -             x = points,
2018-11-26 09:36:39 -             y = y,
2018-11-26 09:36:39 -             name = "Интерполяционный полином"
2018-11-26 09:36:39 -         )
2018-11-26 09:36:39 -     [trace1; trace2]
2018-11-26 09:36:39 -     |> Chart.Plot
2018-11-26 09:36:39 -     |> Chart.WithWidth 1000
2018-11-26 09:36:39 -     |> Chart.WithHeight 700
2018-11-26 09:36:39 - plotFirstCaseError()
2018-11-26 09:49:06 - Reporting 0 opened comms
2018-11-26 14:03:30 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-11-26 14:03:30 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-11-26 14:03:30 - For help type #help;;
2018-11-26 14:03:30 - > val it :
2018-11-26 14:03:30 -   ResizeArray<System.Type *
2018-11-26 14:03:30 -               (obj ->
2018-11-26 14:03:30 -                  seq<string *
2018-11-26 14:03:30 -                      string> *
2018-11-26 14:03:30 -                  string)>
2018-11-26 14:03:30 - = seq []
2018-11-26 14:03:30 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-11-26 14:03:30 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-11-26 14:03:30 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-11-26 14:03:30 - Reporting 0 opened comms
2018-11-26 14:05:25 - #load "XPlot.Plotly.Paket.fsx"
2018-11-26 14:05:25 - #load "XPlot.Plotly.fsx"
2018-11-26 14:05:25 - open XPlot.Plotly
2018-11-26 14:05:25 - open System
2018-11-26 14:06:00 - let N = 5.
2018-11-26 14:06:00 - let x0 = -(N % 3.)
2018-11-26 14:06:00 - let xm = x0 + 1.
2018-11-26 14:06:00 - let h = 0.01
2018-11-26 14:06:00 - let points = [x0 .. h .. xm]
2018-11-26 14:06:00 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-11-26 14:06:01 - let finiteDifferencesTable = 
2018-11-26 14:06:01 -     let rec computeCells y acc = 
2018-11-26 14:06:01 -         let computeCol (prevCol : float list) =
2018-11-26 14:06:01 -             let rec computeColInternal x acc =
2018-11-26 14:06:01 -                 match x with
2018-11-26 14:06:01 -                 | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-11-26 14:06:01 -                 | _ -> acc
2018-11-26 14:06:01 -             computeColInternal y [] 
2018-11-26 14:06:01 -         match y with
2018-11-26 14:06:01 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol acc.[0]) :: acc)
2018-11-26 14:06:01 -         |_ -> List.rev acc
2018-11-26 14:06:01 -     computeCells (points.Length - 1) [points |> List.map f]
2018-11-26 14:06:02 - //first case
2018-11-26 14:06:02 - let polynom n x =
2018-11-26 14:06:02 -     let t = (x - x0) / h
2018-11-26 14:06:02 -     let Nk =
2018-11-26 14:06:02 -         let rec NkInternal prev i = seq{
2018-11-26 14:06:02 -             match i with
2018-11-26 14:06:02 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-11-26 14:06:02 -             | 0. -> yield t
2018-11-26 14:06:02 -                     yield! NkInternal t (i + 1.)
2018-11-26 14:06:02 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-11-26 14:06:02 -                     yield cur
2018-11-26 14:06:02 -                     yield! NkInternal cur (i + 1.)
2018-11-26 14:06:02 -         }
2018-11-26 14:06:02 -         NkInternal 1. 0. |> Seq.toList
2018-11-26 14:06:02 -     let rec polynomInternal nki (finiteDifference : float list list) k acc =
2018-11-26 14:06:02 -         match nki, finiteDifference with
2018-11-26 14:06:02 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynomInternal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.head)) 
2018-11-26 14:06:02 -         | _ -> acc
2018-11-26 14:06:02 -     polynomInternal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-11-26 14:06:03 - let plotFirstCaseError () =
2018-11-26 14:06:03 -     let trace1 =
2018-11-26 14:06:03 -         let y = points |> List.map f
2018-11-26 14:06:03 -         Scatter(
2018-11-26 14:06:03 -             x = points,
2018-11-26 14:06:03 -             y = y,
2018-11-26 14:06:03 -             name = "Исходная функция"
2018-11-26 14:06:03 -         )
2018-11-26 14:06:03 -     let trace2 =
2018-11-26 14:06:03 -         let y = points |> List.map (polynom 1)
2018-11-26 14:06:03 -         Scatter(
2018-11-26 14:06:03 -             x = points,
2018-11-26 14:06:03 -             y = y,
2018-11-26 14:06:03 -             name = "Интерполяционный полином"
2018-11-26 14:06:03 -         )
2018-11-26 14:06:03 -     [trace1; trace2]
2018-11-26 14:06:03 -     |> Chart.Plot
2018-11-26 14:06:03 -     |> Chart.WithWidth 1000
2018-11-26 14:06:03 -     |> Chart.WithHeight 700
2018-11-26 14:06:03 - plotFirstCaseError()
2018-11-26 14:06:04 - //second case
2018-11-26 14:06:04 - let polynom2 n x =
2018-11-26 14:06:04 -     let t = (x - xm) / h
2018-11-26 14:06:04 -     let Nk =
2018-11-26 14:06:04 -         let rec NkInternal prev i = seq{
2018-11-26 14:06:04 -             match i with
2018-11-26 14:06:04 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-11-26 14:06:04 -             | 0. -> yield t
2018-11-26 14:06:04 -                     yield! NkInternal t (i + 1.)
2018-11-26 14:06:04 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-11-26 14:06:04 -                     yield cur
2018-11-26 14:06:04 -                     yield! NkInternal cur (i + 1.)
2018-11-26 14:06:04 -         }
2018-11-26 14:06:04 -         NkInternal 1. 0. |> Seq.toList
2018-11-26 14:06:04 -     
2018-11-26 14:06:04 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-11-26 14:06:04 -         match nki, finiteDifference with
2018-11-26 14:06:04 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.last)) 
2018-11-26 14:06:04 -         | _ -> acc
2018-11-26 14:06:04 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-11-26 14:06:05 - let plotSecondCaseError () =
2018-11-26 14:06:05 -     let trace1 =
2018-11-26 14:06:05 -         let y = points |> List.map f
2018-11-26 14:06:05 -         Scatter(
2018-11-26 14:06:05 -             x = points,
2018-11-26 14:06:05 -             y = y,
2018-11-26 14:06:05 -             name = "Исходная функция"
2018-11-26 14:06:05 -         )
2018-11-26 14:06:05 -     let trace2 =
2018-11-26 14:06:05 -         let y = points |> List.map (polynom2 4)
2018-11-26 14:06:05 -         Scatter(
2018-11-26 14:06:05 -             x = points,
2018-11-26 14:06:05 -             y = y,
2018-11-26 14:06:05 -             name = "Интерполяционный полином"
2018-11-26 14:06:05 -         )
2018-11-26 14:06:05 -     [trace1; trace2]
2018-11-26 14:06:05 -     |> Chart.Plot
2018-11-26 14:06:05 -     |> Chart.WithWidth 1000
2018-11-26 14:06:05 -     |> Chart.WithHeight 700
2018-11-26 14:06:05 - plotSecondCaseError()
2018-11-26 14:06:05 - //third case
2018-11-26 14:06:05 - let polynom3 n x =
2018-11-26 14:06:05 -     let startX = points |> List.filter (fun i -> x > i - h / 2. && x <= i + h / 2.) |> List.exactlyOne
2018-11-26 14:06:05 -     let isRightSide = x <= startX + h / 2. && x > startX
2018-11-26 14:06:05 -     let middlePoint = points |> List.findIndex (fun i -> i = startX)
2018-11-26 14:06:05 -     let dependenceOfSide rightSide = 
2018-11-26 14:06:05 -         match rightSide with
2018-11-26 14:06:05 -         | false -> (n + 1) / 2
2018-11-26 14:06:05 -         | true -> n / 2
2018-11-26 14:06:05 -     let startIndex = middlePoint - (dependenceOfSide isRightSide)
2018-11-26 14:06:05 -     let endIndex = middlePoint + (dependenceOfSide <| not isRightSide)
2018-11-26 14:06:05 -     let t = (x - startX) / h
2018-11-26 14:06:05 -     let Nk =
2018-11-26 14:06:05 -         let rec NkInternal prev i =
2018-11-26 14:06:05 -             let deg = 
2018-11-26 14:06:05 -                 match isRightSide with
2018-11-26 14:06:05 -                 | false -> i
2018-11-26 14:06:05 -                 | true -> i + 1.
2018-11-26 14:06:05 -             seq{
2018-11-26 14:06:05 -                 match i with
2018-11-26 14:06:05 -                 | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-11-26 14:06:05 -                 | 0. -> yield t
2018-11-26 14:06:05 -                         yield! NkInternal t (i + 1.)
2018-11-26 14:06:05 -                 | _ ->  let cur = prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-11-26 14:06:05 -                         yield cur
2018-11-26 14:06:05 -                         yield! NkInternal cur (i + 1.)
2018-11-26 14:06:05 -             }
2018-11-26 14:06:05 -         NkInternal 1. 0. |> Seq.toList
2018-11-26 14:06:05 -     
2018-11-26 14:06:05 -     let middle =
2018-11-26 14:06:05 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-11-26 14:06:05 -             match finiteDifference with
2018-11-26 14:06:05 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-11-26 14:06:05 -             | _ -> acc |> List.rev
2018-11-26 14:06:05 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-11-26 14:06:05 -     let rec polynom3Internal nki (finiteDifference : float list list) k acc =
2018-11-26 14:06:05 -         match nki, finiteDifference with
2018-11-26 14:06:05 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom3Internal tNki tFiniteDifference (k + 1) (acc + hNki * hFiniteDifference.[(hFiniteDifference.Length - 1) / 2])
2018-11-26 14:06:05 -         | _ -> acc
2018-11-26 14:06:05 -     
2018-11-26 14:06:05 -     match startIndex, endIndex with
2018-11-26 14:06:05 -     | (s, e) when s >= 0 && e < points.Length -> polynom3Internal Nk middle.Tail 0 (f startX)
2018-11-26 14:06:05 -     | (s, e) when s >= 0 -> polynom2 n x
2018-11-26 14:06:05 -     | (s, e) when e < points.Length -> polynom n x
2018-11-26 14:06:05 -     | _ -> failwith "Incorrect arguments"
2018-11-26 14:06:06 - let plotThirdCaseError () =
2018-11-26 14:06:06 -     let trace1 =
2018-11-26 14:06:06 -         let y = points |> List.map f
2018-11-26 14:06:06 -         Scatter(
2018-11-26 14:06:06 -             x = points,
2018-11-26 14:06:06 -             y = y,
2018-11-26 14:06:06 -             name = "Исходная функция"
2018-11-26 14:06:06 -         )
2018-11-26 14:06:06 -     let trace2 =
2018-11-26 14:06:06 -         let y = points |> List.map (polynom3 1)
2018-11-26 14:06:06 -         Scatter(
2018-11-26 14:06:06 -             x = points,
2018-11-26 14:06:06 -             y = y,
2018-11-26 14:06:06 -             name = "Интерполяционный полином"
2018-11-26 14:06:06 -         )
2018-11-26 14:06:06 -     [trace1; trace2]
2018-11-26 14:06:06 -     |> Chart.Plot
2018-11-26 14:06:06 -     |> Chart.WithWidth 1000
2018-11-26 14:06:06 -     |> Chart.WithHeight 700
2018-11-26 14:06:06 - plotThirdCaseError()
2018-11-26 14:06:06 - let x = -1.455 //значение из отрезка [-2; -1]
2018-11-26 14:06:06 - let n = 5 //степень полинома
2018-11-26 14:06:06 - polynom n x - f x |> abs;;
2018-11-26 14:06:07 - polynom2 n x - f x |> abs;;
2018-11-26 14:06:07 - polynom3 n x - f x |> abs;;
2018-11-26 14:06:30 - let x = -1.455 //значение из отрезка [-2; -1]
2018-11-26 14:06:30 - let n = 4 //степень полинома
2018-11-26 14:06:30 - polynom n x - f x |> abs;;
2018-11-26 14:06:30 - polynom2 n x - f x |> abs;;
2018-11-26 14:06:31 - polynom3 n x - f x |> abs;;
2018-11-26 14:06:35 - let x = -1.455 //значение из отрезка [-2; -1]
2018-11-26 14:06:35 - let n = 3 //степень полинома
2018-11-26 14:06:35 - polynom n x - f x |> abs;;
2018-11-26 14:06:36 - polynom2 n x - f x |> abs;;
2018-11-26 14:06:36 - polynom3 n x - f x |> abs;;
2018-11-26 14:06:40 - let x = -1.455 //значение из отрезка [-2; -1]
2018-11-26 14:06:40 - let n = 5 //степень полинома
2018-11-26 14:06:40 - polynom n x - f x |> abs;;
2018-11-26 14:06:40 - polynom2 n x - f x |> abs;;
2018-11-26 14:06:41 - polynom3 n x - f x |> abs;;
2018-11-26 16:46:52 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-11-26 16:46:52 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-11-26 16:46:52 - For help type #help;;
2018-11-26 16:46:52 - > val it :
2018-11-26 16:46:52 -   ResizeArray<System.Type *
2018-11-26 16:46:52 -               (obj ->
2018-11-26 16:46:52 -                  seq<string *
2018-11-26 16:46:52 -                      string> *
2018-11-26 16:46:52 -                  string)>
2018-11-26 16:46:52 - = seq []
2018-11-26 16:46:52 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-11-26 16:46:52 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-11-26 16:46:52 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-11-26 16:46:53 - Reporting 0 opened comms
2018-11-26 18:11:04 - //third case
2018-11-26 18:11:04 - let polynom3 n x =
2018-11-26 18:11:04 -     let startX = points |> List.filter (fun i -> x > i - h / 2. && x <= i + h / 2.) |> List.exactlyOne
2018-11-26 18:11:04 -     let isRightSide = x <= startX + h / 2. && x > startX
2018-11-26 18:11:04 -     let middlePoint = points |> List.findIndex (fun i -> i = startX)
2018-11-26 18:11:04 -     let dependenceOfSide rightSide = 
2018-11-26 18:11:04 -         match rightSide with
2018-11-26 18:11:04 -         | false -> (n + 1) / 2
2018-11-26 18:11:04 -         | true -> n / 2
2018-11-26 18:11:04 -     let startIndex = middlePoint - (dependenceOfSide isRightSide)
2018-11-26 18:11:04 -     let endIndex = middlePoint + (dependenceOfSide <| not isRightSide)
2018-11-26 18:11:04 -     let t = (x - startX) / h
2018-11-26 18:11:04 -     let Nk =
2018-11-26 18:11:04 -         let rec NkInternal prev i =
2018-11-26 18:11:04 -             let deg = 
2018-11-26 18:11:04 -                 match n % 2 = 0 with
2018-11-26 18:11:04 -                 | true -> i + 1.
2018-11-26 18:11:04 -                 | false -> i
2018-11-26 18:11:04 -             seq{
2018-11-26 18:11:04 -                 match i with
2018-11-26 18:11:04 -                 | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-11-26 18:11:04 -                 | 0. -> yield t
2018-11-26 18:11:04 -                         yield! NkInternal t (i + 1.)
2018-11-26 18:11:04 -                 | _ ->  let cur = prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-11-26 18:11:04 -                         yield cur
2018-11-26 18:11:04 -                         yield! NkInternal cur (i + 1.)
2018-11-26 18:11:04 -             }
2018-11-26 18:11:04 -         NkInternal 1. 0. |> Seq.toList
2018-11-26 18:11:04 -     
2018-11-26 18:11:04 -     let middle =
2018-11-26 18:11:04 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-11-26 18:11:04 -             match finiteDifference with
2018-11-26 18:11:04 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-11-26 18:11:04 -             | _ -> acc |> List.rev
2018-11-26 18:11:04 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-11-26 18:11:04 -     let rec polynom3Internal nki (finiteDifference : float list list) acc =
2018-11-26 18:11:04 -         match nki, finiteDifference with
2018-11-26 18:11:04 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) -> polynom3Internal tNki tFiniteDifference (acc + hNki * hFiniteDifference.[(hFiniteDifference.Length - 1) / 2])
2018-11-26 18:11:04 -         | _ -> acc
2018-11-26 18:11:04 -     
2018-11-26 18:11:04 -     match startIndex, endIndex with
2018-11-26 18:11:04 -     | (s, e) when s >= 0 && e < points.Length -> polynom3Internal Nk middle.Tail (f startX)
2018-11-26 18:11:04 -     | (s, e) when s >= 0 -> polynom2 n x
2018-11-26 18:11:04 -     | (s, e) when e < points.Length -> polynom n x
2018-11-26 18:11:04 -     | _ -> failwith "Incorrect arguments"
2018-11-26 18:11:06 - The value or constructor 'points' is not defined. Maybe you want one of the following:
2018-11-26 18:11:06 -    printf
2018-11-26 18:11:06 -    Printf
2018-11-26 18:11:06 - The value or constructor 'h' is not defined. Maybe you want one of the following:
2018-11-26 18:11:06 -    i
2018-11-26 18:11:06 -    n
2018-11-26 18:11:06 -    x
2018-11-26 18:11:06 - The value or constructor 'h' is not defined. Maybe you want one of the following:
2018-11-26 18:11:06 -    i
2018-11-26 18:11:06 -    n
2018-11-26 18:11:06 -    x
2018-11-26 18:11:06 - The value or constructor 'h' is not defined. Maybe you want one of the following:
2018-11-26 18:11:06 -    n
2018-11-26 18:11:06 -    x
2018-11-26 18:11:06 - The value or constructor 'points' is not defined. Maybe you want one of the following:
2018-11-26 18:11:06 -    printf
2018-11-26 18:11:06 -    Printf
2018-11-26 18:11:06 - The value or constructor 'h' is not defined. Maybe you want one of the following:
2018-11-26 18:11:06 -    n
2018-11-26 18:11:06 -    x
2018-11-26 18:11:06 - The value, constructor, namespace or type 'Truncate' is not defined.
2018-11-26 18:11:06 - The value, constructor, namespace or type 'Truncate' is not defined.
2018-11-26 18:11:06 - The value or constructor 'finiteDifferencesTable' is not defined.
2018-11-26 18:11:06 - The value, namespace, type or module 'points' is not defined. Maybe you want one of the following:
2018-11-26 18:11:06 -    Printf
2018-11-26 18:11:06 -    printf
2018-11-26 18:11:06 - The value or constructor 'f' is not defined. Maybe you want one of the following:
2018-11-26 18:11:06 -    e
2018-11-26 18:11:06 -    n
2018-11-26 18:11:06 -    s
2018-11-26 18:11:06 -    t
2018-11-26 18:11:06 -    x
2018-11-26 18:11:06 - The value or constructor 'polynom2' is not defined. Maybe you want one of the following:
2018-11-26 18:11:06 -    polynom3Internal
2018-11-26 18:11:06 - The value, namespace, type or module 'points' is not defined. Maybe you want one of the following:
2018-11-26 18:11:06 -    Printf
2018-11-26 18:11:06 -    printf
2018-11-26 18:11:06 - The value or constructor 'polynom' is not defined. Maybe you want one of the following:
2018-11-26 18:11:06 -    polynom3Internal
2018-11-26 18:11:12 - #load "XPlot.Plotly.Paket.fsx"
2018-11-26 18:11:12 - #load "XPlot.Plotly.fsx"
2018-11-26 18:11:12 - open XPlot.Plotly
2018-11-26 18:11:12 - open System
2018-11-26 18:11:30 - let N = 5.
2018-11-26 18:11:30 - let x0 = -(N % 3.)
2018-11-26 18:11:30 - let xm = x0 + 1.
2018-11-26 18:11:30 - let h = 0.01
2018-11-26 18:11:30 - let points = [x0 .. h .. xm]
2018-11-26 18:11:30 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-11-26 18:11:30 - let finiteDifferencesTable = 
2018-11-26 18:11:30 -     let rec computeCells y acc = 
2018-11-26 18:11:30 -         let computeCol (prevCol : float list) =
2018-11-26 18:11:30 -             let rec computeColInternal x acc =
2018-11-26 18:11:30 -                 match x with
2018-11-26 18:11:30 -                 | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-11-26 18:11:30 -                 | _ -> acc
2018-11-26 18:11:30 -             computeColInternal y [] 
2018-11-26 18:11:30 -         match y with
2018-11-26 18:11:30 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol acc.[0]) :: acc)
2018-11-26 18:11:30 -         |_ -> List.rev acc
2018-11-26 18:11:30 -     computeCells (points.Length - 1) [points |> List.map f]
2018-11-26 18:11:31 - //first case
2018-11-26 18:11:31 - let polynom n x =
2018-11-26 18:11:31 -     let t = (x - x0) / h
2018-11-26 18:11:31 -     let Nk =
2018-11-26 18:11:31 -         let rec NkInternal prev i = seq{
2018-11-26 18:11:31 -             match i with/home/max/Загрузки/Interpolation2.fs
2018-11-26 18:11:31 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-11-26 18:11:31 -             | 0. -> yield t
2018-11-26 18:11:31 -                     yield! NkInternal t (i + 1.)
2018-11-26 18:11:31 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-11-26 18:11:31 -                     yield cur
2018-11-26 18:11:31 -                     yield! NkInternal cur (i + 1.)
2018-11-26 18:11:31 -         }
2018-11-26 18:11:31 -         NkInternal 1. 0. |> Seq.toList
2018-11-26 18:11:31 -     let rec polynomInternal nki (finiteDifference : float list list) k acc =
2018-11-26 18:11:31 -         match nki, finiteDifference with
2018-11-26 18:11:31 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynomInternal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.head)) 
2018-11-26 18:11:31 -         | _ -> acc
2018-11-26 18:11:31 -     polynomInternal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-11-26 18:11:31 - Unexpected infix operator in expression
2018-11-26 18:11:31 - Incomplete pattern matches on this expression.
2018-11-26 18:11:31 - let plotFirstCaseError () =
2018-11-26 18:11:31 -     let trace1 =
2018-11-26 18:11:31 -         let y = points |> List.map f
2018-11-26 18:11:31 -         Scatter(
2018-11-26 18:11:31 -             x = points,
2018-11-26 18:11:31 -             y = y,
2018-11-26 18:11:31 -             name = "Исходная функция"
2018-11-26 18:11:31 -         )
2018-11-26 18:11:31 -     let trace2 =
2018-11-26 18:11:31 -         let y = points |> List.map (polynom 1)
2018-11-26 18:11:31 -         Scatter(
2018-11-26 18:11:31 -             x = points,
2018-11-26 18:11:31 -             y = y,
2018-11-26 18:11:31 -             name = "Интерполяционный полином"
2018-11-26 18:11:31 -         )
2018-11-26 18:11:31 -     [trace1; trace2]
2018-11-26 18:11:31 -     |> Chart.Plot
2018-11-26 18:11:31 -     |> Chart.WithWidth 1000
2018-11-26 18:11:31 -     |> Chart.WithHeight 700
2018-11-26 18:11:31 - plotFirstCaseError()
2018-11-26 18:11:32 - The value or constructor 'polynom' is not defined.
2018-11-26 18:11:32 - //second case
2018-11-26 18:11:32 - let polynom2 n x =
2018-11-26 18:11:32 -     let t = (x - xm) / h
2018-11-26 18:11:32 -     let Nk =
2018-11-26 18:11:32 -         let rec NkInternal prev i = seq{
2018-11-26 18:11:32 -             match i with
2018-11-26 18:11:32 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-11-26 18:11:32 -             | 0. -> yield t
2018-11-26 18:11:32 -                     yield! NkInternal t (i + 1.)
2018-11-26 18:11:32 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-11-26 18:11:32 -                     yield cur
2018-11-26 18:11:32 -                     yield! NkInternal cur (i + 1.)
2018-11-26 18:11:32 -         }
2018-11-26 18:11:32 -         NkInternal 1. 0. |> Seq.toList
2018-11-26 18:11:32 -     
2018-11-26 18:11:32 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-11-26 18:11:32 -         match nki, finiteDifference with
2018-11-26 18:11:32 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.last)) 
2018-11-26 18:11:32 -         | _ -> acc
2018-11-26 18:11:32 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-11-26 18:11:32 - let plotSecondCaseError () =
2018-11-26 18:11:32 -     let trace1 =
2018-11-26 18:11:32 -         let y = points |> List.map f
2018-11-26 18:11:32 -         Scatter(
2018-11-26 18:11:32 -             x = points,
2018-11-26 18:11:32 -             y = y,
2018-11-26 18:11:32 -             name = "Исходная функция"
2018-11-26 18:11:32 -         )
2018-11-26 18:11:32 -     let trace2 =
2018-11-26 18:11:32 -         let y = points |> List.map (polynom2 4)
2018-11-26 18:11:32 -         Scatter(
2018-11-26 18:11:32 -             x = points,
2018-11-26 18:11:32 -             y = y,
2018-11-26 18:11:32 -             name = "Интерполяционный полином"
2018-11-26 18:11:32 -         )
2018-11-26 18:11:32 -     [trace1; trace2]
2018-11-26 18:11:32 -     |> Chart.Plot
2018-11-26 18:11:32 -     |> Chart.WithWidth 1000
2018-11-26 18:11:32 -     |> Chart.WithHeight 700
2018-11-26 18:11:32 - plotSecondCaseError()
2018-11-26 18:11:33 - //third case
2018-11-26 18:11:33 - let polynom3 n x =
2018-11-26 18:11:33 -     let startX = points |> List.filter (fun i -> x > i - h / 2. && x <= i + h / 2.) |> List.exactlyOne
2018-11-26 18:11:33 -     let isRightSide = x <= startX + h / 2. && x > startX
2018-11-26 18:11:33 -     let middlePoint = points |> List.findIndex (fun i -> i = startX)
2018-11-26 18:11:33 -     let dependenceOfSide rightSide = 
2018-11-26 18:11:33 -         match rightSide with
2018-11-26 18:11:33 -         | false -> (n + 1) / 2
2018-11-26 18:11:33 -         | true -> n / 2
2018-11-26 18:11:33 -     let startIndex = middlePoint - (dependenceOfSide isRightSide)
2018-11-26 18:11:33 -     let endIndex = middlePoint + (dependenceOfSide <| not isRightSide)
2018-11-26 18:11:33 -     let t = (x - startX) / h
2018-11-26 18:11:33 -     let Nk =
2018-11-26 18:11:33 -         let rec NkInternal prev i =
2018-11-26 18:11:33 -             let deg = 
2018-11-26 18:11:33 -                 match n % 2 = 0 with
2018-11-26 18:11:33 -                 | true -> i + 1.
2018-11-26 18:11:33 -                 | false -> i
2018-11-26 18:11:33 -             seq{
2018-11-26 18:11:33 -                 match i with
2018-11-26 18:11:33 -                 | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-11-26 18:11:33 -                 | 0. -> yield t
2018-11-26 18:11:33 -                         yield! NkInternal t (i + 1.)
2018-11-26 18:11:33 -                 | _ ->  let cur = prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-11-26 18:11:33 -                         yield cur
2018-11-26 18:11:33 -                         yield! NkInternal cur (i + 1.)
2018-11-26 18:11:33 -             }
2018-11-26 18:11:33 -         NkInternal 1. 0. |> Seq.toList
2018-11-26 18:11:33 -     
2018-11-26 18:11:33 -     let middle =
2018-11-26 18:11:33 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-11-26 18:11:33 -             match finiteDifference with
2018-11-26 18:11:33 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-11-26 18:11:33 -             | _ -> acc |> List.rev
2018-11-26 18:11:33 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-11-26 18:11:33 -     let rec polynom3Internal nki (finiteDifference : float list list) acc =
2018-11-26 18:11:33 -         match nki, finiteDifference with
2018-11-26 18:11:33 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) -> polynom3Internal tNki tFiniteDifference (acc + hNki * hFiniteDifference.[(hFiniteDifference.Length - 1) / 2])
2018-11-26 18:11:33 -         | _ -> acc
2018-11-26 18:11:33 -     
2018-11-26 18:11:33 -     match startIndex, endIndex with
2018-11-26 18:11:33 -     | (s, e) when s >= 0 && e < points.Length -> polynom3Internal Nk middle.Tail (f startX)
2018-11-26 18:11:33 -     | (s, e) when s >= 0 -> polynom2 n x
2018-11-26 18:11:33 -     | (s, e) when e < points.Length -> polynom n x
2018-11-26 18:11:33 -     | _ -> failwith "Incorrect arguments"
2018-11-26 18:11:33 - The value or constructor 'polynom' is not defined. Maybe you want one of the following:
2018-11-26 18:11:33 -    polynom2
2018-11-26 18:11:33 -    polynom3Internal
2018-11-26 18:11:34 - let plotThirdCaseError () =
2018-11-26 18:11:34 -     let trace1 =
2018-11-26 18:11:34 -         let y = points |> List.map f
2018-11-26 18:11:34 -         Scatter(
2018-11-26 18:11:34 -             x = points,
2018-11-26 18:11:34 -             y = y,
2018-11-26 18:11:34 -             name = "Исходная функция"
2018-11-26 18:11:34 -         )
2018-11-26 18:11:34 -     let trace2 =
2018-11-26 18:11:34 -         let y = points |> List.map (polynom3 1)
2018-11-26 18:11:34 -         Scatter(
2018-11-26 18:11:34 -             x = points,
2018-11-26 18:11:34 -             y = y,
2018-11-26 18:11:34 -             name = "Интерполяционный полином"
2018-11-26 18:11:34 -         )
2018-11-26 18:11:34 -     [trace1; trace2]
2018-11-26 18:11:34 -     |> Chart.Plot
2018-11-26 18:11:34 -     |> Chart.WithWidth 1000
2018-11-26 18:11:34 -     |> Chart.WithHeight 700
2018-11-26 18:11:34 - plotThirdCaseError()
2018-11-26 18:11:34 - The value or constructor 'polynom3' is not defined. Maybe you want one of the following:
2018-11-26 18:11:34 -    polynom2
2018-11-26 18:11:34 - let x = -1.455 //значение из отрезка [-2; -1]
2018-11-26 18:11:34 - let n = 5 //степень полинома
2018-11-26 18:11:34 - polynom n x - f x |> abs;;
2018-11-26 18:11:35 - The value or constructor 'polynom' is not defined. Maybe you want one of the following:
2018-11-26 18:11:35 -    polynom2
2018-11-26 18:11:35 - polynom2 n x - f x |> abs;;
2018-11-26 18:11:35 - polynom3 n x - f x |> abs;;
2018-11-26 18:11:35 - The value or constructor 'polynom3' is not defined. Maybe you want one of the following:
2018-11-26 18:11:35 -    polynom2
2018-11-26 18:12:51 - #load "XPlot.Plotly.Paket.fsx"
2018-11-26 18:12:51 - #load "XPlot.Plotly.fsx"
2018-11-26 18:12:51 - open XPlot.Plotly
2018-11-26 18:12:51 - open System
2018-11-26 18:34:18 - let N = 5.
2018-11-26 18:34:18 - let x0 = -(N % 3.)
2018-11-26 18:34:18 - let xm = x0 + 1.
2018-11-26 18:34:18 - let h = 0.01
2018-11-26 18:34:18 - let points = [x0 .. h .. xm]
2018-11-26 18:34:18 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-11-26 18:34:19 - let finiteDifferencesTable = 
2018-11-26 18:34:19 -     let rec computeCells y acc = 
2018-11-26 18:34:19 -         let computeCol (prevCol : float list) =
2018-11-26 18:34:19 -             let rec computeColInternal x acc =
2018-11-26 18:34:19 -                 match x with
2018-11-26 18:34:19 -                 | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-11-26 18:34:19 -                 | _ -> acc
2018-11-26 18:34:19 -             computeColInternal y [] 
2018-11-26 18:34:19 -         match y with
2018-11-26 18:34:19 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol acc.[0]) :: acc)
2018-11-26 18:34:19 -         |_ -> List.rev acc
2018-11-26 18:34:19 -     computeCells (points.Length - 1) [points |> List.map f]
2018-11-26 18:34:21 - //first case
2018-11-26 18:34:21 - let polynom n x =
2018-11-26 18:34:21 -     let t = (x - x0) / h
2018-11-26 18:34:21 -     let Nk =
2018-11-26 18:34:21 -         let rec NkInternal prev i = seq{
2018-11-26 18:34:21 -             match i with/home/max/Загрузки/Interpolation2.fs
2018-11-26 18:34:21 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-11-26 18:34:21 -             | 0. -> yield t
2018-11-26 18:34:21 -                     yield! NkInternal t (i + 1.)
2018-11-26 18:34:21 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-11-26 18:34:21 -                     yield cur
2018-11-26 18:34:21 -                     yield! NkInternal cur (i + 1.)
2018-11-26 18:34:21 -         }
2018-11-26 18:34:21 -         NkInternal 1. 0. |> Seq.toList
2018-11-26 18:34:21 -     let rec polynomInternal nki (finiteDifference : float list list) k acc =
2018-11-26 18:34:21 -         match nki, finiteDifference with
2018-11-26 18:34:21 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynomInternal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.head)) 
2018-11-26 18:34:21 -         | _ -> acc
2018-11-26 18:34:21 -     polynomInternal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-11-26 18:34:21 - Unexpected infix operator in expression
2018-11-26 18:34:21 - Incomplete pattern matches on this expression.
2018-11-26 18:34:43 - let plotFirstCaseError () =
2018-11-26 18:34:43 -     let trace1 =
2018-11-26 18:34:43 -         let y = points |> List.map f
2018-11-26 18:34:43 -         Scatter(
2018-11-26 18:34:43 -             x = points,
2018-11-26 18:34:43 -             y = y,
2018-11-26 18:34:43 -             name = "Исходная функция"
2018-11-26 18:34:43 -         )
2018-11-26 18:34:43 -     let trace2 =
2018-11-26 18:34:43 -         let y = points |> List.map (polynom 1)
2018-11-26 18:34:43 -         Scatter(
2018-11-26 18:34:43 -             x = points,
2018-11-26 18:34:43 -             y = y,
2018-11-26 18:34:43 -             name = "Интерполяционный полином"
2018-11-26 18:34:43 -         )
2018-11-26 18:34:43 -     [trace1; trace2]
2018-11-26 18:34:43 -     |> Chart.Plot
2018-11-26 18:34:43 -     |> Chart.WithWidth 1000
2018-11-26 18:34:43 -     |> Chart.WithHeight 700
2018-11-26 18:34:43 - plotFirstCaseError()
2018-11-26 18:34:43 - The value or constructor 'polynom' is not defined. Maybe you want one of the following:
2018-11-26 18:34:43 -    polynom2
2018-11-26 18:34:55 - //first case
2018-11-26 18:34:55 - let polynom n x =
2018-11-26 18:34:55 -     let t = (x - x0) / h
2018-11-26 18:34:55 -     let Nk =
2018-11-26 18:34:55 -         let rec NkInternal prev i = seq{
2018-11-26 18:34:55 -             match i with/home/max/Загрузки/Interpolation2.fs
2018-11-26 18:34:55 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-11-26 18:34:55 -             | 0. -> yield t
2018-11-26 18:34:55 -                     yield! NkInternal t (i + 1.)
2018-11-26 18:34:55 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-11-26 18:34:55 -                     yield cur
2018-11-26 18:34:55 -                     yield! NkInternal cur (i + 1.)
2018-11-26 18:34:55 -         }
2018-11-26 18:34:55 -         NkInternal 1. 0. |> Seq.toList
2018-11-26 18:34:55 -     let rec polynomInternal nki (finiteDifference : float list list) k acc =
2018-11-26 18:34:55 -         match nki, finiteDifference with
2018-11-26 18:34:55 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynomInternal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.head)) 
2018-11-26 18:34:55 -         | _ -> acc
2018-11-26 18:34:55 -     polynomInternal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-11-26 18:34:55 - Unexpected infix operator in expression
2018-11-26 18:34:55 - Incomplete pattern matches on this expression.
2018-11-26 18:35:40 - Reporting 0 opened comms
2018-11-26 18:35:54 - shutdown request
2018-11-26 18:36:03 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-11-26 18:36:03 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-11-26 18:36:03 - For help type #help;;
2018-11-26 18:36:03 - > val it :
2018-11-26 18:36:03 -   ResizeArray<System.Type *
2018-11-26 18:36:03 -               (obj ->
2018-11-26 18:36:03 -                  seq<string *
2018-11-26 18:36:03 -                      string> *
2018-11-26 18:36:03 -                  string)>
2018-11-26 18:36:03 - = seq []
2018-11-26 18:36:03 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-11-26 18:36:03 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-11-26 18:36:03 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-11-26 18:36:08 - #load "XPlot.Plotly.Paket.fsx"
2018-11-26 18:36:08 - #load "XPlot.Plotly.fsx"
2018-11-26 18:36:08 - open XPlot.Plotly
2018-11-26 18:36:08 - open System
2018-11-26 18:36:21 - let N = 5.
2018-11-26 18:36:21 - let x0 = -(N % 3.)
2018-11-26 18:36:21 - let xm = x0 + 1.
2018-11-26 18:36:21 - let h = 0.01
2018-11-26 18:36:21 - let points = [x0 .. h .. xm]
2018-11-26 18:36:21 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-11-26 18:36:22 - let finiteDifferencesTable = 
2018-11-26 18:36:22 -     let rec computeCells y acc = 
2018-11-26 18:36:22 -         let computeCol (prevCol : float list) =
2018-11-26 18:36:22 -             let rec computeColInternal x acc =
2018-11-26 18:36:22 -                 match x with
2018-11-26 18:36:22 -                 | _ when x > 0 -> computeColInternal (x - 1) ((prevCol.[x] - prevCol.[x - 1]) :: acc)
2018-11-26 18:36:22 -                 | _ -> acc
2018-11-26 18:36:22 -             computeColInternal y [] 
2018-11-26 18:36:22 -         match y with
2018-11-26 18:36:22 -         |_ when y > 0 -> computeCells (y - 1) ((computeCol acc.[0]) :: acc)
2018-11-26 18:36:22 -         |_ -> List.rev acc
2018-11-26 18:36:22 -     computeCells (points.Length - 1) [points |> List.map f]
2018-11-26 18:36:23 - //first case
2018-11-26 18:36:23 - let polynom n x =
2018-11-26 18:36:23 -     let t = (x - x0) / h
2018-11-26 18:36:23 -     let Nk =
2018-11-26 18:36:23 -         let rec NkInternal prev i = seq{
2018-11-26 18:36:23 -             match i with/home/max/Загрузки/Interpolation2.fs
2018-11-26 18:36:23 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-11-26 18:36:23 -             | 0. -> yield t
2018-11-26 18:36:23 -                     yield! NkInternal t (i + 1.)
2018-11-26 18:36:23 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-11-26 18:36:23 -                     yield cur
2018-11-26 18:36:23 -                     yield! NkInternal cur (i + 1.)
2018-11-26 18:36:23 -         }
2018-11-26 18:36:23 -         NkInternal 1. 0. |> Seq.toList
2018-11-26 18:36:23 -     let rec polynomInternal nki (finiteDifference : float list list) k acc =
2018-11-26 18:36:23 -         match nki, finiteDifference with
2018-11-26 18:36:23 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynomInternal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.head)) 
2018-11-26 18:36:23 -         | _ -> acc
2018-11-26 18:36:23 -     polynomInternal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-11-26 18:36:23 - Unexpected infix operator in expression
2018-11-26 18:36:23 - Incomplete pattern matches on this expression.
2018-11-26 18:36:44 - //first case
2018-11-26 18:36:44 - let polynom n x =
2018-11-26 18:36:44 -     let t = (x - x0) / h
2018-11-26 18:36:44 -     let Nk =
2018-11-26 18:36:44 -         let rec NkInternal prev i = seq{
2018-11-26 18:36:44 -             match i with
2018-11-26 18:36:44 -             | _ when int i = n - 1 -> yield prev * (t - i) /  (i + 1.)
2018-11-26 18:36:44 -             | 0. -> yield t
2018-11-26 18:36:44 -                     yield! NkInternal t (i + 1.)
2018-11-26 18:36:44 -             | _ ->  let cur = prev * (t - i) /  (i + 1.)
2018-11-26 18:36:44 -                     yield cur
2018-11-26 18:36:44 -                     yield! NkInternal cur (i + 1.)
2018-11-26 18:36:44 -         }
2018-11-26 18:36:44 -         NkInternal 1. 0. |> Seq.toList
2018-11-26 18:36:44 -     let rec polynomInternal nki (finiteDifference : float list list) k acc =
2018-11-26 18:36:44 -         match nki, finiteDifference with
2018-11-26 18:36:44 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynomInternal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.head)) 
2018-11-26 18:36:44 -         | _ -> acc
2018-11-26 18:36:44 -     polynomInternal Nk finiteDifferencesTable.Tail 0 (f x0)
2018-11-26 18:36:51 - let plotFirstCaseError () =
2018-11-26 18:36:51 -     let trace1 =
2018-11-26 18:36:51 -         let y = points |> List.map f
2018-11-26 18:36:51 -         Scatter(
2018-11-26 18:36:51 -             x = points,
2018-11-26 18:36:51 -             y = y,
2018-11-26 18:36:51 -             name = "Исходная функция"
2018-11-26 18:36:51 -         )
2018-11-26 18:36:51 -     let trace2 =
2018-11-26 18:36:51 -         let y = points |> List.map (polynom 1)
2018-11-26 18:36:51 -         Scatter(
2018-11-26 18:36:51 -             x = points,
2018-11-26 18:36:51 -             y = y,
2018-11-26 18:36:51 -             name = "Интерполяционный полином"
2018-11-26 18:36:51 -         )
2018-11-26 18:36:51 -     [trace1; trace2]
2018-11-26 18:36:51 -     |> Chart.Plot
2018-11-26 18:36:51 -     |> Chart.WithWidth 1000
2018-11-26 18:36:51 -     |> Chart.WithHeight 700
2018-11-26 18:36:51 - plotFirstCaseError()
2018-11-26 18:36:55 - //second case
2018-11-26 18:36:55 - let polynom2 n x =
2018-11-26 18:36:55 -     let t = (x - xm) / h
2018-11-26 18:36:55 -     let Nk =
2018-11-26 18:36:55 -         let rec NkInternal prev i = seq{
2018-11-26 18:36:55 -             match i with
2018-11-26 18:36:55 -             | _ when int i = n - 1 -> yield prev * (t + i) /  (i + 1.)
2018-11-26 18:36:55 -             | 0. -> yield t
2018-11-26 18:36:55 -                     yield! NkInternal t (i + 1.)
2018-11-26 18:36:55 -             | _ ->  let cur = prev * (t + i) /  (i + 1.)
2018-11-26 18:36:55 -                     yield cur
2018-11-26 18:36:55 -                     yield! NkInternal cur (i + 1.)
2018-11-26 18:36:55 -         }
2018-11-26 18:36:55 -         NkInternal 1. 0. |> Seq.toList
2018-11-26 18:36:55 -     
2018-11-26 18:36:55 -     let rec polynom2Internal nki (finiteDifference : float list list) k acc =
2018-11-26 18:36:55 -         match nki, finiteDifference with
2018-11-26 18:36:55 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) when k < n -> polynom2Internal tNki tFiniteDifference (k + 1) (acc + hNki * (hFiniteDifference |> List.last)) 
2018-11-26 18:36:55 -         | _ -> acc
2018-11-26 18:36:55 -     polynom2Internal Nk finiteDifferencesTable.Tail 0 (f xm)
2018-11-26 18:36:58 - let plotSecondCaseError () =
2018-11-26 18:36:58 -     let trace1 =
2018-11-26 18:36:58 -         let y = points |> List.map f
2018-11-26 18:36:58 -         Scatter(
2018-11-26 18:36:58 -             x = points,
2018-11-26 18:36:58 -             y = y,
2018-11-26 18:36:58 -             name = "Исходная функция"
2018-11-26 18:36:58 -         )
2018-11-26 18:36:58 -     let trace2 =
2018-11-26 18:36:58 -         let y = points |> List.map (polynom2 4)
2018-11-26 18:36:58 -         Scatter(
2018-11-26 18:36:58 -             x = points,
2018-11-26 18:36:58 -             y = y,
2018-11-26 18:36:58 -             name = "Интерполяционный полином"
2018-11-26 18:36:58 -         )
2018-11-26 18:36:58 -     [trace1; trace2]
2018-11-26 18:36:58 -     |> Chart.Plot
2018-11-26 18:36:58 -     |> Chart.WithWidth 1000
2018-11-26 18:36:58 -     |> Chart.WithHeight 700
2018-11-26 18:36:58 - plotSecondCaseError()
2018-11-26 18:37:02 - //third case
2018-11-26 18:37:02 - let polynom3 n x =
2018-11-26 18:37:02 -     let startX = points |> List.filter (fun i -> x > i - h / 2. && x <= i + h / 2.) |> List.exactlyOne
2018-11-26 18:37:02 -     let isRightSide = x <= startX + h / 2. && x > startX
2018-11-26 18:37:02 -     let middlePoint = points |> List.findIndex (fun i -> i = startX)
2018-11-26 18:37:02 -     let dependenceOfSide rightSide = 
2018-11-26 18:37:02 -         match rightSide with
2018-11-26 18:37:02 -         | false -> (n + 1) / 2
2018-11-26 18:37:02 -         | true -> n / 2
2018-11-26 18:37:02 -     let startIndex = middlePoint - (dependenceOfSide isRightSide)
2018-11-26 18:37:02 -     let endIndex = middlePoint + (dependenceOfSide <| not isRightSide)
2018-11-26 18:37:02 -     let t = (x - startX) / h
2018-11-26 18:37:02 -     let Nk =
2018-11-26 18:37:02 -         let rec NkInternal prev i =
2018-11-26 18:37:02 -             let deg = 
2018-11-26 18:37:02 -                 match n % 2 = 0 with
2018-11-26 18:37:02 -                 | true -> i + 1.
2018-11-26 18:37:02 -                 | false -> i
2018-11-26 18:37:02 -             seq{
2018-11-26 18:37:02 -                 match i with
2018-11-26 18:37:02 -                 | _ when int i = n - 1 -> yield prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-11-26 18:37:02 -                 | 0. -> yield t
2018-11-26 18:37:02 -                         yield! NkInternal t (i + 1.)
2018-11-26 18:37:02 -                 | _ ->  let cur = prev * (t + ((-1.) ** deg) * Math.Truncate((i + 1.) / 2.)) / (i + 1.)
2018-11-26 18:37:02 -                         yield cur
2018-11-26 18:37:02 -                         yield! NkInternal cur (i + 1.)
2018-11-26 18:37:02 -             }
2018-11-26 18:37:02 -         NkInternal 1. 0. |> Seq.toList
2018-11-26 18:37:02 -     
2018-11-26 18:37:02 -     let middle =
2018-11-26 18:37:02 -         let rec truncateFiniteDiff (finiteDifference : float list list) k acc =
2018-11-26 18:37:02 -             match finiteDifference with
2018-11-26 18:37:02 -             | (h :: t) when k <= n -> truncateFiniteDiff t (k + 1) ((h |> List.indexed |> List.filter (fun (i, _) -> i >= startIndex && i <= endIndex - k) |> List.map (snd)) :: acc)
2018-11-26 18:37:02 -             | _ -> acc |> List.rev
2018-11-26 18:37:02 -         truncateFiniteDiff finiteDifferencesTable 0 []
2018-11-26 18:37:02 -     let rec polynom3Internal nki (finiteDifference : float list list) acc =
2018-11-26 18:37:02 -         match nki, finiteDifference with
2018-11-26 18:37:02 -         | (hNki :: tNki, hFiniteDifference :: tFiniteDifference) -> polynom3Internal tNki tFiniteDifference (acc + hNki * hFiniteDifference.[(hFiniteDifference.Length - 1) / 2])
2018-11-26 18:37:02 -         | _ -> acc
2018-11-26 18:37:02 -     
2018-11-26 18:37:02 -     match startIndex, endIndex with
2018-11-26 18:37:02 -     | (s, e) when s >= 0 && e < points.Length -> polynom3Internal Nk middle.Tail (f startX)
2018-11-26 18:37:02 -     | (s, e) when s >= 0 -> polynom2 n x
2018-11-26 18:37:02 -     | (s, e) when e < points.Length -> polynom n x
2018-11-26 18:37:02 -     | _ -> failwith "Incorrect arguments"
2018-11-26 18:37:05 - let plotThirdCaseError () =
2018-11-26 18:37:05 -     let trace1 =
2018-11-26 18:37:05 -         let y = points |> List.map f
2018-11-26 18:37:05 -         Scatter(
2018-11-26 18:37:05 -             x = points,
2018-11-26 18:37:05 -             y = y,
2018-11-26 18:37:05 -             name = "Исходная функция"
2018-11-26 18:37:05 -         )
2018-11-26 18:37:05 -     let trace2 =
2018-11-26 18:37:05 -         let y = points |> List.map (polynom3 1)
2018-11-26 18:37:05 -         Scatter(
2018-11-26 18:37:05 -             x = points,
2018-11-26 18:37:05 -             y = y,
2018-11-26 18:37:05 -             name = "Интерполяционный полином"
2018-11-26 18:37:05 -         )
2018-11-26 18:37:05 -     [trace1; trace2]
2018-11-26 18:37:05 -     |> Chart.Plot
2018-11-26 18:37:05 -     |> Chart.WithWidth 1000
2018-11-26 18:37:05 -     |> Chart.WithHeight 700
2018-11-26 18:37:05 - plotThirdCaseError()
2018-11-26 18:37:08 - let x = -1.455 //значение из отрезка [-2; -1]
2018-11-26 18:37:08 - let n = 5 //степень полинома
2018-11-26 18:37:09 - polynom n x - f x |> abs;;
2018-11-26 18:37:10 - polynom2 n x - f x |> abs;;
2018-11-26 18:37:11 - polynom3 n x - f x |> abs;;
2018-11-26 18:37:16 - let x = -1.455 //значение из отрезка [-2; -1]
2018-11-26 18:37:16 - let n = 6 //степень полинома
2018-11-26 18:37:16 - polynom n x - f x |> abs;;
2018-11-26 18:37:16 - polynom2 n x - f x |> abs;;
2018-11-26 18:37:17 - polynom3 n x - f x |> abs;;
2018-11-26 18:37:20 - let x = -1.455 //значение из отрезка [-2; -1]
2018-11-26 18:37:20 - let n = 7 //степень полинома
2018-11-26 18:37:20 - polynom n x - f x |> abs;;
2018-11-26 18:37:20 - polynom2 n x - f x |> abs;;
2018-11-26 18:37:21 - polynom3 n x - f x |> abs;;
2018-11-26 18:37:24 - let x = -1.455 //значение из отрезка [-2; -1]
2018-11-26 18:37:24 - let n = 8 //степень полинома
2018-11-26 18:37:24 - polynom n x - f x |> abs;;
2018-11-26 18:37:24 - polynom2 n x - f x |> abs;;
2018-11-26 18:37:25 - polynom3 n x - f x |> abs;;
2018-11-26 19:36:49 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-11-26 19:36:49 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-11-26 19:36:49 - For help type #help;;
2018-11-26 19:36:49 - > val it :
2018-11-26 19:36:49 -   ResizeArray<System.Type *
2018-11-26 19:36:49 -               (obj ->
2018-11-26 19:36:49 -                  seq<string *
2018-11-26 19:36:49 -                      string> *
2018-11-26 19:36:49 -                  string)>
2018-11-26 19:36:49 - = seq []
2018-11-26 19:36:49 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-11-26 19:36:49 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-11-26 19:36:49 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-11-26 19:36:50 - Reporting 0 opened comms
2018-11-26 20:46:04 - Reporting 0 opened comms
2018-11-26 20:47:43 - Reporting 0 opened comms
2018-11-26 21:28:57 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-11-26 21:28:57 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-11-26 21:28:57 - For help type #help;;
2018-11-26 21:28:57 - > val it :
2018-11-26 21:28:57 -   ResizeArray<System.Type *
2018-11-26 21:28:57 -               (obj ->
2018-11-26 21:28:57 -                  seq<string *
2018-11-26 21:28:57 -                      string> *
2018-11-26 21:28:57 -                  string)>
2018-11-26 21:28:57 - = seq []
2018-11-26 21:28:57 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-11-26 21:28:57 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-11-26 21:28:57 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-11-26 21:28:57 - Reporting 0 opened comms
2018-11-26 21:29:37 - let N = 5.
2018-11-26 21:29:39 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-11-26 21:29:40 - let x0 = - (N % 3.)
2018-11-26 21:29:40 - let points = [x0; x0 + 0.1; x0 + 0.3; x0 + 0.45; x0 + 0.5]
2018-11-26 21:31:45 - let x0 = - (N % 3.)
2018-11-26 21:31:45 - let points = [x0; x0 + 0.3; x0 + 0.5]
2018-11-26 21:31:45 - let rs = [1; 2; 3]
2018-11-26 21:35:06 - Reporting 0 opened comms
2018-11-26 21:54:07 - let x0 = - (N % 3.)
2018-11-26 21:54:07 - let xPoints = [x0; x0 + 0.3; x0 + 0.5]
2018-11-26 21:54:07 - let rs = [1; 2; 3]
2018-11-26 21:54:07 - let yPoints = 
2018-11-26 21:54:07 -     let addWhileNotZero x r acc =  if r > 0 then addWhileNotZero x r ((x ** r) :: acc)
2018-11-26 21:54:07 -                                    else acc 
2018-11-26 21:54:07 -     let rec yPointInternal x r acc =
2018-11-26 21:54:07 -         match x, r with
2018-11-26 21:54:07 -         | (xh : xt), (rh : rt) -> yPointInternal xt rt <| addWhileNotZero xh rh acc
2018-11-26 21:54:07 -         | _ -> acc
2018-11-26 21:54:07 -     yPointInternal xPoints rs []
2018-11-26 21:54:08 - The value or constructor 'addWhileNotZero' is not defined.
2018-11-26 21:54:08 - The type 'xt' is not defined.
2018-11-26 21:54:08 - The type 'rt' is not defined.
2018-11-26 21:54:08 - The value or constructor 'xt' is not defined. Maybe you want one of the following:
2018-11-26 21:54:08 -    x
2018-11-26 21:54:08 -    x0
2018-11-26 21:54:08 -    xh
2018-11-26 21:54:08 -    it
2018-11-26 21:54:08 - The value or constructor 'rt' is not defined. Maybe you want one of the following:
2018-11-26 21:54:08 -    r
2018-11-26 21:54:08 -    rh
2018-11-26 21:54:08 -    rs
2018-11-26 21:54:08 -    it
2018-11-26 21:54:08 - This rule will never be matched
2018-11-26 21:54:08 - This expression was expected to have type
2018-11-26 21:54:08 -     'int'    
2018-11-26 21:54:08 - but here has type
2018-11-26 21:54:08 -     'int list'    
2018-11-26 21:54:32 - let x0 = - (N % 3.)
2018-11-26 21:54:32 - let xPoints = [x0; x0 + 0.3; x0 + 0.5]
2018-11-26 21:54:32 - let rs = [1; 2; 3]
2018-11-26 21:54:32 - let yPoints = 
2018-11-26 21:54:32 -     let addWhileNotZero x r acc =  if r > 0 then addWhileNotZero x r ((x ** r) :: acc)
2018-11-26 21:54:32 -                                    else acc 
2018-11-26 21:54:32 -     let rec yPointInternal x r acc =
2018-11-26 21:54:32 -         match x, r with
2018-11-26 21:54:32 -         | (xh :: xt), (rh :: rt) -> yPointInternal xt rt <| addWhileNotZero xh rh acc
2018-11-26 21:54:32 -         | _ -> acc
2018-11-26 21:54:32 -     yPointInternal xPoints rs []
2018-11-26 21:54:32 - The value or constructor 'addWhileNotZero' is not defined.
2018-11-26 21:58:36 - let x0 = - (N % 3.)
2018-11-26 21:58:36 - let xPoints = [x0; x0 + 0.3; x0 + 0.5]
2018-11-26 21:58:36 - let rs = [1; 2; 3]
2018-11-26 21:58:36 - let yPoints = 
2018-11-26 21:58:36 -     let rec addWhileNotZero x r acc =  if r > 0 then addWhileNotZero x r ((x ** r) :: acc)
2018-11-26 21:58:36 -                                    else acc 
2018-11-26 21:58:36 -     let rec yPointInternal x r acc =
2018-11-26 21:58:36 -         match x, r with
2018-11-26 21:58:36 -         | (xh :: xt), (rh :: rt) -> yPointInternal xt rt <| addWhileNotZero xh rh acc
2018-11-26 21:58:36 -         | _ -> acc
2018-11-26 21:58:36 -     yPointInternal xPoints rs []
2018-11-26 21:58:37 - Unexpected keyword 'else' in binding. Expected incomplete structured construct at or before this point or other token.
2018-11-26 21:58:37 - Incomplete value or function definition. If this is in an expression, the body of the expression must be indented to the same column as the 'let' keyword.
2018-11-26 21:58:37 - The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.
2018-11-26 21:58:37 - Incomplete structured construct at or before this point in interaction. Expected incomplete structured construct at or before this point, ';', ';;' or other token.
2018-11-26 21:58:37 - parse error
2018-11-26 21:58:46 - let x0 = - (N % 3.)
2018-11-26 21:58:46 - let xPoints = [x0; x0 + 0.3; x0 + 0.5]
2018-11-26 21:58:46 - let rs = [1; 2; 3]
2018-11-26 21:58:46 - let yPoints = 
2018-11-26 21:58:46 -     let rec addWhileNotZero x r acc =  if r > 0 then addWhileNotZero x r ((x ** r) :: acc)
2018-11-26 21:58:46 -                                        else acc 
2018-11-26 21:58:46 -     let rec yPointInternal x r acc =
2018-11-26 21:58:46 -         match x, r with
2018-11-26 21:58:46 -         | (xh :: xt), (rh :: rt) -> yPointInternal xt rt <| addWhileNotZero xh rh acc
2018-11-26 21:58:46 -         | _ -> acc
2018-11-26 21:58:46 -     yPointInternal xPoints rs []
2018-11-26 21:58:46 - The type 'int' does not match the type 'float'
2018-11-26 22:00:29 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-11-26 22:00:29 - let x0 = - (N % 3.)
2018-11-26 22:00:29 - let xPoints = [x0; x0 + 0.3; x0 + 0.5]
2018-11-26 22:00:29 - let rs = [1.; 2.; 3.]
2018-11-26 22:00:30 - let yPoints = 
2018-11-26 22:00:30 -     let rec addWhileNotZero x r acc =  if r > 0. then addWhileNotZero x r ((x ** r) :: acc)
2018-11-26 22:00:30 -                                        else acc 
2018-11-26 22:00:30 -     let rec yPointInternal x r acc =
2018-11-26 22:00:30 -         match x, r with
2018-11-26 22:00:30 -         | (xh :: xt), (rh :: rt) -> yPointInternal xt rt <| addWhileNotZero xh rh acc
2018-11-26 22:00:30 -         | _ -> acc
2018-11-26 22:00:30 -     yPointInternal xPoints rs []
2018-11-26 22:01:33 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-11-26 22:01:33 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-11-26 22:01:33 - For help type #help;;
2018-11-26 22:01:33 - > val it :
2018-11-26 22:01:33 -   ResizeArray<System.Type *
2018-11-26 22:01:33 -               (obj ->
2018-11-26 22:01:33 -                  seq<string *
2018-11-26 22:01:33 -                      string> *
2018-11-26 22:01:33 -                  string)>
2018-11-26 22:01:33 - = seq []
2018-11-26 22:01:33 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-11-26 22:01:33 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-11-26 22:01:33 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-11-26 22:33:46 - Reporting 0 opened comms
2018-11-26 22:33:50 - Reporting 0 opened comms
2018-11-26 22:43:32 - let N = 5.
2018-11-26 22:43:33 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-11-26 22:43:33 - let x0 = - (N % 3.)
2018-11-26 22:43:33 - let points = [x0; x0 + 0.3; x0 + 0.5]
2018-11-26 22:43:33 - let rs = [1.; 2.; 3.]
2018-11-26 22:51:21 - let yPoints =
2018-11-26 22:51:21 -     let rec addWhileNotZero x r acc =  if int r > 0 then addWhileNotZero x (r - 1.) (x :: acc)
2018-11-26 22:51:21 -                                        else acc 
2018-11-26 22:51:21 -     let rec yPointInternal x r acc =
2018-11-26 22:51:21 -         match x, r with
2018-11-26 22:51:21 -         | (xh :: xt), (rh :: rt) -> yPointInternal xt rt <| addWhileNotZero xh rh acc
2018-11-26 22:51:21 -         | _ -> acc
2018-11-26 22:51:21 -     yPointInternal xPoints rs []
2018-11-26 22:51:22 - The value or constructor 'xPoints' is not defined. Maybe you want one of the following:
2018-11-26 22:51:22 -    points
2018-11-26 22:51:38 - let f (x : float) = x * exp (x * (N % 2. + 1.)) + sin (x / 2. * (N % 7. + 1.))
2018-11-26 22:51:38 - let x0 = - (N % 3.)
2018-11-26 22:51:38 - let xPoints = [x0; x0 + 0.3; x0 + 0.5]
2018-11-26 22:51:38 - let rs = [1.; 2.; 3.]
2018-11-26 22:51:39 - let yPoints =
2018-11-26 22:51:39 -     let rec addWhileNotZero x r acc =  if int r > 0 then addWhileNotZero x (r - 1.) (x :: acc)
2018-11-26 22:51:39 -                                        else acc 
2018-11-26 22:51:39 -     let rec yPointInternal x r acc =
2018-11-26 22:51:39 -         match x, r with
2018-11-26 22:51:39 -         | (xh :: xt), (rh :: rt) -> yPointInternal xt rt <| addWhileNotZero xh rh acc
2018-11-26 22:51:39 -         | _ -> acc
2018-11-26 22:51:39 -     yPointInternal xPoints rs []
2018-11-26 22:51:54 - yPoints
2018-11-26 22:52:08 - yPoints, xPoints
2018-11-26 22:52:22 - let yPoints =
2018-11-26 22:52:22 -     let rec addWhileNotZero x r acc =  if int r > 0 then addWhileNotZero x (r - 1.) (x :: acc)
2018-11-26 22:52:22 -                                        else acc 
2018-11-26 22:52:22 -     let rec yPointInternal x r acc =
2018-11-26 22:52:22 -         match x, r with
2018-11-26 22:52:22 -         | (xh :: xt), (rh :: rt) -> yPointInternal xt rt <| addWhileNotZero xh rh acc
2018-11-26 22:52:22 -         | _ -> List.rev acc
2018-11-26 22:52:22 -     yPointInternal xPoints rs []
2018-11-26 22:52:30 - let yPoints =
2018-11-26 22:52:30 -     let rec addWhileNotZero x r acc =  if int r > 0 then addWhileNotZero x (r - 1.) (x :: acc)
2018-11-26 22:52:30 -                                        else acc 
2018-11-26 22:52:30 -     let rec yPointInternal x r acc =
2018-11-26 22:52:30 -         match x, r with
2018-11-26 22:52:30 -         | (xh :: xt), (rh :: rt) -> yPointInternal xt rt <| addWhileNotZero xh rh acc
2018-11-26 22:52:30 -         | _ -> List.rev acc
2018-11-26 22:52:30 -     yPointInternal xPoints rs []
2018-11-26 22:52:30 - yPoints, xPoints
2018-11-26 22:57:13 - Reporting 0 opened comms
2018-11-26 23:39:30 - let f' (x : float) = exp (2. * x) * (1. + 2. * x) + 3. * cos (3. * x)
2018-11-26 23:39:30 - let f'' (x : float) = 4. * exp (2. * x) * (1. + x) - 9. * sin (3. * x)
2018-11-26 23:39:30 - let df j = 
2018-11-26 23:39:30 -     match j with
2018-11-26 23:39:30 -     | 0 -> f
2018-11-26 23:39:30 -     | 1 -> f'
2018-11-26 23:39:30 -     | 2 -> f''
2018-11-26 23:39:30 -     | _ -> failwith "unexpected derivative number"
2018-11-26 23:44:13 - Reporting 0 opened comms
2018-11-26 23:44:29 - let factorial n = [1 .. n] |> List.reduce (*)
2018-11-26 23:44:29 - let dividedDifferencesTable = 
2018-11-26 23:44:29 -     let rec computeCells y (acc : float list list) = 
2018-11-26 23:44:29 -         let computeCol n (prevCol : float list) =
2018-11-26 23:44:29 -             let rec computeColInternal x acc =
2018-11-26 23:44:29 -                 match x with
2018-11-26 23:44:29 -                 | _ when x > 0 && yPoints.[x + n - 1] - yPoints.[x - 1] <> 0. -> 
2018-11-26 23:44:29 -                                 ((prevCol.[x] - prevCol.[x - 1]) / (yPoints.[x + n - 1] - yPoints.[x - 1])) :: acc |> computeColInternal (x - 1)
2018-11-26 23:44:29 -                 | _ when x > 0 -> (df n yPoints.[x - 1]) / (float <| factorial n)  :: acc |> computeColInternal (x - 1)
2018-11-26 23:44:29 -                 | _ -> acc
2018-11-26 23:44:29 -             computeColInternal (yPoints.Length - n) [] 
2018-11-26 23:44:29 -         match y with
2018-11-26 23:44:29 -         |_ when y > 0 -> (computeCol (yPoints.Length - y) acc.[0]) :: acc |> computeCells (y - 1)
2018-11-26 23:44:29 -         |_ -> List.rev acc
2018-11-26 23:44:29 -     computeCells (yPoints.Length - 1) [yPoints |> List.map f; yPoints]
2018-11-26 23:44:41 - dividedDifferencesTable
2018-11-26 23:45:05 - let factorial n = [1 .. n] |> List.reduce (*)
2018-11-26 23:45:05 - let dividedDifferencesTable = 
2018-11-26 23:45:05 -     let rec computeCells y (acc : float list list) = 
2018-11-26 23:45:05 -         let computeCol n (prevCol : float list) =
2018-11-26 23:45:05 -             let rec computeColInternal x acc =
2018-11-26 23:45:05 -                 match x with
2018-11-26 23:45:05 -                 | _ when x > 0 && yPoints.[x + n - 1] - yPoints.[x - 1] <> 0. -> 
2018-11-26 23:45:05 -                                 ((prevCol.[x] - prevCol.[x - 1]) / (yPoints.[x + n - 1] - yPoints.[x - 1])) :: acc |> computeColInternal (x - 1)
2018-11-26 23:45:05 -                 | _ when x > 0 -> (df n yPoints.[x - 1]) / (float <| factorial n)  :: acc |> computeColInternal (x - 1)
2018-11-26 23:45:05 -                 | _ -> acc
2018-11-26 23:45:05 -             computeColInternal (yPoints.Length - n) [] 
2018-11-26 23:45:05 -         match y with
2018-11-26 23:45:05 -         |_ when y > 0 -> (computeCol (yPoints.Length - y) acc.[0]) :: acc |> computeCells (y - 1)
2018-11-26 23:45:05 -         |_ -> List.rev acc
2018-11-26 23:45:05 -     computeCells (yPoints.Length - 1) [yPoints |> List.map f; yPoints]
2018-11-26 23:45:05 - dividedDifferencesTable
2018-11-26 23:48:19 - let newtonPolynomial x = 
2018-11-26 23:48:19 -     let multiply = 1. :: ([0 .. yPoints.Length - 2] |> List.mapFold (fun acc k -> ((x - yPoints.[k]) * acc, (x - yPoints.[k]) * acc)) 1. |> fst)
2018-11-26 23:48:19 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-11-26 23:48:19 -     [0 .. yPoints.Length - 1] |> List.sumBy (fun k -> term k)
2018-11-26 23:52:10 - Reporting 0 opened comms
2018-11-26 23:56:29 - Microsoft (R) F# Interactive version 10.1.0 for F# 4.1
2018-11-26 23:56:29 - Copyright (c) Microsoft Corporation. All Rights Reserved.
2018-11-26 23:56:29 - For help type #help;;
2018-11-26 23:56:29 - > val it :
2018-11-26 23:56:29 -   ResizeArray<System.Type *
2018-11-26 23:56:29 -               (obj ->
2018-11-26 23:56:29 -                  seq<string *
2018-11-26 23:56:29 -                      string> *
2018-11-26 23:56:29 -                  string)>
2018-11-26 23:56:29 - = seq []
2018-11-26 23:56:29 - --> Added '/home/nbuser/IfSharp/bin' to library include path
2018-11-26 23:56:29 - --> Referenced '/home/nbuser/IfSharp/bin/IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-11-26 23:56:29 - --> Referenced '/home/nbuser/IfSharp/bin/NetMQ.dll' (file may be locked by F# Interactive process)
2018-11-26 23:56:29 - Reporting 0 opened comms
2018-11-27 00:03:02 - let P x = 
2018-11-27 00:03:02 -     let multiply = 1. :: ([0 .. yPoints.Length - 2] |> List.mapFold (fun acc k -> ((x - yPoints.[k]) * acc, (x - yPoints.[k]) * acc)) 1. |> fst)
2018-11-27 00:03:02 -     let term k = dividedDifferencesTable.[k + 1].[0] * multiply.[k]
2018-11-27 00:03:02 -     [0 .. yPoints.Length - 1] |> List.sumBy (fun k -> term k)
2018-11-27 00:03:38 - let h = 0.0001
2018-11-27 00:03:58 - let P' x = (P (x + h) - P x) / h
2018-11-27 00:04:58 - let P' x = (P (x + h) - P x) / h
2018-11-27 00:04:58 - let P'' x = (P (x + h) - 2 * P x + P (x - h)) / (h ** 2) 
2018-11-27 00:04:59 - The type 'float' does not match the type 'int'
2018-11-27 00:04:59 - This expression was expected to have type
2018-11-27 00:04:59 -     'float'    
2018-11-27 00:04:59 - but here has type
2018-11-27 00:04:59 -     'int'    
2018-11-27 00:04:59 - The type 'float' does not match the type 'int'
2018-11-27 00:05:07 - let P' x = (P (x + h) - P x) / h
2018-11-27 00:05:07 - let P'' x = (P (x + h) - 2. * P x + P (x - h)) / (h ** 2.) 
2018-11-27 00:05:34 - #load "XPlot.Plotly.Paket.fsx"
2018-11-27 00:05:34 - #load "XPlot.Plotly.fsx"
2018-11-27 00:05:34 - open XPlot.Plotly
2018-11-27 00:05:34 - open System
2018-11-27 00:08:54 - let trace1 =
2018-11-27 00:08:54 -     Scatter(
2018-11-27 00:08:54 -         x = xPoints,
2018-11-27 00:08:54 -         y = xPoints |> List.map f,
2018-11-27 00:08:54 -         name = "Исходная функция"
2018-11-27 00:08:54 -     )
2018-11-27 00:08:54 - let trace2 =
2018-11-27 00:08:54 -     Scatter(
2018-11-27 00:08:54 -         x = xPoints,
2018-11-27 00:08:54 -         y = yPoints |> List.map P,
2018-11-27 00:08:54 -         name = "Полином"
2018-11-27 00:08:54 -     )    
2018-11-27 00:08:54 - [trace1; trace2]
2018-11-27 00:08:54 - |> Chart.Plot
2018-11-27 00:08:54 - |> Chart.WithWidth 1000
2018-11-27 00:08:54 - |> Chart.WithHeight 700
2018-11-27 00:08:55 - Named arguments must appear after all other arguments
2018-11-27 00:08:55 - Named arguments must appear after all other arguments
2018-11-27 00:09:55 - Reporting 0 opened comms
2018-11-27 00:10:07 - let h = 0.0001
2018-11-27 00:10:07 - let P' x = (P (x + h) - P x) / h
2018-11-27 00:10:07 - let P'' x = (P (x + h) - 2. * P x + P (x - h)) / (h ** 2.) 
2018-11-27 00:10:09 - let trace1 =
2018-11-27 00:10:09 -     Scatter(
2018-11-27 00:10:09 -         x = xPoints,
2018-11-27 00:10:09 -         y = xPoints |> List.map f,
2018-11-27 00:10:09 -         name = "Исходная функция"
2018-11-27 00:10:09 -     )
2018-11-27 00:10:09 - let trace2 =
2018-11-27 00:10:09 -     Scatter(
2018-11-27 00:10:09 -         x = xPoints,
2018-11-27 00:10:09 -         y = yPoints |> List.map P,
2018-11-27 00:10:09 -         name = "Полином"
2018-11-27 00:10:09 -     )    
2018-11-27 00:10:09 - [trace1; trace2]
2018-11-27 00:10:09 - |> Chart.Plot
2018-11-27 00:10:09 - |> Chart.WithWidth 1000
2018-11-27 00:10:09 - |> Chart.WithHeight 700
2018-11-27 00:10:10 - Named arguments must appear after all other arguments
2018-11-27 00:10:10 - Named arguments must appear after all other arguments
2018-11-27 00:11:35 - let plot () =
2018-11-27 00:11:35 -     let trace1 =
2018-11-27 00:11:35 -         Scatter(
2018-11-27 00:11:35 -             x = xPoints,
2018-11-27 00:11:35 -             y = xPoints |> List.map f,
2018-11-27 00:11:35 -             name = "Исходная функция"
2018-11-27 00:11:35 -         )
2018-11-27 00:11:35 -     let trace2 =
2018-11-27 00:11:35 -         Scatter(
2018-11-27 00:11:35 -             x = xPoints,
2018-11-27 00:11:35 -             y = yPoints |> List.map P,
2018-11-27 00:11:35 -             name = "Полином"
2018-11-27 00:11:35 -         )    
2018-11-27 00:11:35 -     [trace1; trace2]
2018-11-27 00:11:35 -     |> Chart.Plot
2018-11-27 00:11:35 -     |> Chart.WithWidth 1000
2018-11-27 00:11:35 -     |> Chart.WithHeight 700
2018-11-27 00:11:35 - plot()
2018-11-27 00:11:36 - Named arguments must appear after all other arguments
2018-11-27 00:11:36 - Named arguments must appear after all other arguments
2018-11-27 00:11:47 - let trace1 =
2018-11-27 00:11:47 -     Scatter(
2018-11-27 00:11:47 -         x = xPoints,
2018-11-27 00:11:47 -         y = xPoints |> List.map f,
2018-11-27 00:11:47 -         name = "Исходная функция"
2018-11-27 00:11:47 -     )
2018-11-27 00:11:47 - let trace2 =
2018-11-27 00:11:47 -     Scatter(
2018-11-27 00:11:47 -         x = xPoints,
2018-11-27 00:11:47 -         y = yPoints |> List.map P,
2018-11-27 00:11:47 -         name = "Полином"
2018-11-27 00:11:47 -     )    
2018-11-27 00:11:47 - [trace1; trace2]
2018-11-27 00:11:47 - |> Chart.Plot
2018-11-27 00:11:47 - |> Chart.WithWidth 1000
2018-11-27 00:11:47 - |> Chart.WithHeight 700
2018-11-27 00:11:48 - Named arguments must appear after all other arguments
2018-11-27 00:11:48 - Named arguments must appear after all other arguments
2018-11-27 00:12:18 - let trace1 =
2018-11-27 00:12:18 -     Scatter(
2018-11-27 00:12:18 -         x = xPoints,
2018-11-27 00:12:18 -         y = (xPoints |> List.map f),
2018-11-27 00:12:18 -         name = "Исходная функция"
2018-11-27 00:12:18 -     )
2018-11-27 00:12:18 - let trace2 =
2018-11-27 00:12:18 -     Scatter(
2018-11-27 00:12:18 -         x = xPoints,
2018-11-27 00:12:18 -         y = yPoints |> List.map P,
2018-11-27 00:12:18 -         name = "Полином"
2018-11-27 00:12:18 -     )    
2018-11-27 00:12:18 - [trace1; trace2]
2018-11-27 00:12:18 - |> Chart.Plot
2018-11-27 00:12:18 - |> Chart.WithWidth 1000
2018-11-27 00:12:18 - |> Chart.WithHeight 700
2018-11-27 00:12:18 - Named arguments must appear after all other arguments
2018-11-27 00:12:24 - let trace1 =
2018-11-27 00:12:24 -     Scatter(
2018-11-27 00:12:24 -         x = xPoints,
2018-11-27 00:12:24 -         y = (xPoints |> List.map f),
2018-11-27 00:12:24 -         name = "Исходная функция"
2018-11-27 00:12:24 -     )
2018-11-27 00:12:24 - let trace2 =
2018-11-27 00:12:24 -     Scatter(
2018-11-27 00:12:24 -         x = xPoints,
2018-11-27 00:12:24 -         y = (yPoints |> List.map P),
2018-11-27 00:12:24 -         name = "Полином"
2018-11-27 00:12:24 -     )    
2018-11-27 00:12:24 - [trace1; trace2]
2018-11-27 00:12:24 - |> Chart.Plot
2018-11-27 00:12:24 - |> Chart.WithWidth 1000
2018-11-27 00:12:24 - |> Chart.WithHeight 700
2018-11-27 00:13:53 - let x = [-2. .. -1.5]
2018-11-27 00:13:53 - let trace1 =
2018-11-27 00:13:53 -     Scatter(
2018-11-27 00:13:53 -         x = x,
2018-11-27 00:13:53 -         y = (x |> List.map f),
2018-11-27 00:13:53 -         name = "Исходная функция"
2018-11-27 00:13:53 -     )
2018-11-27 00:13:53 - let trace2 =
2018-11-27 00:13:53 -     Scatter(
2018-11-27 00:13:53 -         x = x,
2018-11-27 00:13:53 -         y = (x |> List.map P),
2018-11-27 00:13:53 -         name = "Полином"
2018-11-27 00:13:53 -     )    
2018-11-27 00:13:53 - [trace1; trace2]
2018-11-27 00:13:53 - |> Chart.Plot
2018-11-27 00:13:53 - |> Chart.WithWidth 1000
2018-11-27 00:13:53 - |> Chart.WithHeight 700
2018-11-27 00:14:19 - x
2018-11-27 00:14:41 - Reporting 0 opened comms
2018-11-27 00:15:01 - let x = [-2. .. 0.01 .. -1.5]
2018-11-27 00:15:01 - let trace1 =
2018-11-27 00:15:01 -     Scatter(
2018-11-27 00:15:01 -         x = x,
2018-11-27 00:15:01 -         y = (x |> List.map f),
2018-11-27 00:15:01 -         name = "Исходная функция"
2018-11-27 00:15:01 -     )
2018-11-27 00:15:01 - let trace2 =
2018-11-27 00:15:01 -     Scatter(
2018-11-27 00:15:01 -         x = x,
2018-11-27 00:15:01 -         y = (x |> List.map P),
2018-11-27 00:15:01 -         name = "Полином"
2018-11-27 00:15:01 -     )    
2018-11-27 00:15:01 - [trace1; trace2]
2018-11-27 00:15:01 - |> Chart.Plot
2018-11-27 00:15:01 - |> Chart.WithWidth 1000
2018-11-27 00:15:01 - |> Chart.WithHeight 700
2018-11-27 00:16:07 - let x = -1.33
2018-11-27 00:16:27 - abs (f x - P x)
2018-11-27 00:16:39 - abs (f' x - P' x)
2018-11-27 00:16:55 - abs (f'' x - P'' x)
2018-11-27 00:17:15 - abs (f'' x - P'' x)
2018-11-27 00:18:35 - let x = [-2. .. 0.01 .. -1.5]
2018-11-27 00:18:35 - let trace =
2018-11-27 00:18:35 -     Scatter(
2018-11-27 00:18:35 -         x = x,
2018-11-27 00:18:35 -         y = ((x |> List.map f) - (x |> List.map P)),
2018-11-27 00:18:35 -         name = "Исходная функция"
2018-11-27 00:18:35 -     )   
2018-11-27 00:18:35 - [trace]
2018-11-27 00:18:35 - |> Chart.Plot
2018-11-27 00:18:35 - |> Chart.WithWidth 1000
2018-11-27 00:18:35 - |> Chart.WithHeight 700
2018-11-27 00:18:35 - None of the types 'float list, 'a list' support the operator '-'
2018-11-27 00:19:31 - let x = [-2. .. 0.01 .. -1.5]
2018-11-27 00:19:31 - let trace =
2018-11-27 00:19:31 -     Scatter(
2018-11-27 00:19:31 -         x = x,
2018-11-27 00:19:31 -         y = (x |> List.map (fun i -> abs (f i - P i))),
2018-11-27 00:19:31 -         name = "Исходная функция"
2018-11-27 00:19:31 -     )   
2018-11-27 00:19:31 - [trace]
2018-11-27 00:19:31 - |> Chart.Plot
2018-11-27 00:19:31 - |> Chart.WithWidth 1000
2018-11-27 00:19:31 - |> Chart.WithHeight 700
2018-11-27 00:19:56 - let trace =
2018-11-27 00:19:56 -     Scatter(
2018-11-27 00:19:56 -         x = x,
2018-11-27 00:19:56 -         y = (x |> List.map (fun i -> abs (f' i - P' i))),
2018-11-27 00:19:56 -         name = "Исходная функция"
2018-11-27 00:19:56 -     )   
2018-11-27 00:19:56 - [trace]
2018-11-27 00:19:56 - |> Chart.Plot
2018-11-27 00:19:56 - |> Chart.WithWidth 1000
2018-11-27 00:19:56 - |> Chart.WithHeight 700
2018-11-27 00:20:04 - let trace =
2018-11-27 00:20:04 -     Scatter(
2018-11-27 00:20:04 -         x = x,
2018-11-27 00:20:04 -         y = (x |> List.map (fun i -> abs (f'' i - P'' i))),
2018-11-27 00:20:04 -         name = "Исходная функция"
2018-11-27 00:20:04 -     )   
2018-11-27 00:20:04 - [trace]
2018-11-27 00:20:04 - |> Chart.Plot
2018-11-27 00:20:04 - |> Chart.WithWidth 1000
2018-11-27 00:20:04 - |> Chart.WithHeight 700
